Path: news.gmane.org!not-for-mail
From: Bart Van Assche <bvanassche@acm.org>
Newsgroups: gmane.linux.kernel,gmane.linux.scsi
Subject: Re: [PATCH] fix NULL-pointer dereference on scsi_run_queue
Date: Sat, 04 Aug 2012 09:01:25 +0000
Lines: 58
Approved: news@gmane.org
Message-ID: <501CE4E5.20604@acm.org>
References: <CAOAMb1D+g0zzKGKjMPPp7V-XEwKB5AYGMDvUUbXNaHaz8ieTVg@mail.gmail.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1344070905 17933 80.91.229.3 (4 Aug 2012 09:01:45 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Sat, 4 Aug 2012 09:01:45 +0000 (UTC)
Cc: James Bottomley <JBottomley@parallels.com>,
	linux-scsi@vger.kernel.org, linux-kernel@vger.kernel.org,
	Jens Axboe <axboe@kernel.dk>, Tejun Heo <tj@kernel.org>,
	Mike Christie <michaelc@cs.wisc.edu>
To: Chanho Min <chanho0207@gmail.com>
Original-X-From: linux-kernel-owner@vger.kernel.org Sat Aug 04 11:01:45 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SxaEy-00081m-FC
	for glk-linux-kernel-3@plane.gmane.org; Sat, 04 Aug 2012 11:01:44 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753954Ab2HDJBg (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Sat, 4 Aug 2012 05:01:36 -0400
Original-Received: from relay02ant.iops.be ([212.53.4.35]:35398 "EHLO
	relay02ant.iops.be" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752220Ab2HDJBc (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Sat, 4 Aug 2012 05:01:32 -0400
Original-Received: from localhost (localhost.localdomain [127.0.0.1])
	by relay02ant.iops.be (Postfix) with ESMTP id 4B64440200E6;
	Sat,  4 Aug 2012 11:01:31 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=iops.be; h=
	content-transfer-encoding:content-type:content-type:in-reply-to
	:references:subject:subject:mime-version:user-agent:from:from
	:date:date:message-id:received:received; s=scooby; i=
	postadmin@iops.be; t=1344070890; bh=QXqa4wb7usr27+HdDEyzQIEVAc/Y
	A4u2jc4/O/9Xqr8=; b=hiLLCwvqBV2Q0G4jHw91MdvSpwtr9BpMBXcSXT7rAZ2u
	iMrTz/GQ3VNe6U+Z0gBjv63oAtI4aevj5/mypG9bVjLXKUOKCx/+qIJRZwcPNDtH
	nfGLtO+YahTi8jaY5XBVWo1dcvxt6QGZ1EsqUpdSDcrDSK3tzopbCO5ffdx3YNc=
X-Virus-Scanned: amavisd-new at iops.be
Original-Received: from relay02ant.iops.be ([127.0.0.1])
	by localhost (bdell035.dcn.iops.be [127.0.0.1]) (amavisd-new, port 10026)
	with LMTP id y3ewaj7U4sfO; Sat,  4 Aug 2012 11:01:30 +0200 (CEST)
Original-Received: from [192.168.1.70] (cust-207-8-110-94.dyn.as47377.net [94.110.8.207])
	by relay02ant.iops.be (Postfix) with ESMTP id 24EAE40200E0;
	Sat,  4 Aug 2012 11:01:26 +0200 (CEST)
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:14.0) Gecko/20120713 Thunderbird/14.0
In-Reply-To: <CAOAMb1D+g0zzKGKjMPPp7V-XEwKB5AYGMDvUUbXNaHaz8ieTVg@mail.gmail.com>
X-Enigmail-Version: 1.5a1pre
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1337635 gmane.linux.scsi:76772
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1337635>

On 08/02/12 08:41, Chanho Min wrote:
> This patch is to fix a oops from a torn down device. When
> scsi_run_queue process starved queues, scsi_request_fn can race with
> scsi_remove_device. In this case, rarely, scsi_request_fn release the
> last reference and set sdev->request_queue to NULL. It result in
> NULL-pointer dereference when spin_unlock is tried with (NULL)->
> queue_lock. We need to add an extra reference to the device on both
> sides of the __blk_run_queue to hold reference until scsi_request_fn
> is finished.

Good catch. So far I haven't been able to trigger this issue in my
tests. So it would be appreciated if you could verify whether the patch
below helps (patch is based on 3.6-rc1):

---
 drivers/scsi/scsi_sysfs.c |    8 +++++++-
 1 files changed, 7 insertions(+), 1 deletions(-)

diff --git a/drivers/scsi/scsi_sysfs.c b/drivers/scsi/scsi_sysfs.c
index 093d4f6..59e523c 100644
--- a/drivers/scsi/scsi_sysfs.c
+++ b/drivers/scsi/scsi_sysfs.c
@@ -348,7 +348,6 @@ static void scsi_device_dev_release_usercontext(struct work_struct *work)
 	starget->reap_ref++;
 	list_del(&sdev->siblings);
 	list_del(&sdev->same_target_siblings);
-	list_del(&sdev->starved_entry);
 	spin_unlock_irqrestore(sdev->host->host_lock, flags);
 
 	cancel_work_sync(&sdev->event_work);
@@ -956,6 +955,8 @@ int scsi_sysfs_add_sdev(struct scsi_device *sdev)
 void __scsi_remove_device(struct scsi_device *sdev)
 {
 	struct device *dev = &sdev->sdev_gendev;
+	struct Scsi_Host *shost = sdev->host;
+	unsigned long flags;
 
 	if (sdev->is_visible) {
 		if (scsi_device_set_state(sdev, SDEV_CANCEL) != 0)
@@ -977,6 +978,11 @@ void __scsi_remove_device(struct scsi_device *sdev)
 	blk_cleanup_queue(sdev->request_queue);
 	cancel_work_sync(&sdev->requeue_work);
 
+	spin_lock_irqsave(shost->host_lock, flags);
+	if (!list_empty(&sdev->starved_entry))
+		list_del(&sdev->starved_entry);
+	spin_unlock_irqrestore(shost->host_lock, flags);
+
 	if (sdev->host->hostt->slave_destroy)
 		sdev->host->hostt->slave_destroy(sdev);
 	transport_destroy_device(dev);
-- 
1.7.7





