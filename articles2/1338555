Path: news.gmane.org!not-for-mail
From: Bjorn Helgaas <bhelgaas@google.com>
Newsgroups: gmane.linux.kernel.pci,gmane.linux.kernel
Subject: Re: [PATCH] pci: Account for virtual buses in pci_acs_path_enabled
Date: Mon, 6 Aug 2012 13:47:03 -0700
Lines: 129
Approved: news@gmane.org
Message-ID: <CAErSpo756PXBNjwEMEX8DKGcEu0R+UuQ+rg9NG8k1c+TZ=j2Gw@mail.gmail.com>
References: <20120804181445.6598.6505.stgit@bling.home> <CAErSpo42VMnfzDP6t5eCFfE-5=yPNmNGLs6a2D0KwGMhe71DbQ@mail.gmail.com>
 <1344232549.3441.7.camel@ul30vt.home>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
X-Trace: dough.gmane.org 1344286052 9415 80.91.229.3 (6 Aug 2012 20:47:32 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Mon, 6 Aug 2012 20:47:32 +0000 (UTC)
Cc: linux-pci@vger.kernel.org, linux-kernel@vger.kernel.org,
	dsahern@gmail.com
To: Alex Williamson <alex.williamson@redhat.com>
Original-X-From: linux-pci-owner@vger.kernel.org Mon Aug 06 22:47:32 2012
Return-path: <linux-pci-owner@vger.kernel.org>
Envelope-to: glp-linux-pci@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-pci-owner@vger.kernel.org>)
	id 1SyUD2-0006b5-PJ
	for glp-linux-pci@plane.gmane.org; Mon, 06 Aug 2012 22:47:29 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756724Ab2HFUr1 (ORCPT <rfc822;glp-linux-pci@m.gmane.org>);
	Mon, 6 Aug 2012 16:47:27 -0400
Original-Received: from mail-lb0-f174.google.com ([209.85.217.174]:34036 "EHLO
	mail-lb0-f174.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1756698Ab2HFUrZ (ORCPT
	<rfc822;linux-pci@vger.kernel.org>); Mon, 6 Aug 2012 16:47:25 -0400
Original-Received: by lbbgm6 with SMTP id gm6so3065783lbb.19
        for <linux-pci@vger.kernel.org>; Mon, 06 Aug 2012 13:47:24 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type:x-system-of-record;
        bh=XDU0x2x9ymvomu6IqWwm4KjLSYJ7DXoDaT0ttLC+Grw=;
        b=Au9wiupJMMFcz7/gvvDjxucFShVXey7t0hk8yjrVR616Rf0JeSufL83kh3BGn9grq1
         sQAzSfVtQttXBz65HySx7+Q7iF28owsGM8KUm/oSepvVv7w+JWzftLxer8TIC3ZMjpj3
         KQG4POXRxbH/d7/MxizY59iOXnu8jErlTIT9WsKIDvFAOPz1YsrO3yZpROEB3iAfhkaK
         uj1ZPv1LBB3dDhmnFGoV1++QXDgGA1+gAFp5B8MW6bTe1LKWY8sjenSx6MWbjYqkaGi+
         ubg1uhZm1CsMfrmmiI6fbNVvrDicJ1ZpibPMa59yGhZjlT+LHYJTEvLmH2RX59UsDXyE
         Zhaw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type:x-system-of-record:x-gm-message-state;
        bh=XDU0x2x9ymvomu6IqWwm4KjLSYJ7DXoDaT0ttLC+Grw=;
        b=CtCMWQKHwc0wEVkxBOY2Pvqn5r+Dg3halnRZvP9U9xTwa5S2I4KqKyPJLwooRN2vtL
         X74pWdKzoi331LTvlDceVIadkbOOKA35tT+2zYh16u/lqqHutHdZgbUA82tHCk31Vv8L
         PKN1psNI1gZqtp2q5H+2wY5fpboQ7Ti9QGGhQV0FGzLtTjCTacWBm5izvIydiEPJTqrK
         E5NPYmPDPWnHzh5KIOLcgFoiZw5sL1X/5T+JQi1ghSxAyhT04W2QghK6R5RjzUVv1RZx
         xDhQQSOUiyLaIzUT25ZYsRsKPQdgJXGAjZaacJL3mpC7cKKxgJbxbRSXlt47Mmcn0d8J
         UdsQ==
Original-Received: by 10.112.98.40 with SMTP id ef8mr5363466lbb.72.1344286043994;
        Mon, 06 Aug 2012 13:47:23 -0700 (PDT)
Original-Received: by 10.112.98.40 with SMTP id ef8mr5363458lbb.72.1344286043853; Mon,
 06 Aug 2012 13:47:23 -0700 (PDT)
Original-Received: by 10.112.100.134 with HTTP; Mon, 6 Aug 2012 13:47:03 -0700 (PDT)
In-Reply-To: <1344232549.3441.7.camel@ul30vt.home>
X-System-Of-Record: true
X-Gm-Message-State: ALoCoQlbMw1l6+e2l9hs1bkuidG5RFUmtYNWeQgMra0LRHXIpaUw3cSbeBzEMReK5ul8lI8jrWynGMmnIqVtcRSj9BdqNZ8SVTE6UqoscEwidjqNmUaq3Ebp3qy3boTOI+oVypve/S6LkdsGPEsyYUQ2rYJ6Ci9bPmMHHMvPoUqWT7OBpGk+qxivF9nBb3GKAo+vo32nDRDhUF9HnnWsQRLqKW9q1j1OIg==
Original-Sender: linux-pci-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-pci.vger.kernel.org>
X-Mailing-List: linux-pci@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel.pci:16933 gmane.linux.kernel:1338555
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1338555>

On Sun, Aug 5, 2012 at 11:55 PM, Alex Williamson
<alex.williamson@redhat.com> wrote:
> On Sun, 2012-08-05 at 23:30 -0600, Bjorn Helgaas wrote:
>> On Sat, Aug 4, 2012 at 12:19 PM, Alex Williamson
>> <alex.williamson@redhat.com> wrote:
>> > It's possible to have buses without an associated bridge
>> > (bus->self == NULL).  SR-IOV can generate such buses.  When
>> > we find these, skip to the parent bus to look for the next
>> > ACS test.
>>
>> To make sure I understand the problem here, I think you're referring
>> to the situation where an SR-IOV device can span several bus numbers,
>> e.g., the "VFs Spanning Multiple Bus Numbers" implementation note in
>> the SR-IOV 1.1 spec, sec. 2.1.2.
>>
>> It says "All PFs must be located on the Device's captured Bus Number"
>> -- I think that means every PF will be directly on a bridge's
>> secondary bus and hence will have a valid dev->bus->self pointer.
>>
>> However, VFs need not be on the same bus number.  If a VF is on
>> (captured Bus Number plus 1), I think we allocate a new struct pci_bus
>> for it, but there's no P2P bridge that leads to that bus, so the
>> bus->self pointer is probably NULL.
>
> Yes, exactly.  virtfn_add_bus() is where we're creating this new bus.
>
>> This makes me quite nervous, because I bet there are many places that
>> assume every non-root bus has a valid bus->self pointer  -- I know I
>> certainly had that assumption.
>>
>> I looked at callers of pci_is_root_bus(), and at first glance, it seems like
>> iommu_init_device(), intel_iommu_add_device(), pci_acs_path_enabled(),
>
>
> These 3 are handled by this patch, plus the intel and amd iommu patches
> I sent.
>
>> pci_get_interrupt_pin(), pci_common_swizzle(),
>
> If sr-iov is the only source of these virtual buses, these are probably
> ok since VFs don't support INTx.
>
>> pci_find_upstream_pcie_bridge(), and
>
> Here the pci_is_root_bus() is after a pci_is_pcie() check, so again if
> sr-iov only (and assuming VFs properly report PCIe capability), we
> shouldn't stumble on it.
>
>> pci_bus_release_bridge_resources() all might have similar problems.
>
> This one might deserve further investigation.  Thanks,

We can fix all these places piecemeal, but that doesn't feel like a
very satisfying solution.  It makes it much harder to know that each
place is correct, and this oddity of a bus with no upstream bridge is
still lying around, waiting to bite us again later.

What other possible ways of fixing this do we have?  Could we set
bus->self (multiple buses would then point to the same bridge, and I
don't know if that would break something)?  Add something like a
pci_upstream_p2p_bridge() interface that would encapsulate traversing
the bus->parent and bus->self links?

Since these fake VF buses don't have a bridge that points to them, I
think the only place we keep a pointer to them is in the parent bus's
"children" list (updated in pci_add_new_bus()).  And now I'm confused
about when we should use bus->children and when we should use
bus->devices and why we should have both.

Does pci_walk_bus() work correctly with these VFs on fake buses?  It
doesn't use "children", so I can't see how it would ever find them.

Aren't you sorry you opened this can of worms?  :)

>> > Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
>> > ---
>> >
>> > David Ahern reported an oops from iommu drivers passing NULL into
>> > this function for the same mistake.  Harden this function against
>> > assuming bus->self is valid as well.  David, please include this
>> > patch as well as the iommu patches in your testing.
>> >
>> >  drivers/pci/pci.c |   22 +++++++++++++++++-----
>> >  1 file changed, 17 insertions(+), 5 deletions(-)
>> >
>> > diff --git a/drivers/pci/pci.c b/drivers/pci/pci.c
>> > index f3ea977..e11a49c 100644
>> > --- a/drivers/pci/pci.c
>> > +++ b/drivers/pci/pci.c
>> > @@ -2486,18 +2486,30 @@ bool pci_acs_enabled(struct pci_dev *pdev, u16 acs_flags)
>> >  bool pci_acs_path_enabled(struct pci_dev *start,
>> >                           struct pci_dev *end, u16 acs_flags)
>> >  {
>> > -       struct pci_dev *pdev, *parent = start;
>> > +       struct pci_dev *pdev = start;
>> > +       struct pci_bus *bus;
>> >
>> >         do {
>> > -               pdev = parent;
>> > -
>> >                 if (!pci_acs_enabled(pdev, acs_flags))
>> >                         return false;
>> >
>> > -               if (pci_is_root_bus(pdev->bus))
>> > +               bus = pdev->bus;
>> > +
>> > +               if (pci_is_root_bus(bus))
>> >                         return (end == NULL);
>> >
>> > -               parent = pdev->bus->self;
>> > +               /*
>> > +                * Skip buses without an associated bridge.  In this
>> > +                * case move to the parent and continue.
>> > +                */
>> > +               while (!bus->self) {
>> > +                       if (!pci_is_root_bus(bus))
>> > +                               bus = bus->parent;
>> > +                       else
>> > +                               return (end == NULL);
>> > +               }
>> > +
>> > +               pdev = bus->self;
>> >         } while (pdev != end);
>> >
>> >         return true;
>> >
>
>
>
