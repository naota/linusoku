Path: news.gmane.org!not-for-mail
From: Suresh Siddha <suresh.b.siddha@intel.com>
Newsgroups: gmane.linux.kernel,gmane.linux.kernel.janitors
Subject: Re: [tip:x86:fpu 2/2] arch/x86/kernel/signal.c:626:4: error:
 implicit declaration of function '__setup_frame'
Date: Thu, 09 Aug 2012 13:38:56 -0700
Organization: Intel Corp
Lines: 296
Approved: news@gmane.org
Message-ID: <1344544736.8326.17.camel@sbsiddha-desk.sc.intel.com>
References: <20120725232716.GB5758@localhost>
	 <1343324885.3696.527.camel@sbsiddha-desk.sc.intel.com>
	 <5022E963.9020809@zytor.com>
Reply-To: Suresh Siddha <suresh.b.siddha@intel.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: QUOTED-PRINTABLE
X-Trace: dough.gmane.org 1344544927 10529 80.91.229.3 (9 Aug 2012 20:42:07 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Thu, 9 Aug 2012 20:42:07 +0000 (UTC)
Cc: Fengguang Wu <fengguang.wu@intel.com>,
	kernel-janitors@vger.kernel.org, linux-kernel@vger.kernel.org
To: "H. Peter Anvin" <hpa@zytor.com>
Original-X-From: linux-kernel-owner@vger.kernel.org Thu Aug 09 22:42:06 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SzZYS-0004nM-49
	for glk-linux-kernel-3@plane.gmane.org; Thu, 09 Aug 2012 22:42:04 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755594Ab2HIUl4 convert rfc822-to-quoted-printable (ORCPT
	<rfc822;glk-linux-kernel-3@m.gmane.org>);
	Thu, 9 Aug 2012 16:41:56 -0400
Original-Received: from mga01.intel.com ([192.55.52.88]:19824 "EHLO mga01.intel.com"
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754738Ab2HIUly (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Thu, 9 Aug 2012 16:41:54 -0400
Original-Received: from fmsmga002.fm.intel.com ([10.253.24.26])
  by fmsmga101.fm.intel.com with ESMTP; 09 Aug 2012 13:41:54 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="4.77,742,1336374000"; 
   d="scan'208";a="205679024"
Original-Received: from sbsiddha-desk.sc.intel.com (HELO [10.3.79.149]) ([10.3.79.149])
  by fmsmga002.fm.intel.com with ESMTP; 09 Aug 2012 13:41:53 -0700
In-Reply-To: <5022E963.9020809@zytor.com>
X-Mailer: Evolution 3.0.3 (3.0.3-1.fc15) 
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1340981 gmane.linux.kernel.janitors:25380
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1340981>

On Wed, 2012-08-08 at 15:34 -0700, H. Peter Anvin wrote:
> With this patch applied I get an error at:
>=20
> /home/hpa/kernel/tip.x86-fpu/arch/x86/kernel/signal.c:792:12: error:=20
> static declaration of =E2=80=98x32_setup_rt_frame=E2=80=99 follows no=
n-static declaration
> In file included from=20
> /home/hpa/kernel/tip.x86-fpu/arch/x86/kernel/signal.c:29:0:
> /home/hpa/kernel/tip.x86-fpu/arch/x86/include/asm/fpu-internal.h:62:5=
:=20
> note: previous declaration of =E2=80=98x32_setup_rt_frame=E2=80=99 wa=
s here
> /home/hpa/kernel/tip.x86-fpu/arch/x86/kernel/signal.c:792:12: warning=
:=20
> =E2=80=98x32_setup_rt_frame=E2=80=99 defined but not used [-Wunused-f=
unction]
> make[4]: *** [arch/x86/kernel/signal.o] Error 1
> make[3]: *** [arch/x86/kernel] Error 2
> make[2]: *** [arch/x86] Error 2
> make[1]: *** [sub-make] Error 2
> make[1]: Leaving directory `/home/hpa/kernel/tip.x86-fpu'
>=20
> ... for an x86-64 allyesconfig.

Sorry my binutils didn't have x32 support, so didn't catch this earlier=
=2E
Here is the updated patch fixing all the compilation issues. Thanks.

---
=46rom: Suresh Siddha <suresh.b.siddha@intel.com>
Subject: x86, fpu: fix build issues with CONFIG_IA32_EMULATION, CONFIG_=
X86_X32_ABI

=46engguang's automated build reported some compilation failures:
> arch/x86/kernel/signal.c: In function 'setup_rt_frame':
> arch/x86/kernel/signal.c:626:4: error: implicit declaration of functi=
on '__setup_frame'
> ...

Code saving fsave prefix is applicable only for CONFIG_X86_32 or
CONFIG_IA32_EMULATION. Use config_enabled() checks to remove the unnece=
ssary
code compile-time for x86_64 kernels build without CONFIG_IA32_EMULATIO=
N.

Peter reported some build failures with CONFIG_X86_X32_ABI:
> arch/x86/kernel/signal.c:792:12: error:=20
> static declaration of =E2=80=98x32_setup_rt_frame=E2=80=99 follows no=
n-static declaration
> ...

=46ix it by moving the x32_setup_rt_frame() code around and removing th=
e
non-static declaration.

Also while we are at this, fix a spurious warning:
> arch/x86/kernel/xsave.c:209:15: warning: ignoring return value
> of =E2=80=98__clear_user=E2=80=99, declared with attribute warn_unuse=
d_result

Signed-off-by: Suresh Siddha <suresh.b.siddha@intel.com>
---
 arch/x86/include/asm/fpu-internal.h |    7 +--
 arch/x86/kernel/signal.c            |  134 ++++++++++++++++++---------=
--------
 arch/x86/kernel/xsave.c             |   10 ++-
 3 files changed, 77 insertions(+), 74 deletions(-)

diff --git a/arch/x86/include/asm/fpu-internal.h b/arch/x86/include/asm=
/fpu-internal.h
index 35ad161..ba83a08 100644
--- a/arch/x86/include/asm/fpu-internal.h
+++ b/arch/x86/include/asm/fpu-internal.h
@@ -22,7 +22,7 @@
 #include <asm/uaccess.h>
 #include <asm/xsave.h>
=20
-#ifdef CONFIG_IA32_EMULATION
+#ifdef CONFIG_X86_64
 # include <asm/sigcontext32.h>
 # include <asm/user32.h>
 int ia32_setup_rt_frame(int sig, struct k_sigaction *ka, siginfo_t *in=
fo,
@@ -52,17 +52,12 @@ extern user_regset_get_fn fpregs_get, xfpregs_get, =
fpregs_soft_get,
 extern user_regset_set_fn fpregs_set, xfpregs_set, fpregs_soft_set,
 				 xstateregs_set;
=20
-
 /*
  * xstateregs_active =3D=3D fpregs_active. Please refer to the comment
  * at the definition of fpregs_active.
  */
 #define xstateregs_active	fpregs_active
=20
-int x32_setup_rt_frame(int sig, struct k_sigaction *ka,
-		       siginfo_t *info, compat_sigset_t *set,
-		       struct pt_regs *regs);
-
 #ifdef CONFIG_MATH_EMULATION
 # define HAVE_HWFP             (boot_cpu_data.hard_math)
 extern void finit_soft_fpu(struct i387_soft_struct *soft);
diff --git a/arch/x86/kernel/signal.c b/arch/x86/kernel/signal.c
index 356e442..e10f96a 100644
--- a/arch/x86/kernel/signal.c
+++ b/arch/x86/kernel/signal.c
@@ -472,6 +472,74 @@ static int __setup_rt_frame(int sig, struct k_siga=
ction *ka, siginfo_t *info,
 }
 #endif /* CONFIG_X86_32 */
=20
+static int x32_setup_rt_frame(int sig, struct k_sigaction *ka,
+			      siginfo_t *info, compat_sigset_t *set,
+			      struct pt_regs *regs)
+{
+#ifdef CONFIG_X86_X32_ABI
+	struct rt_sigframe_x32 __user *frame;
+	void __user *restorer;
+	int err =3D 0;
+	void __user *fpstate =3D NULL;
+
+	frame =3D get_sigframe(ka, regs, sizeof(*frame), &fpstate);
+
+	if (!access_ok(VERIFY_WRITE, frame, sizeof(*frame)))
+		return -EFAULT;
+
+	if (ka->sa.sa_flags & SA_SIGINFO) {
+		if (copy_siginfo_to_user32(&frame->info, info))
+			return -EFAULT;
+	}
+
+	put_user_try {
+		/* Create the ucontext.  */
+		if (cpu_has_xsave)
+			put_user_ex(UC_FP_XSTATE, &frame->uc.uc_flags);
+		else
+			put_user_ex(0, &frame->uc.uc_flags);
+		put_user_ex(0, &frame->uc.uc_link);
+		put_user_ex(current->sas_ss_sp, &frame->uc.uc_stack.ss_sp);
+		put_user_ex(sas_ss_flags(regs->sp),
+			    &frame->uc.uc_stack.ss_flags);
+		put_user_ex(current->sas_ss_size, &frame->uc.uc_stack.ss_size);
+		put_user_ex(0, &frame->uc.uc__pad0);
+		err |=3D setup_sigcontext(&frame->uc.uc_mcontext, fpstate,
+					regs, set->sig[0]);
+		err |=3D __copy_to_user(&frame->uc.uc_sigmask, set, sizeof(*set));
+
+		if (ka->sa.sa_flags & SA_RESTORER) {
+			restorer =3D ka->sa.sa_restorer;
+		} else {
+			/* could use a vstub here */
+			restorer =3D NULL;
+			err |=3D -EFAULT;
+		}
+		put_user_ex(restorer, &frame->pretcode);
+	} put_user_catch(err);
+
+	if (err)
+		return -EFAULT;
+
+	/* Set up registers for signal handler */
+	regs->sp =3D (unsigned long) frame;
+	regs->ip =3D (unsigned long) ka->sa.sa_handler;
+
+	/* We use the x32 calling convention here... */
+	regs->di =3D sig;
+	regs->si =3D (unsigned long) &frame->info;
+	regs->dx =3D (unsigned long) &frame->uc;
+
+	loadsegment(ds, __USER_DS);
+	loadsegment(es, __USER_DS);
+
+	regs->cs =3D __USER_CS;
+	regs->ss =3D __USER_DS;
+#endif	/* CONFIG_X86_X32_ABI */
+
+	return 0;
+}
+
 #ifdef CONFIG_X86_32
 /*
  * Atomically swap in the new signal mask, and wait for a signal.
@@ -789,72 +857,6 @@ void signal_fault(struct pt_regs *regs, void __use=
r *frame, char *where)
 }
=20
 #ifdef CONFIG_X86_X32_ABI
-static int x32_setup_rt_frame(int sig, struct k_sigaction *ka,
-			      siginfo_t *info, compat_sigset_t *set,
-			      struct pt_regs *regs)
-{
-	struct rt_sigframe_x32 __user *frame;
-	void __user *restorer;
-	int err =3D 0;
-	void __user *fpstate =3D NULL;
-
-	frame =3D get_sigframe(ka, regs, sizeof(*frame), &fpstate);
-
-	if (!access_ok(VERIFY_WRITE, frame, sizeof(*frame)))
-		return -EFAULT;
-
-	if (ka->sa.sa_flags & SA_SIGINFO) {
-		if (copy_siginfo_to_user32(&frame->info, info))
-			return -EFAULT;
-	}
-
-	put_user_try {
-		/* Create the ucontext.  */
-		if (cpu_has_xsave)
-			put_user_ex(UC_FP_XSTATE, &frame->uc.uc_flags);
-		else
-			put_user_ex(0, &frame->uc.uc_flags);
-		put_user_ex(0, &frame->uc.uc_link);
-		put_user_ex(current->sas_ss_sp, &frame->uc.uc_stack.ss_sp);
-		put_user_ex(sas_ss_flags(regs->sp),
-			    &frame->uc.uc_stack.ss_flags);
-		put_user_ex(current->sas_ss_size, &frame->uc.uc_stack.ss_size);
-		put_user_ex(0, &frame->uc.uc__pad0);
-		err |=3D setup_sigcontext(&frame->uc.uc_mcontext, fpstate,
-					regs, set->sig[0]);
-		err |=3D __copy_to_user(&frame->uc.uc_sigmask, set, sizeof(*set));
-
-		if (ka->sa.sa_flags & SA_RESTORER) {
-			restorer =3D ka->sa.sa_restorer;
-		} else {
-			/* could use a vstub here */
-			restorer =3D NULL;
-			err |=3D -EFAULT;
-		}
-		put_user_ex(restorer, &frame->pretcode);
-	} put_user_catch(err);
-
-	if (err)
-		return -EFAULT;
-
-	/* Set up registers for signal handler */
-	regs->sp =3D (unsigned long) frame;
-	regs->ip =3D (unsigned long) ka->sa.sa_handler;
-
-	/* We use the x32 calling convention here... */
-	regs->di =3D sig;
-	regs->si =3D (unsigned long) &frame->info;
-	regs->dx =3D (unsigned long) &frame->uc;
-
-	loadsegment(ds, __USER_DS);
-	loadsegment(es, __USER_DS);
-
-	regs->cs =3D __USER_CS;
-	regs->ss =3D __USER_DS;
-
-	return 0;
-}
-
 asmlinkage long sys32_x32_rt_sigreturn(struct pt_regs *regs)
 {
 	struct rt_sigframe_x32 __user *frame;
diff --git a/arch/x86/kernel/xsave.c b/arch/x86/kernel/xsave.c
index 2917e34..a23d100 100644
--- a/arch/x86/kernel/xsave.c
+++ b/arch/x86/kernel/xsave.c
@@ -205,8 +205,8 @@ static inline int save_user_xstate(struct xsave_str=
uct __user *buf)
 	else
 		err =3D fsave_user((struct i387_fsave_struct __user *) buf);
=20
-	if (unlikely(err))
-		__clear_user(buf, xstate_size);
+	if (unlikely(err) && __clear_user(buf, xstate_size))
+		err =3D -EFAULT;
 	return err;
 }
=20
@@ -236,6 +236,9 @@ int save_xstate_sig(void __user *buf, void __user *=
buf_fx, int size)
 	struct task_struct *tsk =3D current;
 	int ia32_fxstate =3D (buf !=3D buf_fx);
=20
+	ia32_fxstate &=3D (config_enabled(CONFIG_X86_32) ||
+			 config_enabled(CONFIG_IA32_EMULATION));
+
 	if (!access_ok(VERIFY_WRITE, buf, size))
 		return -EACCES;
=20
@@ -333,6 +336,9 @@ int __restore_xstate_sig(void __user *buf, void __u=
ser *buf_fx, int size)
 	u64 xstate_bv =3D 0;
 	int fx_only =3D 0;
=20
+	ia32_fxstate &=3D (config_enabled(CONFIG_X86_32) ||
+			 config_enabled(CONFIG_IA32_EMULATION));
+
 	if (!buf) {
 		drop_fpu(tsk);
 		return 0;


