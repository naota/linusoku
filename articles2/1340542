Path: news.gmane.org!not-for-mail
From: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
Newsgroups: gmane.linux.kernel
Subject: Re: [RFC PATCH 4/4] ftrace/x86: Add support for -mfentry to x86_64
Date: Thu, 09 Aug 2012 17:34:22 +0900
Organization: Hitachi, Ltd., Japan
Lines: 172
Approved: news@gmane.org
Message-ID: <5023760E.7040207@hitachi.com>
References: <20120807193845.146666357@goodmis.org> <20120807194100.130477900@goodmis.org>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1344501288 30290 80.91.229.3 (9 Aug 2012 08:34:48 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Thu, 9 Aug 2012 08:34:48 +0000 (UTC)
Cc: linux-kernel@vger.kernel.org, Ingo Molnar <mingo@elte.hu>,
	Andrew Morton <akpm@linux-foundation.org>,
	Thomas Gleixner <tglx@linutronix.de>,
	Frederic Weisbecker <fweisbec@gmail.com>,
	Linus Torvalds <torvalds@linux-foundation.org>,
	Andi Kleen <andi@firstfloor.org>
To: Steven Rostedt <rostedt@goodmis.org>
Original-X-From: linux-kernel-owner@vger.kernel.org Thu Aug 09 10:34:47 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SzOCc-00027f-I9
	for glk-linux-kernel-3@plane.gmane.org; Thu, 09 Aug 2012 10:34:47 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756515Ab2HIIei (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Thu, 9 Aug 2012 04:34:38 -0400
Original-Received: from mail9.hitachi.co.jp ([133.145.228.44]:41678 "EHLO
	mail9.hitachi.co.jp" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1756309Ab2HIIee (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Thu, 9 Aug 2012 04:34:34 -0400
Original-Received: from mlsv6.hitachi.co.jp (unknown [133.144.234.166])
	by mail9.hitachi.co.jp (Postfix) with ESMTP id 1352D37C84;
	Thu,  9 Aug 2012 17:34:33 +0900 (JST)
Original-Received: from mfilter03.hitachi.co.jp by mlsv6.hitachi.co.jp (8.13.1/8.13.1) id q798YXu1008187; Thu, 9 Aug 2012 17:34:33 +0900
Original-Received: from hitachi.com (localhost.localdomain [127.0.0.1])
	by mfilter03.hitachi.co.jp (Switch-3.3.4/Switch-3.3.4) with ESMTP id q798YRL4008128;
	Thu, 9 Aug 2012 17:34:32 +0900
Original-Received: from vshuts2.hitachi.co.jp ([vshuts2.hitachi.co.jp [10.201.6.71]]) by mfilter03.hitachi.co.jp with RELAY id q798YVDc008152 ;
          Thu, 9 Aug 2012 17:34:32 +0900
X-AuditID: b753bd60-905f3ba000006b7e-cc-502376177acd
X-AuditID: b753bd60-905f3ba000006b7e-cc-502376177acd
Original-Received: from hsdlmain.sdl.hitachi.co.jp (unknown [133.144.14.194])
	by vshuts2.hitachi.co.jp (Symantec Mail Security) with ESMTP id 45F4D8B033F;
	Thu,  9 Aug 2012 17:34:31 +0900 (JST)
Original-Received: from hsdlvgate2.sdl.hitachi.co.jp by hsdlmain.sdl.hitachi.co.jp (8.13.8/3.7W11021512) id q798YVim012689; Thu, 9 Aug 2012 17:34:31 +0900
Original-Received: from sdl99w.sdl.hitachi.co.jp (sdl99w.sdl.hitachi.co.jp [133.144.14.250])
	by hsdlvgate2.sdl.hitachi.co.jp (Symantec Mail Security) with ESMTP id DDDF7236561;
	Thu,  9 Aug 2012 17:34:30 +0900 (JST)
Original-Received: from maila.sdl.hitachi.co.jp (sdl99a.sdl.hitachi.co.jp [133.144.14.196])
	by sdl99w.sdl.hitachi.co.jp (Postfix) with ESMTP id 79AF753C158;
	Thu,  9 Aug 2012 17:34:31 +0900 (JST)
Original-Received: from [10.198.208.51] (unknown [10.198.208.51])
	by maila.sdl.hitachi.co.jp (Postfix) with ESMTP id B0323495B84;
	Thu,  9 Aug 2012 17:34:30 +0900 (JST)
User-Agent: Mozilla/5.0 (Windows NT 5.2; rv:13.0) Gecko/20120614 Thunderbird/13.0.1
In-Reply-To: <20120807194100.130477900@goodmis.org>
X-Brightmail-Tracker: AAAAAA==
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1340542
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1340542>

(2012/08/08 4:38), Steven Rostedt wrote:
> From: Steven Rostedt <srostedt@redhat.com>
> 
> If the kernel is compiled with gcc 4.6.0 which supports -mfentry,
> then use that instead of mcount.
> 
> With mcount, frame pointers are forced with the -pg option and we
> get something like:
> 
> <can_vma_merge_before>:
>        55                      push   %rbp
>        48 89 e5                mov    %rsp,%rbp
>        53                      push   %rbx
>        41 51                   push   %r9
>        e8 fe 6a 39 00          callq  ffffffff81483d00 <mcount>
>        31 c0                   xor    %eax,%eax
>        48 89 fb                mov    %rdi,%rbx
>        48 89 d7                mov    %rdx,%rdi
>        48 33 73 30             xor    0x30(%rbx),%rsi
>        48 f7 c6 ff ff ff f7    test   $0xfffffffff7ffffff,%rsi
> 
> With -mfentry, frame pointers are no longer forced and the call looks
> like this:
> 
> <can_vma_merge_before>:
>        e8 33 af 37 00          callq  ffffffff81461b40 <__fentry__>
>        53                      push   %rbx
>        48 89 fb                mov    %rdi,%rbx
>        31 c0                   xor    %eax,%eax
>        48 89 d7                mov    %rdx,%rdi
>        41 51                   push   %r9
>        48 33 73 30             xor    0x30(%rbx),%rsi
>        48 f7 c6 ff ff ff f7    test   $0xfffffffff7ffffff,%rsi
> 
> This adds the ftrace hook at the beginning of the function before a
> frame is set up, and allows the function callbacks to be able to access
> parameters. As kprobes now can use function tracing (at least on x86)
> this speeds up the kprobe hooks that are at the beginning of the
> function.

This looks good for me:)

Reviewed-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>

Thanks!

> 
> Cc: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
> Cc: Andi Kleen <andi@firstfloor.org>
> Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
> ---
>  arch/x86/Kconfig                 |    1 +
>  arch/x86/include/asm/ftrace.h    |    7 ++++++-
>  arch/x86/kernel/entry_64.S       |   18 +++++++++++++++++-
>  arch/x86/kernel/x8664_ksyms_64.c |    6 +++++-
>  4 files changed, 29 insertions(+), 3 deletions(-)
> 
> diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
> index c70684f..bbbf5d8 100644
> --- a/arch/x86/Kconfig
> +++ b/arch/x86/Kconfig
> @@ -36,6 +36,7 @@ config X86
>  	select HAVE_KRETPROBES
>  	select HAVE_OPTPROBES
>  	select HAVE_FTRACE_MCOUNT_RECORD
> +	select HAVE_FENTRY if X86_64
>  	select HAVE_C_RECORDMCOUNT
>  	select HAVE_DYNAMIC_FTRACE
>  	select HAVE_FUNCTION_TRACER
> diff --git a/arch/x86/include/asm/ftrace.h b/arch/x86/include/asm/ftrace.h
> index a6cae0c..9a25b52 100644
> --- a/arch/x86/include/asm/ftrace.h
> +++ b/arch/x86/include/asm/ftrace.h
> @@ -35,7 +35,11 @@
>  #endif
>  
>  #ifdef CONFIG_FUNCTION_TRACER
> -#define MCOUNT_ADDR		((long)(mcount))
> +#ifdef CC_USING_FENTRY
> +# define MCOUNT_ADDR		((long)(__fentry__))
> +#else
> +# define MCOUNT_ADDR		((long)(mcount))
> +#endif
>  #define MCOUNT_INSN_SIZE	5 /* sizeof mcount call */
>  
>  #ifdef CONFIG_DYNAMIC_FTRACE
> @@ -46,6 +50,7 @@
>  #ifndef __ASSEMBLY__
>  extern void mcount(void);
>  extern atomic_t modifying_ftrace_code;
> +extern void __fentry__(void);
>  
>  static inline unsigned long ftrace_call_adjust(unsigned long addr)
>  {
> diff --git a/arch/x86/kernel/entry_64.S b/arch/x86/kernel/entry_64.S
> index 38308fa..2add3bb 100644
> --- a/arch/x86/kernel/entry_64.S
> +++ b/arch/x86/kernel/entry_64.S
> @@ -69,9 +69,16 @@
>  
>  #ifdef CONFIG_FUNCTION_TRACER
>  #ifdef CONFIG_DYNAMIC_FTRACE
> +
> +#ifdef CC_USING_FENTRY
> +ENTRY(__fentry__)
> +	retq
> +END(__fentry__)
> +#else
>  ENTRY(mcount)
>  	retq
>  END(mcount)
> +#endif
>  
>  /* skip is set if stack has been adjusted */
>  .macro ftrace_caller_setup skip=0
> @@ -84,7 +91,11 @@ END(mcount)
>  	movq RIP(%rsp), %rdi
>  	subq $MCOUNT_INSN_SIZE, %rdi
>  	/* Load the parent_ip into the second parameter */
> +#ifdef CC_USING_FENTRY
> +	movq SS+16(%rsp), %rsi
> +#else
>  	movq 8(%rbp), %rsi
> +#endif
>  .endm
>  
>  ENTRY(ftrace_caller)
> @@ -215,9 +226,14 @@ END(mcount)
>  ENTRY(ftrace_graph_caller)
>  	MCOUNT_SAVE_FRAME
>  
> +#ifdef CC_USING_FENTRY
> +	leaq SS+16(%rsp), %rdi
> +	movq $0, %rdx	/* No framepointers needed */
> +#else
>  	leaq 8(%rbp), %rdi
> -	movq RIP(%rsp), %rsi
>  	movq (%rbp), %rdx
> +#endif
> +	movq RIP(%rsp), %rsi
>  	subq $MCOUNT_INSN_SIZE, %rsi
>  
>  	call	prepare_ftrace_return
> diff --git a/arch/x86/kernel/x8664_ksyms_64.c b/arch/x86/kernel/x8664_ksyms_64.c
> index 9796c2f..643b236 100644
> --- a/arch/x86/kernel/x8664_ksyms_64.c
> +++ b/arch/x86/kernel/x8664_ksyms_64.c
> @@ -13,9 +13,13 @@
>  #include <asm/ftrace.h>
>  
>  #ifdef CONFIG_FUNCTION_TRACER
> -/* mcount is defined in assembly */
> +/* mcount and __fentry__ are defined in assembly */
> +#ifdef CC_USING_FENTRY
> +EXPORT_SYMBOL(__fentry__);
> +#else
>  EXPORT_SYMBOL(mcount);
>  #endif
> +#endif
>  
>  EXPORT_SYMBOL(__get_user_1);
>  EXPORT_SYMBOL(__get_user_2);
> 


-- 
Masami HIRAMATSU
Software Platform Research Dept. Linux Technology Center
Hitachi, Ltd., Yokohama Research Laboratory
E-mail: masami.hiramatsu.pt@hitachi.com


