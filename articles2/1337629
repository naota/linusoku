Path: news.gmane.org!not-for-mail
From: Pekka Enberg <penberg@kernel.org>
Newsgroups: gmane.linux.kernel
Subject: [PATCH v2] sched: Document schedule() entry points
Date: Sat,  4 Aug 2012 11:49:47 +0300
Lines: 61
Approved: news@gmane.org
Message-ID: <1344070187-2420-1-git-send-email-penberg@kernel.org>
NNTP-Posting-Host: plane.gmane.org
X-Trace: dough.gmane.org 1344070273 13667 80.91.229.3 (4 Aug 2012 08:51:13 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Sat, 4 Aug 2012 08:51:13 +0000 (UTC)
Cc: mingo@kernel.org, a.p.zijlstra@chello.nl,
	Pekka Enberg <penberg@kernel.org>,
	Randy Dunlap <rdunlap@xenotime.net>
To: linux-kernel@vger.kernel.org
Original-X-From: linux-kernel-owner@vger.kernel.org Sat Aug 04 10:51:12 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1Sxa4l-00041x-Nj
	for glk-linux-kernel-3@plane.gmane.org; Sat, 04 Aug 2012 10:51:12 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753874Ab2HDIuC (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Sat, 4 Aug 2012 04:50:02 -0400
Original-Received: from mail-lb0-f174.google.com ([209.85.217.174]:54961 "EHLO
	mail-lb0-f174.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752989Ab2HDIt6 (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Sat, 4 Aug 2012 04:49:58 -0400
Original-Received: by lbbgm6 with SMTP id gm6so2035044lbb.19
        for <linux-kernel@vger.kernel.org>; Sat, 04 Aug 2012 01:49:56 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=sender:from:to:cc:subject:date:message-id:x-mailer;
        bh=RekCIn/nkzRDdZVSm38aRHinmvpS3nmMtgGEFx91/Rs=;
        b=zthmBP9A7tWXENvqi+W+MXAoyx9XIkPZ2QQmHcb3fjev+G6G+HiRyi0VWfk11lqpO0
         1UOYVgqC8msVmMZk13XKxMNcTob3QV8dob5HiLTgaaVzNJ/WYtsibp7K8TCzHzqVfbGh
         uvOqo2j3Qjg0WUuwYb/MN4VdnxynAQUr5TaHJ8o5xRXi4WcNYkbijJ+yBKFcxfEsl9TR
         Jy+W+nOMagnR+8CTr8Ye4k8kVaTSxWe7tq0+ucCSedGugi7j5LAnF+5/1KtdRV73kRUB
         GSnUNV2vtIT0s5vKzTLFj4OrCVKaQcrwRmGgJKrYWVIR+kdVESiCyKFBMliUEwOC58vN
         brxQ==
Original-Received: by 10.152.114.3 with SMTP id jc3mr4212323lab.11.1344070196620;
        Sat, 04 Aug 2012 01:49:56 -0700 (PDT)
Original-Received: from tux.localdomain (cs181213079.pp.htv.fi. [82.181.213.79])
        by mx.google.com with ESMTPS id er3sm2463681lbb.16.2012.08.04.01.49.55
        (version=TLSv1/SSLv3 cipher=OTHER);
        Sat, 04 Aug 2012 01:49:56 -0700 (PDT)
X-Mailer: git-send-email 1.7.7.6
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1337629
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1337629>

This patch adds a comment on top of the schedule() function to explain
to scheduler newbies how the main scheduler function is entered.

Cc: Randy Dunlap <rdunlap@xenotime.net>
Explained-by: Ingo Molnar <mingo@kernel.org>
Explained-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
Signed-off-by: Pekka Enberg <penberg@kernel.org>
---
V1 -> V2: Fix funky grammar pointed out by Peter and Randy.

 kernel/sched/core.c |   34 ++++++++++++++++++++++++++++++++++
 1 files changed, 34 insertions(+), 0 deletions(-)

diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 468bdd4..7dc75df 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -3361,6 +3361,40 @@ pick_next_task(struct rq *rq)
 
 /*
  * __schedule() is the main scheduler function.
+ *
+ * The main means of driving the scheduler and thus entering this function are:
+ *
+ *   1. Explicit blocking: mutex, semaphore, waitqueue, etc.
+ *
+ *   2. TIF_NEED_RESCHED flag is checked on interrupt and userspace return
+ *      paths. For example, see arch/x86/entry_64.S.
+ *
+ *      To drive preemption between tasks, the scheduler sets the flag in timer
+ *      interrupt handler scheduler_tick().
+ *
+ *   3. Wakeups don't really cause entry into schedule(). They add a
+ *      task to the run-queue and that's it.
+ *
+ *      Now, if the new task added to the run-queue preempts the current
+ *      task, then the wakeup sets TIF_NEED_RESCHED and schedule() gets
+ *      called on the nearest possible occasion:
+ *
+ *       - If the kernel is preemptible (CONFIG_PREEMPT=y):
+ *
+ *         - in syscall or exception context, at the next outmost
+ *           preempt_enable(). (this might be as soon as the wake_up()'s
+ *           spin_unlock()!)
+ *
+ *         - in IRQ context, return from interrupt-handler to
+ *           preemptible context
+ *
+ *       - If the kernel is not preemptible (CONFIG_PREEMPT is not set)
+ *         then at the next:
+ *
+ *          - cond_resched() call
+ *          - explicit schedule() call
+ *          - return from syscall or exception to user-space
+ *          - return from interrupt-handler to user-space
  */
 static void __sched __schedule(void)
 {
-- 
1.7.7.6

