Path: news.gmane.org!not-for-mail
From: "ABRAHAM, KISHON VIJAY" <kishon@ti.com>
Newsgroups: gmane.linux.documentation,gmane.linux.drivers.devicetree,gmane.linux.kernel,gmane.linux.ports.arm.kernel,gmane.linux.ports.arm.omap,gmane.linux.usb.general
Subject: Re: [PATCH v6 01/11] drivers: usb: otg: add a new driver for omap
 usb2 phy
Date: Fri, 3 Aug 2012 20:01:44 +0530
Lines: 386
Approved: news@gmane.org
Message-ID: <CAAe_U6K15Nm5aNs2Vn71G7ELZWka1zB2E3VGZWTc0VjyViJ6Yw@mail.gmail.com>
References: <1343639400-28725-1-git-send-email-kishon@ti.com>
	<1343639400-28725-2-git-send-email-kishon@ti.com>
	<20120803132708.GC8269@arwen.pp.htv.fi>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
X-Trace: dough.gmane.org 1344004317 17821 80.91.229.3 (3 Aug 2012 14:31:57 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Fri, 3 Aug 2012 14:31:57 +0000 (UTC)
Cc: grant.likely@secretlab.ca, rob.herring@calxeda.com,
	rob@landley.net, linux@arm.linux.org.uk,
	gregkh@linuxfoundation.org, b-cousson@ti.com, rnayak@ti.com,
	tony@atomide.com, devicetree-discuss@lists.ozlabs.org,
	linux-doc@vger.kernel.org, linux-kernel@vger.kernel.org,
	linux-arm-kernel@lists.infradead.org, linux-omap@vger.kernel.org,
	linux-usb@vger.kernel.org
To: balbi@ti.com
Original-X-From: linux-doc-owner@vger.kernel.org Fri Aug 03 16:31:55 2012
Return-path: <linux-doc-owner@vger.kernel.org>
Envelope-to: lnx-linux-doc@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-doc-owner@vger.kernel.org>)
	id 1SxIuv-0004lp-Ns
	for lnx-linux-doc@plane.gmane.org; Fri, 03 Aug 2012 16:31:54 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753556Ab2HCObs (ORCPT <rfc822;lnx-linux-doc@m.gmane.org>);
	Fri, 3 Aug 2012 10:31:48 -0400
Original-Received: from na3sys009aog105.obsmtp.com ([74.125.149.75]:49463 "EHLO
	na3sys009aog105.obsmtp.com" rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1752332Ab2HCObq (ORCPT
	<rfc822;linux-doc@vger.kernel.org>); Fri, 3 Aug 2012 10:31:46 -0400
Original-Received: from mail-wi0-f181.google.com ([209.85.212.181]) (using TLSv1) by na3sys009aob105.postini.com ([74.125.148.12]) with SMTP
	ID DSNKUBvg0cffF1WV3TBcWooAg0yCV1A840/p@postini.com; Fri, 03 Aug 2012 07:31:46 PDT
Original-Received: by wibhm2 with SMTP id hm2so542165wib.4
        for <linux-doc@vger.kernel.org>; Fri, 03 Aug 2012 07:31:44 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type:x-gm-message-state;
        bh=ECVaOI/EJ8UJ+62kDBInrwu7ek7lJZeG7Ig30TiQ3k8=;
        b=UFq6A43Aj0KmyoD5nOBS5d6hVBuNQeOYK5UuZEbw+EpZ8pu3+L1CIjE3tQg0MP4sMx
         wghGF+neoPRI9+M9cHUexH/0pMZkNSKNSha/upthHzPwS60AVAqwlNUOzyqjG9dlU1sl
         3PJVqMDHOVdVoLtdL7JJctaZX3IdZ+06QvhI/EFLuUvueTuow9JoBX+2vNuIhXwwE7PL
         FR216JQTMNEifYcH1h7xrGx4JWbkIUSFf1tGXPlY1yQnP8fmlOF5UZHZAu08LJ7BmJ3g
         Yw/udMxMH0AgbBpmdQuhIAYfDICmjFnh0yBRH6R0ME99Cn/3W5cCA4Ea3m/6zWcgfvj+
         9eKg==
Original-Received: by 10.180.76.135 with SMTP id k7mr13834124wiw.7.1344004304265; Fri,
 03 Aug 2012 07:31:44 -0700 (PDT)
Original-Received: by 10.216.203.69 with HTTP; Fri, 3 Aug 2012 07:31:44 -0700 (PDT)
In-Reply-To: <20120803132708.GC8269@arwen.pp.htv.fi>
X-Gm-Message-State: ALoCoQltrIFOgOLEJ4edSn7bTlxs2mZcHyOLLiUDYOBEKb4jJkk++FC3a0Y6vhdYgrmcCUsOt95W
Original-Sender: linux-doc-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-doc.vger.kernel.org>
X-Mailing-List: linux-doc@vger.kernel.org
Xref: news.gmane.org gmane.linux.documentation:6025 gmane.linux.drivers.devicetree:19019 gmane.linux.kernel:1337335 gmane.linux.ports.arm.kernel:180102 gmane.linux.ports.arm.omap:81769 gmane.linux.usb.general:68835
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1337335>

Hi,

On Fri, Aug 3, 2012 at 6:57 PM, Felipe Balbi <balbi@ti.com> wrote:
> On Mon, Jul 30, 2012 at 02:39:50PM +0530, Kishon Vijay Abraham I wrote:
>> All phy related programming like enabling/disabling the clocks, powering
>> on/off the phy is taken care of by this driver. It is also used for OTG
>> related functionality like srp.
>>
>> This also includes device tree support for usb2 phy driver and
>> the documentation with device tree binding information is updated.
>>
>> Currently writing to control module register is taken care in this
>> driver which will be removed once the control module driver is in place.
>>
>> Cc: Felipe Balbi <balbi@ti.com>
>> Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
>> ---
>>  .../devicetree/bindings/bus/omap-ocp2scp.txt       |    3 +
>>  Documentation/devicetree/bindings/usb/omap-usb.txt |   17 ++
>>  drivers/usb/otg/Kconfig                            |   10 +
>>  drivers/usb/otg/Makefile                           |    1 +
>>  drivers/usb/otg/omap-usb2.c                        |  280 ++++++++++++++++++++
>
> let's move this to drivers/usb/phy/. I'll prepare a patch moving all phy
> drivers to that directory after the OTG state machine is ready ;-)

Ok.
>
>> diff --git a/Documentation/devicetree/bindings/usb/omap-usb.txt b/Documentation/devicetree/bindings/usb/omap-usb.txt
>> new file mode 100644
>> index 0000000..52f503b
>> --- /dev/null
>> +++ b/Documentation/devicetree/bindings/usb/omap-usb.txt
>> @@ -0,0 +1,17 @@
>> +OMAP USB PHY
>> +
>> +OMAP USB2 PHY
>> +
>> +Required properties:
>> + - compatible: Should be "ti,omap-usb2"
>> + - reg : Address and length of the register set for the device. Also
>> +add the address of control module dev conf register until a driver for
>> +control module is added
>> +
>> +This is usually a subnode of ocp2scp to which it is connected.
>> +
>> +usb2phy@4a0ad080 {
>> +     compatible = "ti,omap-usb2";
>> +     reg = <0x4a0ad080 0x58>,
>> +             <0x4a002300 0x1>;
>> +};
>> diff --git a/drivers/usb/otg/Kconfig b/drivers/usb/otg/Kconfig
>> index 5c87db0..c751db7 100644
>> --- a/drivers/usb/otg/Kconfig
>> +++ b/drivers/usb/otg/Kconfig
>> @@ -78,6 +78,16 @@ config TWL6030_USB
>>         are hooked to this driver through platform_data structure.
>>         The definition of internal PHY APIs are in the mach-omap2 layer.
>>
>> +config OMAP_USB2
>> +     tristate "OMAP USB2 PHY Driver"
>> +     depends on OMAP_OCP2SCP
>> +     select USB_OTG_UTILS
>> +     help
>> +       Enable this to support the transceiver that is part of SOC. This
>> +       driver takes care of all the PHY functionality apart from comparator.
>> +       The USB OTG controller communicates with the comparator using this
>> +       driver.
>> +
>>  config NOP_USB_XCEIV
>>       tristate "NOP USB Transceiver Driver"
>>       select USB_OTG_UTILS
>> diff --git a/drivers/usb/otg/Makefile b/drivers/usb/otg/Makefile
>> index 41aa509..2c2a3ca 100644
>> --- a/drivers/usb/otg/Makefile
>> +++ b/drivers/usb/otg/Makefile
>> @@ -13,6 +13,7 @@ obj-$(CONFIG_USB_GPIO_VBUS) += gpio_vbus.o
>>  obj-$(CONFIG_ISP1301_OMAP)   += isp1301_omap.o
>>  obj-$(CONFIG_TWL4030_USB)    += twl4030-usb.o
>>  obj-$(CONFIG_TWL6030_USB)    += twl6030-usb.o
>> +obj-$(CONFIG_OMAP_USB2)              += omap-usb2.o
>>  obj-$(CONFIG_NOP_USB_XCEIV)  += nop-usb-xceiv.o
>>  obj-$(CONFIG_USB_ULPI)               += ulpi.o
>>  obj-$(CONFIG_USB_ULPI_VIEWPORT)      += ulpi_viewport.o
>> diff --git a/drivers/usb/otg/omap-usb2.c b/drivers/usb/otg/omap-usb2.c
>> new file mode 100644
>> index 0000000..026cb3c
>> --- /dev/null
>> +++ b/drivers/usb/otg/omap-usb2.c
>> @@ -0,0 +1,280 @@
>> +/*
>> + * omap-usb2.c - USB PHY, talking to musb controller in OMAP.
>> + *
>> + * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com
>> + * This program is free software; you can redistribute it and/or modify
>> + * it under the terms of the GNU General Public License as published by
>> + * the Free Software Foundation; either version 2 of the License, or
>> + * (at your option) any later version.
>> + *
>> + * Author: Kishon Vijay Abraham I <kishon@ti.com>
>> + *
>> + * This program is distributed in the hope that it will be useful,
>> + * but WITHOUT ANY WARRANTY; without even the implied warranty of
>> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
>> + * GNU General Public License for more details.
>> + *
>> + */
>> +
>> +#include <linux/module.h>
>> +#include <linux/platform_device.h>
>> +#include <linux/slab.h>
>> +#include <linux/of.h>
>> +#include <linux/io.h>
>> +#include <linux/usb/omap_usb.h>
>> +#include <linux/usb/phy_companion.h>
>> +#include <linux/clk.h>
>> +#include <linux/err.h>
>> +#include <linux/pm_runtime.h>
>> +#include <linux/delay.h>
>> +
>> +/**
>> + * omap_usb2_set_comparator - links the comparator present in the sytem with
>> + *   this phy
>> + * @comparator - the companion phy(comparator) for this phy
>> + *
>> + * The phy companion driver should call this API passing the phy_companion
>> + * filled with set_vbus and start_srp to be used by usb phy.
>> + *
>> + * For use by phy companion driver
>> + */
>> +void omap_usb2_set_comparator(struct phy_companion *comparator)
>> +{
>> +     struct omap_usb *phy;
>> +     struct usb_phy  *x = usb_get_phy(USB_PHY_TYPE_USB2);
>> +
>> +     if (x) {
>> +             phy = phy_to_omapusb(x);
>> +             phy->comparator = comparator;
>> +     }
>> +}
>> +EXPORT_SYMBOL_GPL(omap_usb2_set_comparator);
>> +
>> +/**
>> + * omap_usb_phy_power - power on/off the phy using control module reg
>> + * @phy: struct omap_usb *
>> + * @on: 0 or 1, based on powering on or off the PHY
>> + *
>> + * XXX: Remove this function once control module driver gets merged
>> + */
>> +static void omap_usb_phy_power(struct omap_usb *phy, int on)
>> +{
>> +     u32 val;
>> +
>> +     if (on) {
>> +             val = readl(phy->control_dev);
>> +             if (val & PHY_PD) {
>> +                     writel(~PHY_PD, phy->control_dev);
>> +                     /* XXX: add proper documentation for this delay */
>> +                     mdelay(200);
>> +             }
>> +     } else {
>> +             writel(PHY_PD, phy->control_dev);
>> +     }
>> +}
>> +
>> +static int omap_usb_set_vbus(struct usb_otg *otg, bool enabled)
>> +{
>> +     struct omap_usb *phy = phy_to_omapusb(otg->phy);
>> +
>> +     if (!phy->comparator)
>> +             return -ENODEV;
>> +
>> +     return phy->comparator->set_vbus(phy->comparator, enabled);
>> +}
>> +
>> +static int omap_usb_start_srp(struct usb_otg *otg)
>> +{
>> +     struct omap_usb *phy = phy_to_omapusb(otg->phy);
>> +
>> +     if (!phy->comparator)
>> +             return -ENODEV;
>> +
>> +     return phy->comparator->start_srp(phy->comparator);
>> +}
>> +
>> +static int omap_usb_set_host(struct usb_otg *otg, struct usb_bus *host)
>> +{
>> +     struct usb_phy  *phy = otg->phy;
>> +
>> +     otg->host = host;
>> +     if (!host)
>> +             phy->state = OTG_STATE_UNDEFINED;
>> +
>> +     return 0;
>> +}
>> +
>> +static int omap_usb_set_peripheral(struct usb_otg *otg,
>> +             struct usb_gadget *gadget)
>> +{
>> +     struct usb_phy  *phy = otg->phy;
>> +
>> +     otg->gadget = gadget;
>> +     if (!gadget)
>> +             phy->state = OTG_STATE_UNDEFINED;
>> +
>> +     return 0;
>> +}
>> +
>> +static int omap_usb2_suspend(struct usb_phy *x, int suspend)
>> +{
>> +     u32 ret;
>> +     struct omap_usb *phy = phy_to_omapusb(x);
>> +
>> +     if (suspend && !phy->is_suspended) {
>> +             omap_usb_phy_power(phy, 0);
>> +             pm_runtime_put_sync(phy->dev);
>> +             phy->is_suspended = 1;
>> +     } else if (!suspend && phy->is_suspended) {
>> +             ret = pm_runtime_get_sync(phy->dev);
>> +             if (ret < 0) {
>> +                     dev_err(phy->dev, "get_sync failed with err %d\n",
>> +                                                                     ret);
>> +                     return ret;
>> +             }
>> +             omap_usb_phy_power(phy, 1);
>> +             phy->is_suspended = 0;
>> +     }
>> +
>> +     return 0;
>> +}
>> +
>> +static int __devinit omap_usb2_probe(struct platform_device *pdev)
>> +{
>> +     struct omap_usb                 *phy;
>> +     struct usb_otg                  *otg;
>> +     struct resource                 *res;
>> +
>> +     phy = devm_kzalloc(&pdev->dev, sizeof(*phy), GFP_KERNEL);
>> +     if (!phy) {
>> +             dev_err(&pdev->dev, "unable to allocate memory for USB2 PHY\n");
>> +             return -ENOMEM;
>> +     }
>> +
>> +     otg = devm_kzalloc(&pdev->dev, sizeof(*otg), GFP_KERNEL);
>> +     if (!otg) {
>> +             dev_err(&pdev->dev, "unable to allocate memory for USB OTG\n");
>> +             return -ENOMEM;
>> +     }
>> +
>> +     phy->dev                = &pdev->dev;
>> +
>> +     phy->phy.dev            = phy->dev;
>> +     phy->phy.label          = "omap-usb2";
>> +     phy->phy.set_suspend    = omap_usb2_suspend;
>> +     phy->phy.otg            = otg;
>> +
>> +     res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
>> +
>> +     phy->control_dev = devm_request_and_ioremap(&pdev->dev, res);
>> +     if (phy->control_dev == NULL) {
>> +             dev_err(&pdev->dev, "Failed to obtain io memory\n");
>> +             return -ENXIO;
>> +     }
>> +
>> +     phy->is_suspended       = 1;
>> +     omap_usb_phy_power(phy, 0);
>> +
>> +     otg->set_host           = omap_usb_set_host;
>> +     otg->set_peripheral     = omap_usb_set_peripheral;
>> +     otg->set_vbus           = omap_usb_set_vbus;
>> +     otg->start_srp          = omap_usb_start_srp;
>> +     otg->phy                = &phy->phy;
>> +
>> +     phy->wkupclk = devm_clk_get(phy->dev, "usb_phy_cm_clk32k");
>> +     if (IS_ERR(phy->wkupclk)) {
>> +             dev_err(&pdev->dev, "unable to get usb_phy_cm_clk32k\n");
>> +             return PTR_ERR(phy->wkupclk);
>> +     }
>> +     clk_prepare(phy->wkupclk);
>> +
>> +     usb_add_phy(&phy->phy, USB_PHY_TYPE_USB2);
>> +
>> +     platform_set_drvdata(pdev, phy);
>> +
>> +     pm_runtime_enable(phy->dev);
>> +
>> +     return 0;
>> +}
>> +
>> +static int __devexit omap_usb2_remove(struct platform_device *pdev)
>> +{
>> +     struct omap_usb *phy = platform_get_drvdata(pdev);
>> +
>> +     clk_unprepare(phy->wkupclk);
>> +     usb_remove_phy(&phy->phy);
>> +     platform_set_drvdata(pdev, NULL);
>
> this platform_set_drvdata() is unnecessary as the pdev object will be
> destroyed.

Fine. Will remove it.
>
>> +     return 0;
>> +}
>> +
>> +#ifdef CONFIG_PM_RUNTIME
>> +
>> +static int omap_usb2_runtime_suspend(struct device *dev)
>> +{
>> +     struct platform_device  *pdev = to_platform_device(dev);
>> +     struct omap_usb *phy = platform_get_drvdata(pdev);
>> +
>> +     clk_disable(phy->wkupclk);
>
> weird. I would expect the wakeup clock to be enabled on suspend and
> disabled on resume. Isn't this causing any unbalanced disable warnings ?

Even I was expecting the wakeup clock to be enabled on suspend but if
we have this enabled coreaon domain is never
gated and core does not hit low power state. btw Why do think this is
unbalanced?
>
>> +
>> +     return 0;
>> +}
>> +
>> +static int omap_usb2_runtime_resume(struct device *dev)
>> +{
>> +     u32 ret = 0;
>> +     struct platform_device  *pdev = to_platform_device(dev);
>> +     struct omap_usb *phy = platform_get_drvdata(pdev);
>> +
>> +     ret = clk_enable(phy->wkupclk);
>> +     if (ret < 0)
>> +             dev_err(phy->dev, "Failed to enable wkupclk %d\n", ret);
>> +
>> +     return ret;
>> +}
>> +
>> +static const struct dev_pm_ops omap_usb2_pm_ops = {
>> +     SET_RUNTIME_PM_OPS(omap_usb2_runtime_suspend, omap_usb2_runtime_resume,
>> +             NULL)
>
> only runtime ? What about static suspend ? We need this to work also
> after a traditional echo mem > /sys/power/state ;-)

The static suspend case is handled by users of this phy using set_suspend hooks.
>
>> +#ifdef CONFIG_OF
>> +static const struct of_device_id omap_usb2_id_table[] = {
>> +     { .compatible = "ti,omap-usb2" },
>> +     {}
>> +};
>> +MODULE_DEVICE_TABLE(of, omap_usb2_id_table);
>> +#endif
>> +
>> +static struct platform_driver omap_usb2_driver = {
>> +     .probe          = omap_usb2_probe,
>> +     .remove         = __devexit_p(omap_usb2_remove),
>> +     .driver         = {
>> +             .name   = "omap-usb2",
>> +             .owner  = THIS_MODULE,
>> +             .pm     = DEV_PM_OPS,
>> +             .of_match_table = of_match_ptr(omap_usb2_id_table),
>> +     },
>> +};
>> +
>> +static int __init usb2_omap_init(void)
>> +{
>> +     return platform_driver_register(&omap_usb2_driver);
>> +}
>> +arch_initcall(usb2_omap_init);
>
> I'd really like to see this converted into a module_platform_driver().
> If you have dependencies, just make sure to return -EPROBE_DEFER so your
> probe gets retried.

Sure.

Thanks
Kishon
--
To unsubscribe from this list: send the line "unsubscribe linux-doc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

