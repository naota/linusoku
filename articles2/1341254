Path: news.gmane.org!not-for-mail
From: Jiang Liu <jiang.liu@huawei.com>
Newsgroups: gmane.linux.kernel.mm,gmane.linux.kernel
Subject: Re: [RFC PATCH] mm: introduce N_LRU_MEMORY to distinguish between
 normal and movable memory
Date: Fri, 10 Aug 2012 20:21:46 +0800
Lines: 313
Approved: news@gmane.org
Message-ID: <5024FCDA.3070404@huawei.com>
References: <1344482788-4984-1-git-send-email-guohanjun@huawei.com> <50233EF5.3050605@huawei.com> <5024D7AD.3000909@jp.fujitsu.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
X-Trace: dough.gmane.org 1344601457 18503 80.91.229.3 (10 Aug 2012 12:24:17 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Fri, 10 Aug 2012 12:24:17 +0000 (UTC)
Cc: Hanjun Guo <guohanjun@huawei.com>, <laijs@cn.fujitsu.com>,
        Christoph
 Lameter <cl@linux-foundation.org>,
        Wu Jianguo <wujianguo@huawei.com>, Tony
 Luck <tony.luck@intel.com>,
        Pekka Enberg <penberg@kernel.org>, Matt Mackall
	<mpm@selenic.com>,
        Mel Gorman <mgorman@suse.de>, Yinghai Lu
	<yinghai@kernel.org>,
        KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>,
        KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>,
        David Rientjes
	<rientjes@google.com>,
        Minchan Kim <minchan@kernel.org>, Keping Chen
	<chenkeping@huawei.com>,
        <linux-mm@kvack.org>, <linux-kernel@vger.kernel.org>,
        Jiang Liu <liuj97@gmail.com>
To: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
Original-X-From: owner-linux-mm@kvack.org Fri Aug 10 14:24:11 2012
Return-path: <owner-linux-mm@kvack.org>
Envelope-to: glkm-linux-mm-2@m.gmane.org
Original-Received: from kanga.kvack.org ([205.233.56.17])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <owner-linux-mm@kvack.org>)
	id 1SzoG9-000070-Qd
	for glkm-linux-mm-2@m.gmane.org; Fri, 10 Aug 2012 14:24:10 +0200
Original-Received: by kanga.kvack.org (Postfix)
	id D82236B002B; Fri, 10 Aug 2012 08:24:07 -0400 (EDT)
Delivered-To: linux-mm-outgoing@kvack.org
Original-Received: by kanga.kvack.org (Postfix, from userid 40)
	id BA1AD6B0044; Fri, 10 Aug 2012 08:24:07 -0400 (EDT)
X-Original-To: int-list-linux-mm@kvack.org
Delivered-To: int-list-linux-mm@kvack.org
Original-Received: by kanga.kvack.org (Postfix, from userid 63042)
	id 787EA6B005A; Fri, 10 Aug 2012 08:24:07 -0400 (EDT)
X-Original-To: linux-mm@kvack.org
Delivered-To: linux-mm@kvack.org
Original-Received: from psmtp.com (na3sys010amx120.postini.com [74.125.245.120])
	by kanga.kvack.org (Postfix) with SMTP id 833186B002B
	for <linux-mm@kvack.org>; Fri, 10 Aug 2012 08:24:05 -0400 (EDT)
Original-Received: from szxga02-in.huawei.com ([119.145.14.65]) by na3sys010amx120.postini.com ([74.125.244.10]) with SMTP;
	Fri, 10 Aug 2012 12:24:05 GMT
Original-Received: from 172.24.2.119 (EHLO szxeml214-edg.china.huawei.com) ([172.24.2.119])
	by szxrg02-dlp.huawei.com (MOS 4.3.4-GA FastPath queued)
	with ESMTP id ANH71642;
	Fri, 10 Aug 2012 20:23:19 +0800 (CST)
Original-Received: from SZXEML415-HUB.china.huawei.com (10.82.67.154) by
 szxeml214-edg.china.huawei.com (172.24.2.29) with Microsoft SMTP Server (TLS)
 id 14.1.323.3; Fri, 10 Aug 2012 20:21:56 +0800
Original-Received: from [127.0.0.1] (10.108.108.229) by szxeml415-hub.china.huawei.com
 (10.82.67.154) with Microsoft SMTP Server id 14.1.323.3; Fri, 10 Aug 2012
 20:21:52 +0800
User-Agent: Mozilla/5.0 (Windows NT 5.1; rv:9.0) Gecko/20111222 Thunderbird/9.0.1
In-Reply-To: <5024D7AD.3000909@jp.fujitsu.com>
X-Originating-IP: [10.108.108.229]
X-CFilter-Loop: Reflected
X-pstn-neptune: 0/0/0.00/0
X-pstn-levels: (S:99.90000/99.90000 CV:99.9000 FC:95.5390 LC:95.5390 R:95.9108 P:95.9108 M:97.0282 C:98.6951 )
X-pstn-dkim: 0 skipped:not-enabled
X-pstn-settings: 3 (1.0000:1.0000) s cv gt3 gt2 gt1 r p m c 
X-pstn-addresses: from <jiang.liu@huawei.com> [db-null] 
X-Bogosity: Ham, tests=bogofilter, spamicity=0.000000, version=1.2.2
Original-Sender: owner-linux-mm@kvack.org
Precedence: bulk
X-Loop: owner-majordomo@kvack.org
List-ID: <linux-mm.kvack.org>
Xref: news.gmane.org gmane.linux.kernel.mm:83994 gmane.linux.kernel:1341254
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1341254>

Hi Isimatu=EF=BC=8C
	We have worked out a changeset to enable offlinable node, which=20
is based on a new ACPI based hotplug framework (http://www.spinics.net/li=
sts/linux-pci/msg16826.html).
Now could hot-add/hot-remove a computer node with CPU/memory/PCI host bri=
dge,
but it's still a prototype and we are improving code quality for sending =
out
for review.
	We have noticed Jiangsan's work on the same topic, and it would
be better to cooperate on this topic.=20
	Regards!
	Gerry

On 2012-8-10 17:43, Yasuaki Ishimatsu wrote:
> Hi Guo,
>=20
> I have a question. How do you create the offlinable node? The current l=
inux
> cannot offline all memory on node. So we cannot hit the bug.
>=20
> Recently Lai sent the following patches which create the movable node.
> I think these patches consider the problem.
>=20
> https://lkml.org/lkml/2012/8/6/113
> =3D> Hi Lai,
>    I think your patches slove Guo's problem. How do you think?
>=20
> Thanks,
> Yasuaki Ishimatu
>=20
> 2012/08/09 13:39, Hanjun Guo wrote:
>> From: Wu Jianguo <wujianguo@huawei.com>
>>
>> Hi all,
>> Now, We have node masks for both N_NORMAL_MEMORY and
>> N_HIGH_MEMORY to distinguish between normal and highmem on platforms s=
uch as x86.
>> But we still don't have such a mechanism to distinguish between "norma=
l" and "movable"
>> memory.
>>
>> As suggested by Christoph Lameter in threads
>> http://marc.info/?l=3Dlinux-mm&m=3D134323057602484&w=3D2, we introduce=
 N_LRU_MEMORY to
>> distinguish between "normal" and "movable" memory.
>>
>> And this patch will fix the bug described as follow:
>>
>> When handling a memory node with only movable zone, function
>> early_kmem_cache_node_alloc() will allocate a page from remote node bu=
t
>> still increase object count on local node, which will trigger a BUG_ON=
()
>> as below when hot-removing this memory node. Actually there's no need =
to
>> create kmem_cache_node for memory node with only movable zone at all.
>>
>> ------------[ cut here ]------------
>> kernel BUG at mm/slub.c:3590!
>> invalid opcode: 0000 [#1] SMP
>> CPU 61
>> Modules linked in: autofs4 sunrpc cpufreq_ondemand acpi_cpufreq freq_t=
able
>> mperf ip6t_REJECT nf_conntrack_ipv6 nf_defrag_ipv6 ip6table_filter ip6=
_tables
>> ipv6 vfat fat dm_mirror dm_region_hash dm_log uinput iTCO_wdt
>> iTCO_vendor_support coretemp hwmon kvm_intel kvm crc32c_intel
>> ghash_clmulni_intel serio_raw pcspkr cdc_ether usbnet mii i2c_i801 i2c=
_core sg
>> lpc_ich mfd_core shpchp ioatdma i7core_edac edac_core igb dca bnx2 ext=
4
>> mbcache jbd2 sr_mod cdrom sd_mod crc_t10dif aesni_intel cryptd aes_x86=
_64
>> aes_generic bfa scsi_transport_fc scsi_tgt pata_acpi ata_generic ata_p=
iix
>> megaraid_sas dm_mod [last unloaded: microcode]
>>
>> Pid: 46287, comm: sh Not tainted 3.5.0-rc4-pgtable-00215-g35f0828-dirt=
y #85
>> IBM System x3850 X5 -[7143O3G]-/Node 1, Processor Card
>> RIP: 0010:[<ffffffff81160b2a>]  [<ffffffff81160b2a>]
>> slab_memory_callback+0x1ba/0x1c0
>> RSP: 0018:ffff880efdcb7c68  EFLAGS: 00010202
>> RAX: 0000000000000001 RBX: ffff880f7ec06100 RCX: 0000000100400001
>> RDX: 0000000100400002 RSI: ffff880f7ec02000 RDI: ffff880f7ec06100
>> RBP: ffff880efdcb7c78 R08: ffff88107b6fb098 R09: ffffffff81160a00
>> R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000019
>> R13: 00000000fffffffb R14: 0000000000000000 R15: ffffffff81abe930
>> FS:  00007f709f342700(0000) GS:ffff880f7f3a0000(0000) knlGS:0000000000=
000000
>> CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
>> CR2: 0000003b5a874570 CR3: 0000000f0da20000 CR4: 00000000000007e0
>> DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
>> DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
>> Process sh (pid: 46287, threadinfo ffff880efdcb6000, task ffff880f0fa5=
0000)
>> Stack:
>>   0000000000000004 ffff880efdcb7da8 ffff880efdcb7cb8 ffffffff81524af5
>>   0000000000000001 ffffffff81a8b620 ffffffff81a8b640 0000000000000004
>>   ffff880efdcb7da8 00000000ffffffff ffff880efdcb7d08 ffffffff8107a89a
>> Call Trace:
>>   [<ffffffff81524af5>] notifier_call_chain+0x55/0x80
>>   [<ffffffff8107a89a>] __blocking_notifier_call_chain+0x5a/0x80
>>   [<ffffffff8107a8d6>] blocking_notifier_call_chain+0x16/0x20
>>   [<ffffffff81352f0b>] memory_notify+0x1b/0x20
>>   [<ffffffff81507104>] offline_pages+0x624/0x700
>>   [<ffffffff811619de>] remove_memory+0x1e/0x20
>>   [<ffffffff813530cc>] memory_block_change_state+0x13c/0x2e0
>>   [<ffffffff81153e96>] ? alloc_pages_current+0xb6/0x120
>>   [<ffffffff81353332>] store_mem_state+0xc2/0xd0
>>   [<ffffffff8133e190>] dev_attr_store+0x20/0x30
>>   [<ffffffff811e2d4f>] sysfs_write_file+0xef/0x170
>>   [<ffffffff81173e28>] vfs_write+0xc8/0x190
>>   [<ffffffff81173ff1>] sys_write+0x51/0x90
>>   [<ffffffff81528d29>] system_call_fastpath+0x16/0x1b
>> Code: 8b 3d cb fd c4 00 be d0 00 00 00 e8 71 de ff ff 48 85 c0 75 9c 4=
8 c7 c7
>> c0 7f a5 81 e8 c0 89 f1 ff b8 0d 80 00 00 e9 69 fe ff ff <0f> 0b eb fe=
 66 90
>> 55 48 89 e5 41 57 41 56 41 55 41 54 53 48 83
>> RIP  [<ffffffff81160b2a>] slab_memory_callback+0x1ba/0x1c0
>>   RSP <ffff880efdcb7c68>
>> ---[ end trace 749e9e9a67c78c12 ]---
>>
>> Signed-off-by: Wu Jianguo <wujianguo@huawei.com>
>> Signed-off-by: Jiang Liu <jiang.liu@huawei.com>
>> ---
>>   arch/alpha/mm/numa.c     |    2 +-
>>   arch/m32r/mm/discontig.c |    2 +-
>>   arch/m68k/mm/motorola.c  |    2 +-
>>   arch/parisc/mm/init.c    |    2 +-
>>   arch/tile/kernel/setup.c |    2 +-
>>   arch/x86/mm/init_64.c    |    2 +-
>>   drivers/base/node.c      |    4 +++-
>>   include/linux/nodemask.h |    5 +++--
>>   mm/page_alloc.c          |   10 ++++++++--
>>   9 files changed, 20 insertions(+), 11 deletions(-)
>>
>> diff --git a/arch/alpha/mm/numa.c b/arch/alpha/mm/numa.c
>> index 3973ae3..8402b29 100644
>> --- a/arch/alpha/mm/numa.c
>> +++ b/arch/alpha/mm/numa.c
>> @@ -313,7 +313,7 @@ void __init paging_init(void)
>>               zones_size[ZONE_DMA] =3D dma_local_pfn;
>>               zones_size[ZONE_NORMAL] =3D (end_pfn - start_pfn) - dma_=
local_pfn;
>>           }
>> -        node_set_state(nid, N_NORMAL_MEMORY);
>> +        node_set_state(nid, N_LRU_MEMORY);
>>           free_area_init_node(nid, zones_size, start_pfn, NULL);
>>       }
>>
>> diff --git a/arch/m32r/mm/discontig.c b/arch/m32r/mm/discontig.c
>> index 2c468e8..4d76e19 100644
>> --- a/arch/m32r/mm/discontig.c
>> +++ b/arch/m32r/mm/discontig.c
>> @@ -149,7 +149,7 @@ unsigned long __init zone_sizes_init(void)
>>           zholes_size[ZONE_DMA] =3D mp->holes;
>>           holes +=3D zholes_size[ZONE_DMA];
>>
>> -        node_set_state(nid, N_NORMAL_MEMORY);
>> +        node_set_state(nid, N_LRU_MEMORY);
>>           free_area_init_node(nid, zones_size, start_pfn, zholes_size)=
;
>>       }
>>
>> diff --git a/arch/m68k/mm/motorola.c b/arch/m68k/mm/motorola.c
>> index 0dafa69..31a0b00 100644
>> --- a/arch/m68k/mm/motorola.c
>> +++ b/arch/m68k/mm/motorola.c
>> @@ -300,7 +300,7 @@ void __init paging_init(void)
>>           free_area_init_node(i, zones_size,
>>                       m68k_memory[i].addr >> PAGE_SHIFT, NULL);
>>           if (node_present_pages(i))
>> -            node_set_state(i, N_NORMAL_MEMORY);
>> +            node_set_state(i, N_LRU_MEMORY);
>>       }
>>   }
>>
>> diff --git a/arch/parisc/mm/init.c b/arch/parisc/mm/init.c
>> index 3ac462d..ad286fd 100644
>> --- a/arch/parisc/mm/init.c
>> +++ b/arch/parisc/mm/init.c
>> @@ -277,7 +277,7 @@ static void __init setup_bootmem(void)
>>       memset(pfnnid_map, 0xff, sizeof(pfnnid_map));
>>
>>       for (i =3D 0; i < npmem_ranges; i++) {
>> -        node_set_state(i, N_NORMAL_MEMORY);
>> +        node_set_state(i, N_LRU_MEMORY);
>>           node_set_online(i);
>>       }
>>   #endif
>> diff --git a/arch/tile/kernel/setup.c b/arch/tile/kernel/setup.c
>> index 6a649a4..464672d 100644
>> --- a/arch/tile/kernel/setup.c
>> +++ b/arch/tile/kernel/setup.c
>> @@ -748,7 +748,7 @@ static void __init zone_sizes_init(void)
>>
>>           /* Track the type of memory on each node */
>>           if (zones_size[ZONE_NORMAL] || zones_size[ZONE_DMA])
>> -            node_set_state(i, N_NORMAL_MEMORY);
>> +            node_set_state(i, N_LRU_MEMORY);
>>   #ifdef CONFIG_HIGHMEM
>>           if (end !=3D start)
>>               node_set_state(i, N_HIGH_MEMORY);
>> diff --git a/arch/x86/mm/init_64.c b/arch/x86/mm/init_64.c
>> index 2b6b4a3..43bf392 100644
>> --- a/arch/x86/mm/init_64.c
>> +++ b/arch/x86/mm/init_64.c
>> @@ -625,7 +625,7 @@ void __init paging_init(void)
>>        *     numa support is not compiled in, and later node_set_state
>>        *     will not set it back.
>>        */
>> -    node_clear_state(0, N_NORMAL_MEMORY);
>> +    node_clear_state(0, N_LRU_MEMORY);
>>
>>       zone_sizes_init();
>>   }
>> diff --git a/drivers/base/node.c b/drivers/base/node.c
>> index af1a177..4a631f9 100644
>> --- a/drivers/base/node.c
>> +++ b/drivers/base/node.c
>> @@ -617,6 +617,7 @@ static struct node_attr node_state_attr[] =3D {
>>       _NODE_ATTR(possible, N_POSSIBLE),
>>       _NODE_ATTR(online, N_ONLINE),
>>       _NODE_ATTR(has_normal_memory, N_NORMAL_MEMORY),
>> +    _NODE_ATTR(has_lru_memory, N_LRU_MEMORY),
>>       _NODE_ATTR(has_cpu, N_CPU),
>>   #ifdef CONFIG_HIGHMEM
>>       _NODE_ATTR(has_high_memory, N_HIGH_MEMORY),
>> @@ -628,8 +629,9 @@ static struct attribute *node_state_attrs[] =3D {
>>       &node_state_attr[1].attr.attr,
>>       &node_state_attr[2].attr.attr,
>>       &node_state_attr[3].attr.attr,
>> -#ifdef CONFIG_HIGHMEM
>>       &node_state_attr[4].attr.attr,
>> +#ifdef CONFIG_HIGHMEM
>> +    &node_state_attr[5].attr.attr,
>>   #endif
>>       NULL
>>   };
>> diff --git a/include/linux/nodemask.h b/include/linux/nodemask.h
>> index 7afc363..550f9a1 100644
>> --- a/include/linux/nodemask.h
>> +++ b/include/linux/nodemask.h
>> @@ -374,11 +374,12 @@ static inline void __nodes_fold(nodemask_t *dstp=
, const nodemask_t *origp,
>>   enum node_states {
>>       N_POSSIBLE,        /* The node could become online at some point=
 */
>>       N_ONLINE,        /* The node is online */
>> -    N_NORMAL_MEMORY,    /* The node has regular memory */
>> +    N_NORMAL_MEMORY,    /* The node has normal memory */
>> +    N_LRU_MEMORY,    /* The node has regular memory */
>>   #ifdef CONFIG_HIGHMEM
>>       N_HIGH_MEMORY,        /* The node has regular or high memory */
>>   #else
>> -    N_HIGH_MEMORY =3D N_NORMAL_MEMORY,
>> +    N_HIGH_MEMORY =3D N_LRU_MEMORY,
>>   #endif
>>       N_CPU,        /* The node has one or more cpus */
>>       NR_NODE_STATES
>> diff --git a/mm/page_alloc.c b/mm/page_alloc.c
>> index 009ac28..5a7eacb 100644
>> --- a/mm/page_alloc.c
>> +++ b/mm/page_alloc.c
>> @@ -87,6 +87,7 @@ nodemask_t node_states[NR_NODE_STATES] __read_mostly=
 =3D {
>>       [N_ONLINE] =3D { { [0] =3D 1UL } },
>>   #ifndef CONFIG_NUMA
>>       [N_NORMAL_MEMORY] =3D { { [0] =3D 1UL } },
>> +    [N_LRU_MEMORY] =3D { { [0] =3D 1UL } },
>>   #ifdef CONFIG_HIGHMEM
>>       [N_HIGH_MEMORY] =3D { { [0] =3D 1UL } },
>>   #endif
>> @@ -4796,16 +4797,21 @@ out:
>>   /* Any regular memory on that node ? */
>>   static void __init check_for_regular_memory(pg_data_t *pgdat)
>>   {
>> -#ifdef CONFIG_HIGHMEM
>> +    struct zone *zone;
>>       enum zone_type zone_type;
>>
>>       for (zone_type =3D 0; zone_type <=3D ZONE_NORMAL; zone_type++) {
>> -        struct zone *zone =3D &pgdat->node_zones[zone_type];
>> +        zone =3D &pgdat->node_zones[zone_type];
>>           if (zone->present_pages) {
>>               node_set_state(zone_to_nid(zone), N_NORMAL_MEMORY);
>>               break;
>>           }
>>       }
>> +
>> +#ifdef CONFIG_HIGHMEM
>> +    zone =3D &pgdat->node_zones[ZONE_MOVABLE];
>> +    if (zone->present_pages)
>> +        node_set_state(zone_to_nid(zone), N_LRU_MEMORY);
>>   #endif
>>   }
>>
>=20
>=20
>=20
> .
>=20


--
To unsubscribe, send a message with 'unsubscribe linux-mm' in
the body to majordomo@kvack.org.  For more info on Linux MM,
see: http://www.linux-mm.org/ .
Don't email: <a href=3Dmailto:"dont@kvack.org"> email@kvack.org </a>

