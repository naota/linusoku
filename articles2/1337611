Path: news.gmane.org!not-for-mail
From: Nicolas Pitre <nicolas.pitre@linaro.org>
Newsgroups: gmane.linux.ports.arm.kernel,gmane.linux.kernel
Subject: Re: [PATCH 04/22] ARM: LPAE: support 64-bit virt/phys patching
Date: Sat, 4 Aug 2012 02:49:10 -0400 (EDT)
Lines: 62
Approved: news@gmane.org
Message-ID: <alpine.LFD.2.02.1208040226060.5231@xanadu.home>
References: <1343775898-28345-1-git-send-email-cyril@ti.com>
 <1343775898-28345-5-git-send-email-cyril@ti.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1344062996 875 80.91.229.3 (4 Aug 2012 06:49:56 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Sat, 4 Aug 2012 06:49:56 +0000 (UTC)
Cc: linux@arm.linux.org.uk, arnd@arndb.de, catalin.marinas@arm.com,
 will.deacon@arm.com, linux-kernel@vger.kernel.org,
 linux-arm-kernel@lists.infradead.org
To: Cyril Chemparathy <cyril@ti.com>
Original-X-From: linux-arm-kernel-bounces+linux-arm-kernel=m.gmane.org@lists.infradead.org Sat Aug 04 08:49:55 2012
Return-path: <linux-arm-kernel-bounces+linux-arm-kernel=m.gmane.org@lists.infradead.org>
Envelope-to: linux-arm-kernel@m.gmane.org
Original-Received: from merlin.infradead.org ([205.233.59.134])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-arm-kernel-bounces+linux-arm-kernel=m.gmane.org@lists.infradead.org>)
	id 1SxYBP-00007m-3J
	for linux-arm-kernel@m.gmane.org; Sat, 04 Aug 2012 08:49:55 +0200
Original-Received: from localhost ([::1] helo=merlin.infradead.org)
	by merlin.infradead.org with esmtp (Exim 4.76 #1 (Red Hat Linux))
	id 1SxYAn-0000eF-GA; Sat, 04 Aug 2012 06:49:17 +0000
Original-Received: from mail-qa0-f42.google.com ([209.85.216.42])
 by merlin.infradead.org with esmtps (Exim 4.76 #1 (Red Hat Linux))
 id 1SxYAk-0000e1-Hi
 for linux-arm-kernel@lists.infradead.org; Sat, 04 Aug 2012 06:49:15 +0000
Original-Received: by qafi31 with SMTP id i31so91231qaf.15
 for <linux-arm-kernel@lists.infradead.org>;
 Fri, 03 Aug 2012 23:49:13 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=google.com; s=20120113;
 h=date:from:to:cc:subject:in-reply-to:message-id:references
 :user-agent:mime-version:content-type:x-gm-message-state;
 bh=MK0YJGVy8BPHD2Wf1boRxfYl4Wd2Ri6zdrGO5M6UIDg=;
 b=MUaqrQCjgVFDds+wdseRdXWCv5ukI7QKHAjS1Gdh6A+juf5CskT2Eyl1nuaddgXgXV
 39d+qmU3P/mRJ101MSHMNbOUPjD00LxNvNFYjY6X0PwGBD1uZ+pzfgw3Y/d8MMg6tdZV
 wkmuBLCeqowc4FVL47uiGi5oSEwZMRSnGnObRvYBvbVp/eToX2kW6ekPlcca7vWASFgd
 VfArtezFPv4hXmPoQaARvyvUcllOMlv0PeO/KihvEPoFc8QajW5AhwCaN5JjBUidQJSV
 lqr0Rcd6EoOhDmrE6j0IX7kwqZipxCRIS0cZTNCDW94JhwH0+F2XhUm8RT0nKQumPcWo
 Qfhg==
Original-Received: by 10.224.187.6 with SMTP id cu6mr6933397qab.63.1344062953248;
 Fri, 03 Aug 2012 23:49:13 -0700 (PDT)
Original-Received: from xanadu.home (modemcable149.196-201-24.mc.videotron.ca.
 [24.201.196.149])
 by mx.google.com with ESMTPS id cg7sm9157937qab.19.2012.08.03.23.49.11
 (version=TLSv1/SSLv3 cipher=OTHER);
 Fri, 03 Aug 2012 23:49:12 -0700 (PDT)
In-Reply-To: <1343775898-28345-5-git-send-email-cyril@ti.com>
User-Agent: Alpine 2.02 (LFD 1266 2009-07-14)
X-Gm-Message-State: ALoCoQkxqOCOUkyOuw4HdDhe+DZQs7d7q62EsPxKpcF/hxGqWge4iyaVhyJph2sRTE3Rcqg3mtso
X-Spam-Note: CRM114 invocation failed
X-Spam-Score: -2.6 (--)
X-Spam-Report: SpamAssassin version 3.3.2 on merlin.infradead.org summary:
 Content analysis details:   (-2.6 points)
 pts rule name              description
 ---- ---------------------- --------------------------------------------------
 -0.7 RCVD_IN_DNSWL_LOW      RBL: Sender listed at http://www.dnswl.org/, low
 trust [209.85.216.42 listed in list.dnswl.org]
 -1.9 BAYES_00               BODY: Bayes spam probability is 0 to 1%
 [score: 0.0000]
X-BeenThere: linux-arm-kernel@lists.infradead.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <linux-arm-kernel.lists.infradead.org>
List-Unsubscribe: <http://lists.infradead.org/mailman/options/linux-arm-kernel>, 
 <mailto:linux-arm-kernel-request@lists.infradead.org?subject=unsubscribe>
List-Archive: <http://lists.infradead.org/pipermail/linux-arm-kernel/>
List-Post: <mailto:linux-arm-kernel@lists.infradead.org>
List-Help: <mailto:linux-arm-kernel-request@lists.infradead.org?subject=help>
List-Subscribe: <http://lists.infradead.org/mailman/listinfo/linux-arm-kernel>, 
 <mailto:linux-arm-kernel-request@lists.infradead.org?subject=subscribe>
Original-Sender: linux-arm-kernel-bounces@lists.infradead.org
Errors-To: linux-arm-kernel-bounces+linux-arm-kernel=m.gmane.org@lists.infradead.org
Xref: news.gmane.org gmane.linux.ports.arm.kernel:180183 gmane.linux.kernel:1337611
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1337611>

On Tue, 31 Jul 2012, Cyril Chemparathy wrote:

> This patch adds support for 64-bit physical addresses in virt_to_phys
> patching.  This does not do real 64-bit add/sub, but instead patches in the
> upper 32-bits of the phys_offset directly into the output of virt_to_phys.

You should explain _why_ you do not a real aadd/sub.  I did deduce it 
but that might not be obvious to everyone.  Also this subtlety should be 
commented in the code as well.

> In addition to adding 64-bit support, this patch also adds a set_phys_offset()
> helper that is needed on architectures that need to modify PHYS_OFFSET during
> initialization.
> 
> Signed-off-by: Cyril Chemparathy <cyril@ti.com>
> ---
>  arch/arm/include/asm/memory.h |   22 +++++++++++++++-------
>  arch/arm/kernel/head.S        |    6 ++++++
>  arch/arm/kernel/setup.c       |   14 ++++++++++++++
>  3 files changed, 35 insertions(+), 7 deletions(-)
> 
> diff --git a/arch/arm/include/asm/memory.h b/arch/arm/include/asm/memory.h
> index 4a0108f..110495c 100644
> --- a/arch/arm/include/asm/memory.h
> +++ b/arch/arm/include/asm/memory.h
> @@ -153,23 +153,31 @@
>  #ifdef CONFIG_ARM_PATCH_PHYS_VIRT
>  
>  extern unsigned long __pv_phys_offset;
> -#define PHYS_OFFSET __pv_phys_offset
> -
> +extern unsigned long __pv_phys_offset_high;

As mentioned previously, this is just too ugly.  Please make 
__pv_phys_offset into a phys_addr_t instead and mask the low/high parts 
as needed in __virt_to_phys().

>  extern unsigned long __pv_offset;
>  
> +extern void set_phys_offset(phys_addr_t po);
> +
> +#define PHYS_OFFSET	__virt_to_phys(PAGE_OFFSET)
> +
>  static inline phys_addr_t __virt_to_phys(unsigned long x)
>  {
> -	unsigned long t;
> -	early_patch_imm8(x, t, "add", __pv_offset);
> -	return t;
> +	unsigned long tlo, thi = 0;
> +
> +	early_patch_imm8(x, tlo, "add", __pv_offset);
> +	if (sizeof(phys_addr_t) > 4)
> +		early_patch_imm8(0, thi, "add", __pv_phys_offset_high);

Given the high part is always the same, isn't there a better way than an 
add with 0 that could be done here?  The add will force a load of 0 in a 
register needlessly just to add a constant value to it.  Your new 
patching framework ought to be able to patch a mov (or a mvn) 
instruction directly.


Nicolas
