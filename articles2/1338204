Path: news.gmane.org!not-for-mail
From: <qiang.liu@freescale.com>
Newsgroups: gmane.linux.kernel.cryptoapi,gmane.linux.ports.ppc64.devel,gmane.linux.kernel
Subject: [PATCH v6 6/8] fsl-dma: use spin_lock_bh to instead of spin_lock_irqsave
Date: Mon, 6 Aug 2012 18:36:01 +0800
Lines: 149
Approved: news@gmane.org
Message-ID: <1344249361-10263-1-git-send-email-qiang.liu@freescale.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain
X-Trace: dough.gmane.org 1344250940 1212 80.91.229.3 (6 Aug 2012 11:02:20 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Mon, 6 Aug 2012 11:02:20 +0000 (UTC)
Cc: <kim.phillips@freescale.com>, <herbert@gondor.hengli.com.au>,
	<davem@davemloft.net>, <arnd@arndb.de>,
	<gregkh@linuxfoundation.org>, Qiang Liu <qiang.liu@freescale.com>,
	Li Yang <leoli@freescale.com>, Timur Tabi <timur@freescale.com>
To: <linux-crypto@vger.kernel.org>, <linuxppc-dev@lists.ozlabs.org>,
	<dan.j.williams@intel.com>, <linux-kernel@vger.kernel.org>,
	<dan.j.williams@gmail.com>, <vinod.koul@intel.com>
Original-X-From: linux-crypto-owner@vger.kernel.org Mon Aug 06 13:02:18 2012
Return-path: <linux-crypto-owner@vger.kernel.org>
Envelope-to: glkc-linux-crypto@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-crypto-owner@vger.kernel.org>)
	id 1SyL4j-0000ov-59
	for glkc-linux-crypto@plane.gmane.org; Mon, 06 Aug 2012 13:02:17 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755898Ab2HFLCP (ORCPT <rfc822;glkc-linux-crypto@m.gmane.org>);
	Mon, 6 Aug 2012 07:02:15 -0400
Original-Received: from tx2ehsobe003.messaging.microsoft.com ([65.55.88.13]:51413 "EHLO
	tx2outboundpool.messaging.microsoft.com" rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1755773Ab2HFLCO (ORCPT
	<rfc822;linux-crypto@vger.kernel.org>);
	Mon, 6 Aug 2012 07:02:14 -0400
Original-Received: from mail31-tx2-R.bigfish.com (10.9.14.253) by
 TX2EHSOBE009.bigfish.com (10.9.40.29) with Microsoft SMTP Server id
 14.1.225.23; Mon, 6 Aug 2012 11:02:14 +0000
Original-Received: from mail31-tx2 (localhost [127.0.0.1])	by mail31-tx2-R.bigfish.com
 (Postfix) with ESMTP id 2A3AEAC0143;	Mon,  6 Aug 2012 11:02:14 +0000 (UTC)
X-Forefront-Antispam-Report: CIP:70.37.183.190;KIP:(null);UIP:(null);IPV:NLI;H:mail.freescale.net;RD:none;EFVD:NLI
X-SpamScore: 0
X-BigFish: VS0(zzzz1202hzz8275bhz2dh2a8h668h839hd24he5bhf0ah107ah)
Original-Received: from mail31-tx2 (localhost.localdomain [127.0.0.1]) by mail31-tx2
 (MessageSwitch) id 1344250930870817_1460; Mon,  6 Aug 2012 11:02:10 +0000
 (UTC)
Original-Received: from TX2EHSMHS043.bigfish.com (unknown [10.9.14.254])	by
 mail31-tx2.bigfish.com (Postfix) with ESMTP id C6D4274004A;	Mon,  6 Aug 2012
 11:02:10 +0000 (UTC)
Original-Received: from mail.freescale.net (70.37.183.190) by TX2EHSMHS043.bigfish.com
 (10.9.99.143) with Microsoft SMTP Server (TLS) id 14.1.225.23; Mon, 6 Aug
 2012 11:02:10 +0000
Original-Received: from az84smr01.freescale.net (10.64.34.197) by
 039-SN1MMR1-003.039d.mgd.msft.net (10.84.1.16) with Microsoft SMTP Server
 (TLS) id 14.2.298.5; Mon, 6 Aug 2012 06:02:09 -0500
Original-Received: from localhost (rock.ap.freescale.net [10.193.20.106])	by
 az84smr01.freescale.net (8.14.3/8.14.0) with ESMTP id q76B23om004274;	Mon, 6
 Aug 2012 04:02:04 -0700
X-Mailer: git-send-email 1.7.5.1
X-OriginatorOrg: freescale.com
Original-Sender: linux-crypto-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-crypto.vger.kernel.org>
X-Mailing-List: linux-crypto@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel.cryptoapi:7508 gmane.linux.ports.ppc64.devel:84283 gmane.linux.kernel:1338204
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1338204>

From: Qiang Liu <qiang.liu@freescale.com>

The use of spin_lock_irqsave() is a stronger locking mechanism than is
required throughout the driver. The minimum locking required should be
used instead. Interrupts will be turned off and context will be saved,
there is needless to use irqsave.

Change all instances of spin_lock_irqsave() to spin_lock_bh().
All manipulation of protected fields is done using tasklet context or
weaker, which makes spin_lock_bh() the correct choice.

Cc: Dan Williams <dan.j.williams@intel.com>
Cc: Dan Williams <dan.j.williams@gmail.com>
Cc: Vinod Koul <vinod.koul@intel.com>
Cc: Li Yang <leoli@freescale.com>
Cc: Timur Tabi <timur@freescale.com>
Signed-off-by: Qiang Liu <qiang.liu@freescale.com>
Acked-by: Ira W. Snyder <iws@ovro.caltech.edu>
---
 drivers/dma/fsldma.c |   30 ++++++++++++------------------
 1 files changed, 12 insertions(+), 18 deletions(-)

diff --git a/drivers/dma/fsldma.c b/drivers/dma/fsldma.c
index 938d8c1..3f809df 100644
--- a/drivers/dma/fsldma.c
+++ b/drivers/dma/fsldma.c
@@ -405,10 +405,9 @@ static dma_cookie_t fsl_dma_tx_submit(struct dma_async_tx_descriptor *tx)
 	struct fsldma_chan *chan = to_fsl_chan(tx->chan);
 	struct fsl_desc_sw *desc = tx_to_fsl_desc(tx);
 	struct fsl_desc_sw *child;
-	unsigned long flags;
 	dma_cookie_t cookie;

-	spin_lock_irqsave(&chan->desc_lock, flags);
+	spin_lock_bh(&chan->desc_lock);

 	/*
 	 * assign cookies to all of the software descriptors
@@ -421,7 +420,7 @@ static dma_cookie_t fsl_dma_tx_submit(struct dma_async_tx_descriptor *tx)
 	/* put this transaction onto the tail of the pending queue */
 	append_ld_queue(chan, desc);

-	spin_unlock_irqrestore(&chan->desc_lock, flags);
+	spin_unlock_bh(&chan->desc_lock);

 	return cookie;
 }
@@ -761,15 +760,14 @@ static void fsldma_free_desc_list_reverse(struct fsldma_chan *chan,
 static void fsl_dma_free_chan_resources(struct dma_chan *dchan)
 {
 	struct fsldma_chan *chan = to_fsl_chan(dchan);
-	unsigned long flags;

 	chan_dbg(chan, "free all channel resources\n");
-	spin_lock_irqsave(&chan->desc_lock, flags);
+	spin_lock_bh(&chan->desc_lock);
 	fsldma_cleanup_descriptors(chan);
 	fsldma_free_desc_list(chan, &chan->ld_pending);
 	fsldma_free_desc_list(chan, &chan->ld_running);
 	fsldma_free_desc_list(chan, &chan->ld_completed);
-	spin_unlock_irqrestore(&chan->desc_lock, flags);
+	spin_unlock_bh(&chan->desc_lock);

 	dma_pool_destroy(chan->desc_pool);
 	chan->desc_pool = NULL;
@@ -988,7 +986,6 @@ static int fsl_dma_device_control(struct dma_chan *dchan,
 {
 	struct dma_slave_config *config;
 	struct fsldma_chan *chan;
-	unsigned long flags;
 	int size;

 	if (!dchan)
@@ -998,7 +995,7 @@ static int fsl_dma_device_control(struct dma_chan *dchan,

 	switch (cmd) {
 	case DMA_TERMINATE_ALL:
-		spin_lock_irqsave(&chan->desc_lock, flags);
+		spin_lock_bh(&chan->desc_lock);

 		/* Halt the DMA engine */
 		dma_halt(chan);
@@ -1009,7 +1006,7 @@ static int fsl_dma_device_control(struct dma_chan *dchan,
 		fsldma_free_desc_list(chan, &chan->ld_completed);
 		chan->idle = true;

-		spin_unlock_irqrestore(&chan->desc_lock, flags);
+		spin_unlock_bh(&chan->desc_lock);
 		return 0;

 	case DMA_SLAVE_CONFIG:
@@ -1051,11 +1048,10 @@ static int fsl_dma_device_control(struct dma_chan *dchan,
 static void fsl_dma_memcpy_issue_pending(struct dma_chan *dchan)
 {
 	struct fsldma_chan *chan = to_fsl_chan(dchan);
-	unsigned long flags;

-	spin_lock_irqsave(&chan->desc_lock, flags);
+	spin_lock_bh(&chan->desc_lock);
 	fsl_chan_xfer_ld_queue(chan);
-	spin_unlock_irqrestore(&chan->desc_lock, flags);
+	spin_unlock_bh(&chan->desc_lock);
 }

 /**
@@ -1068,15 +1064,14 @@ static enum dma_status fsl_tx_status(struct dma_chan *dchan,
 {
 	struct fsldma_chan *chan = to_fsl_chan(dchan);
 	enum dma_status ret;
-	unsigned long flags;

 	ret = dma_cookie_status(dchan, cookie, txstate);
 	if (ret == DMA_SUCCESS)
 		return ret;

-	spin_lock_irqsave(&chan->desc_lock, flags);
+	spin_lock_bh(&chan->desc_lock);
 	fsldma_cleanup_descriptors(chan);
-	spin_unlock_irqrestore(&chan->desc_lock, flags);
+	spin_unlock_bh(&chan->desc_lock);

 	return dma_cookie_status(dchan, cookie, txstate);
 }
@@ -1155,11 +1150,10 @@ static irqreturn_t fsldma_chan_irq(int irq, void *data)
 static void dma_do_tasklet(unsigned long data)
 {
 	struct fsldma_chan *chan = (struct fsldma_chan *)data;
-	unsigned long flags;

 	chan_dbg(chan, "tasklet entry\n");

-	spin_lock_irqsave(&chan->desc_lock, flags);
+	spin_lock_bh(&chan->desc_lock);

 	/* the hardware is now idle and ready for more */
 	chan->idle = true;
@@ -1167,7 +1161,7 @@ static void dma_do_tasklet(unsigned long data)
 	/* Run all cleanup for descriptors which have been completed */
 	fsldma_cleanup_descriptors(chan);

-	spin_unlock_irqrestore(&chan->desc_lock, flags);
+	spin_unlock_bh(&chan->desc_lock);

 	chan_dbg(chan, "tasklet exit\n");
 }
--
1.7.5.1


