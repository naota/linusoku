Path: news.gmane.org!not-for-mail
From: Anthony Olech <anthony.olech.opensource@diasemi.com>
Newsgroups: gmane.linux.kernel
Subject: [NEW DRIVER V2 7/7] DA9058 REGULATOR driver
Date: Sun, 5 Aug 2012 21:43:44 +0100
Lines: 295
Approved: news@gmane.org
Message-ID: <201208060736.q767ahXP005572@ubuntu>
NNTP-Posting-Host: plane.gmane.org
X-Trace: dough.gmane.org 1344238718 3353 80.91.229.3 (6 Aug 2012 07:38:38 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Mon, 6 Aug 2012 07:38:38 +0000 (UTC)
Cc: Guenter Roeck <guenter.roeck@ericsson.com>
Original-X-From: linux-kernel-owner@vger.kernel.org Mon Aug 06 09:38:37 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SyHtc-0003ox-0N
	for glk-linux-kernel-3@plane.gmane.org; Mon, 06 Aug 2012 09:38:36 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753523Ab2HFHi2 (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Mon, 6 Aug 2012 03:38:28 -0400
Original-Received: from mailrelay1.diasemi.com ([82.210.246.133]:60438 "EHLO
	mailrelay1.diasemi.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753112Ab2HFHi0 (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Mon, 6 Aug 2012 03:38:26 -0400
Original-Received: from ubuntu (Not Verified[10.20.27.23]) by mailrelay1.diasemi.com with ESMTP Gateway 
	id <B501f74700000>; Mon, 06 Aug 2012 09:38:24 +0200
Original-Received: from ubuntu (localhost [127.0.0.1])
	by ubuntu (8.14.4/8.14.4/Debian-2ubuntu2) with ESMTP id q767ahbk005699;
	Mon, 6 Aug 2012 08:36:43 +0100
Original-Received: (from root@localhost)
	by ubuntu (8.14.4/8.14.4/Submit) id q767ahXP005572;
	Mon, 6 Aug 2012 08:36:43 +0100
Original-To: Mark Brown <broonie@opensource.wolfsonmicro.com>
Original-To: Liam Girdwood <lrg@ti.com>
Original-Cc: Jean Delvare <khali@linux-fr.org>
Original-Cc: Randy Dunlop <randy.dunlap@oracle.com>
Original-Cc: LKML <linux-kernel@vger.kernel.org>
Original-Cc: David Dajun Chen <david.chen@diasemi.com>
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1338078
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1338078>

This is the REGULATOR component driver of the Dialog DA9058 PMIC.
This driver is just one component of the whole DA9058 PMIC driver.
It depends on the core DA9058 MFD driver.

Signed-off-by: Anthony Olech <anthony.olech.opensource@diasemi.com>
Signed-off-by: David Dajun Chen <david.chen@diasemi.com>
---
 drivers/regulator/Kconfig            |   11 ++
 drivers/regulator/Makefile           |    1 +
 drivers/regulator/da9058-regulator.c |  239 ++++++++++++++++++++++++++++++++++
 3 files changed, 251 insertions(+), 0 deletions(-)
 create mode 100644 drivers/regulator/da9058-regulator.c

diff --git a/drivers/regulator/Kconfig b/drivers/regulator/Kconfig
index c86b886..1fc04f9 100644
--- a/drivers/regulator/Kconfig
+++ b/drivers/regulator/Kconfig
@@ -64,6 +64,17 @@ config REGULATOR_USERSPACE_CONSUMER
 
           If unsure, say no.
 
+config REGULATOR_DA9058
+	tristate "Support regulators on Dialog Semiconductor DA9058 PMIC"
+	depends on MFD_DA9058
+	help
+	  Say y here to support the BUCKs and LDOs regulators found on
+	  Dialog Semiconductor DA9058 PMIC.
+
+	  This driver can also be built as a module. If so, the module
+	  will be called da9058-regulator.
+
+
 config REGULATOR_GPIO
 	tristate "GPIO regulator support"
 	depends on GENERIC_GPIO
diff --git a/drivers/regulator/Makefile b/drivers/regulator/Makefile
index 977fd46..f4d0bff 100644
--- a/drivers/regulator/Makefile
+++ b/drivers/regulator/Makefile
@@ -21,6 +21,7 @@ obj-$(CONFIG_REGULATOR_DBX500_PRCMU) += dbx500-prcmu.o
 obj-$(CONFIG_REGULATOR_DB8500_PRCMU) += db8500-prcmu.o
 obj-$(CONFIG_REGULATOR_GPIO) += gpio-regulator.o
 obj-$(CONFIG_REGULATOR_ISL6271A) += isl6271a-regulator.o
+obj-$(CONFIG_REGULATOR_DA9058) += da9058-regulator.o
 obj-$(CONFIG_REGULATOR_LP3971) += lp3971.o
 obj-$(CONFIG_REGULATOR_LP3972) += lp3972.o
 obj-$(CONFIG_REGULATOR_MAX1586) += max1586.o
diff --git a/drivers/regulator/da9058-regulator.c b/drivers/regulator/da9058-regulator.c
new file mode 100644
index 0000000..33c3a22
--- /dev/null
+++ b/drivers/regulator/da9058-regulator.c
@@ -0,0 +1,239 @@
+/*
+ *  Copyright (C) 2012 Dialog Semiconductor Ltd.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/err.h>
+#include <linux/slab.h>
+#include <linux/regulator/machine.h>
+#include <linux/regulator/driver.h>
+#include <linux/regmap.h>
+#include <linux/mfd/core.h>
+
+#include <linux/mfd/da9058/version.h>
+#include <linux/mfd/da9058/registers.h>
+#include <linux/mfd/da9058/core.h>
+#include <linux/mfd/da9058/regulator.h>
+
+struct da9058_regulator {
+	struct da9058 *da9058;
+	int ramp_register;
+	int ramp_enable_mask;
+	int fixed_voltage;
+	struct platform_device *pdev;
+	struct regulator_dev *reg_dev;
+	struct regulator_desc desc;
+	struct regulator_init_data init;
+};
+
+static int da9058_buck_ramp_voltage(struct regulator_dev *rdev,
+					unsigned int old_selector,
+					unsigned int new_selector)
+{
+	struct da9058_regulator *regulator = rdev_get_drvdata(rdev);
+	struct da9058 *da9058 = regulator->da9058;
+	int ret;
+
+	if (regulator->ramp_register == 0)
+		return -EINVAL;
+
+	if (regulator->ramp_enable_mask == 0)
+		return -EINVAL;
+
+	ret = da9058_set_bits(da9058, regulator->ramp_register,
+					regulator->ramp_enable_mask);
+
+	if (ret)
+		return ret;
+
+	return 2200; /* micro Seconds needed to ramp to new voltage*/
+}
+
+static int da9058_get_fixed_regulator_voltage(struct regulator_dev *rdev)
+{
+	struct da9058_regulator *regulator = rdev_get_drvdata(rdev);
+
+	if (regulator_is_enabled_regmap(rdev))
+		return regulator->fixed_voltage;
+	else
+		return 0;
+}
+
+static struct regulator_ops da9058_buck_regulator_ops = {
+	.map_voltage = regulator_map_voltage_linear,
+	.list_voltage = regulator_list_voltage_linear,
+	.set_voltage_time_sel = da9058_buck_ramp_voltage,
+	.get_voltage_sel = regulator_get_voltage_sel_regmap,
+	.set_voltage_sel = regulator_set_voltage_sel_regmap,
+	.enable = regulator_enable_regmap,
+	.disable = regulator_disable_regmap,
+	.is_enabled = regulator_is_enabled_regmap,
+};
+
+static struct regulator_ops da9058_ldo_regulator_ops = {
+	.map_voltage = regulator_map_voltage_linear,
+	.list_voltage = regulator_list_voltage_linear,
+	.get_voltage_sel = regulator_get_voltage_sel_regmap,
+	.set_voltage_sel = regulator_set_voltage_sel_regmap,
+	.enable = regulator_enable_regmap,
+	.disable = regulator_disable_regmap,
+	.is_enabled = regulator_is_enabled_regmap,
+};
+
+static struct regulator_ops da9058_fixed_regulator_ops = {
+	.get_voltage = da9058_get_fixed_regulator_voltage,
+	.enable = regulator_enable_regmap,
+	.disable = regulator_disable_regmap,
+	.is_enabled = regulator_is_enabled_regmap,
+};
+
+static int da9058_regulator_probe(struct platform_device *pdev)
+{
+	struct da9058 *da9058 = dev_get_drvdata(pdev->dev.parent);
+	const struct mfd_cell *cell = mfd_get_cell(pdev);
+	struct da9058_regulator_pdata *rpdata;
+	struct da9058_regulator *reg;
+	struct regulator_dev *rdev;
+	struct regulator_config config = { };
+	int ret;
+	unsigned int val;
+
+	if (cell == NULL)
+		return -ENODEV;
+
+	rpdata = cell->platform_data;
+
+	if (rpdata == NULL)
+		return -EINVAL;
+
+	if (rpdata->control_register == 0)
+		return -EINVAL;
+
+	if (rpdata->control_enable_mask == 0)
+		return -EINVAL;
+
+	reg = devm_kzalloc(&pdev->dev, sizeof(struct da9058_regulator),
+				GFP_KERNEL);
+	if (!reg)
+		return -ENOMEM;
+
+	platform_set_drvdata(pdev, reg);
+
+	reg->da9058 = da9058;
+	reg->pdev = pdev;
+	reg->ramp_register = rpdata->ramp_register;
+	reg->ramp_enable_mask = rpdata->ramp_enable_mask;
+	reg->fixed_voltage = rpdata->fixed_voltage;
+
+	reg->desc.name = rpdata->regulator_name;
+	reg->desc.id = rpdata->regulator_id;
+	reg->desc.type = REGULATOR_VOLTAGE;
+
+	reg->desc.n_voltages = 1 + (rpdata->max_uV - rpdata->min_uV) /
+					rpdata->control_voltage_step;
+	reg->desc.owner = THIS_MODULE;
+	reg->desc.enable_reg = rpdata->control_register;
+	reg->desc.enable_mask = rpdata->control_enable_mask;
+	reg->desc.vsel_reg = rpdata->control_register;
+	reg->desc.vsel_mask = DA9058_MAX_VSEL;
+
+	if (rpdata->control_voltage_step == 0) {
+		reg->desc.ops = &da9058_fixed_regulator_ops;
+	} else {
+		reg->desc.min_uV = rpdata->min_uV;
+		reg->desc.uV_step = rpdata->control_voltage_step;
+
+		if (reg->ramp_register)
+			reg->desc.ops = &da9058_buck_regulator_ops;
+		else
+			reg->desc.ops = &da9058_ldo_regulator_ops;
+	}
+
+	reg->init.constraints.name = rpdata->regulator_name;
+	reg->init.constraints.min_uV = rpdata->min_uV;
+	reg->init.constraints.max_uV = rpdata->max_uV;
+	reg->init.constraints.valid_ops_mask = rpdata->valid_ops_mask;
+	reg->init.constraints.valid_modes_mask = rpdata->valid_modes_mask;
+	reg->init.constraints.boot_on = rpdata->boot_on;
+	reg->init.constraints.always_on = rpdata->always_on;
+	reg->init.num_consumer_supplies = rpdata->num_consumer_supplies;
+	reg->init.consumer_supplies = rpdata->consumer_supplies;
+
+	config.dev = pdev->dev.parent;
+	config.init_data = &reg->init;
+	config.driver_data = reg;
+	config.regmap = da9058->regmap;
+
+	rdev = regulator_register(&reg->desc, &config);
+
+	if (IS_ERR(rdev)) {
+		dev_err(&pdev->dev, "failed to register %s\n",
+			rpdata->regulator_name);
+		ret = PTR_ERR(rdev);
+		goto err;
+	}
+	reg->reg_dev = rdev;
+
+	/* before we do anything check the lock bit */
+	ret = da9058_reg_read(da9058, DA9058_SUPPLY_REG, &val);
+	if (ret)
+		goto unlock_failed;
+
+	if (val & DA9058_SUPPLY_VLOCK)
+		ret = da9058_clear_bits(da9058, DA9058_SUPPLY_REG,
+					DA9058_SUPPLY_VLOCK);
+	if (ret)
+		goto unlock_failed;
+
+	return 0;
+
+unlock_failed:
+	regulator_unregister(rdev);
+err:
+	platform_set_drvdata(pdev, NULL);
+
+	return ret;
+}
+
+static int da9058_regulator_remove(struct platform_device *pdev)
+{
+	struct regulator_dev *rdev = platform_get_drvdata(pdev);
+
+	regulator_unregister(rdev);
+
+	return 0;
+}
+
+static struct platform_driver da9058_regulator_driver = {
+	.probe = da9058_regulator_probe,
+	.remove = da9058_regulator_remove,
+	.driver = {
+		.name = "da9058-regulator",
+		.owner = THIS_MODULE,
+	},
+};
+
+static int __init da9058_regulator_init(void)
+{
+	return platform_driver_register(&da9058_regulator_driver);
+}
+
+subsys_initcall(da9058_regulator_init);
+
+static void __exit da9058_regulator_exit(void)
+{
+	platform_driver_unregister(&da9058_regulator_driver);
+}
+
+module_exit(da9058_regulator_exit);
+
+MODULE_DESCRIPTION("Dialog DA9058 PMIC voltage and current regulator");
+MODULE_AUTHOR("Anthony Olech <Anthony.Olech@diasemi.com>");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:da9058-regulator");
-- 
end-of-patch for NEW DRIVER V2

