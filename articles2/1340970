Path: news.gmane.org!not-for-mail
From: Eric Paris <eparis@parisplace.org>
Newsgroups: gmane.linux.kernel.lsm,gmane.linux.kernel,gmane.comp.security.selinux,gmane.linux.network
Subject: Re: [PATCH] ipv4: tcp: security_sk_alloc() needed for unicast_sock
Date: Thu, 9 Aug 2012 16:06:18 -0400
Lines: 454
Approved: news@gmane.org
Message-ID: <CACLa4ptkvKj2GT4ZL+msMuWOHW885Hugk8nz3hvptOoY9-totw@mail.gmail.com>
References: <50215A7E.8000701@linaro.org>
	<1344462889.28967.328.camel@edumazet-glaptop>
	<5022FD9A.4020603@schaufler-ca.com>
	<1695034.0lrQgQPOMT@sifl>
	<1344523833.28967.996.camel@edumazet-glaptop>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: multipart/mixed; boundary=047d7b339f4dbc296104c6dac2e3
X-Trace: dough.gmane.org 1344542787 25016 80.91.229.3 (9 Aug 2012 20:06:27 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Thu, 9 Aug 2012 20:06:27 +0000 (UTC)
Cc: Paul Moore <paul@paul-moore.com>,
	David Miller <davem@davemloft.net>,
	Casey Schaufler <casey@schaufler-ca.com>,
	John Stultz <johnstul@us.ibm.com>,
	"Serge E. Hallyn" <serge@hallyn.com>,
	lkml <linux-kernel@vger.kernel.org>,
	James Morris <james.l.morris@oracle.com>,
	selinux@tycho.nsa.gov, john.johansen@canonical.com,
	LSM <linux-security-module@vger.kernel.org>,
	netdev <netdev@vger.kernel.org>
To: Eric Dumazet <eric.dumazet@gmail.com>
Original-X-From: linux-security-module-owner@vger.kernel.org Thu Aug 09 22:06:24 2012
Return-path: <linux-security-module-owner@vger.kernel.org>
Envelope-to: glkl-linux-security-module-2@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-security-module-owner@vger.kernel.org>)
	id 1SzYzv-0007Di-J4
	for glkl-linux-security-module-2@plane.gmane.org; Thu, 09 Aug 2012 22:06:24 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755422Ab2HIUGV (ORCPT
	<rfc822;glkl-linux-security-module-2@m.gmane.org>);
	Thu, 9 Aug 2012 16:06:21 -0400
Original-Received: from mail-pb0-f46.google.com ([209.85.160.46]:49159 "EHLO
	mail-pb0-f46.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754512Ab2HIUGT (ORCPT
	<rfc822;linux-security-module@vger.kernel.org>);
	Thu, 9 Aug 2012 16:06:19 -0400
Original-Received: by pbbrr13 with SMTP id rr13so1412532pbb.19
        for <linux-security-module@vger.kernel.org>; Thu, 09 Aug 2012 13:06:19 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type:x-gm-message-state;
        bh=mKt9PuSt1O+OEuG/xRcfpr5/gTxbWGEoAJLdtQY042Q=;
        b=Iz25yyYyapJSJvk2T64I4OqHHu10LsAelZ4khHPvKlGxcX60oa6nqEFjLKN50aVRjI
         H9vVHgVqifIVr4t9lVmrt01bUY5Dd+x30VOF99HF0rvqa5w8mrQ85I73AAILWs7WK33t
         a3A9SFokAy/XsUK0SHYi9m/8zoK6gV62nnY1DxKItzUvfasc+7MkYU+73grm7GTMkvN7
         fc4r1U+9qdF+wGt1CfeXhPOuwQ2x66v6JxozLQ5qDxpbMbHCUNq79eHN4JgVyUmzf8Rp
         op3I5QMh58AZLqnNEpCwE0yyqlU1+FU/UKInvk0z3kdwVZPY2oTnMnGIbPEv9tVu+Zte
         vyQg==
Original-Received: by 10.68.240.73 with SMTP id vy9mr6487395pbc.156.1344542779123; Thu,
 09 Aug 2012 13:06:19 -0700 (PDT)
Original-Received: by 10.68.54.199 with HTTP; Thu, 9 Aug 2012 13:06:18 -0700 (PDT)
In-Reply-To: <1344523833.28967.996.camel@edumazet-glaptop>
X-Gm-Message-State: ALoCoQlnQUygG2v3S65sd3K2DQUPYdzgiB3LsaU8GRSgZr5bDR2L89Aznoc/2EeoAeFHeHAJmQSx
Original-Sender: linux-security-module-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-security-module.vger.kernel.org>
X-Mailing-List: linux-security-module@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel.lsm:16787 gmane.linux.kernel:1340970 gmane.comp.security.selinux:17742 gmane.linux.network:239600
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1340970>

--047d7b339f4dbc296104c6dac2e3
Content-Type: text/plain; charset=ISO-8859-1

NAK.

I personally think commit be9f4a44e7d41cee should be reverted until it
is fixed.  Let me explain what all I believe it broke and how.

Old callchain of the creation of the 'equivalent' socket previous to
the patch in question just for reference:

    inet_ctl_sock_create
      sock_create_kern
        __sock_create
          pf->create (inet_create)
            sk_alloc
              sk_prot_alloc
                security_sk_alloc()


This WAS working properly.  All of it.  The equivalent struct sock was
being created and allocated in inet_create(), which called to
sk_alloc->sk_prot_alloc->security_sk_alloc().  We all agree that
failing to call security_sk_alloc() is the first regression
introduced.

The second regression was the labeling issue.  There was a call to
security_socket_post_create (from __sock_create) which was properly
setting the labels on both the socket and sock.  This new patch broke
that as well.  We don't expose an equivalent
security_sock_post_create() interface in the LSM currently, and until
we do, this can't be fixed.  It's why I say it should be reverted.

I have a patch I'm testing right now which takes care of the first
part the way I like (and yes, I'm doing the allocation on the correct
number node).  It basically looks like so:

+       for_each_possible_cpu(cpu) {
+               sock = &per_cpu(unicast_sock, cpu);
+               rc = security_sk_alloc(&sock->sk, PF_INET, GFP_KERNEL,
cpu_to_node(cpu));
+               if (rc)
+                       return rc;
+       }

I'm going to work right now on exposing the equivalent struct sock LSM
interface so we can call that as well.  But it's going to take me a
bit.  Attached is the patch just to (hopefully untested) shut up the
panic.

-Eric

On Thu, Aug 9, 2012 at 10:50 AM, Eric Dumazet <eric.dumazet@gmail.com> wrote:
> From: Eric Dumazet <edumazet@google.com>
>
> commit be9f4a44e7d41cee (ipv4: tcp: remove per net tcp_sock) added a
> selinux regression, reported and bisected by John Stultz
>
> selinux_ip_postroute_compat() expect to find a valid sk->sk_security
> pointer, but this field is NULL for unicast_sock
>
> Fix this by adding a new 'kernel' parameter to security_sk_alloc(),
> set to true if socket might already have a valid sk->sk_security
> pointer. ip_send_unicast_reply() uses a percpu fake socket, so the first
> call to security_sk_alloc() will populate sk->sk_security pointer,
> subsequent ones will reuse existing context.
>
> Reported-by: John Stultz <johnstul@us.ibm.com>
> Bisected-by: John Stultz <johnstul@us.ibm.com>
> Signed-off-by: Eric Dumazet <edumazet@google.com>
> Cc: Paul Moore <paul@paul-moore.com>
> Cc: Eric Paris <eparis@parisplace.org>
> Cc: "Serge E. Hallyn" <serge@hallyn.com>
> ---
>  include/linux/security.h   |    6 +++---
>  net/core/sock.c            |    2 +-
>  net/ipv4/ip_output.c       |    4 +++-
>  security/security.c        |    4 ++--
>  security/selinux/hooks.c   |    5 ++++-
>  security/smack/smack_lsm.c |   10 ++++++++--
>  6 files changed, 21 insertions(+), 10 deletions(-)
>
> diff --git a/include/linux/security.h b/include/linux/security.h
> index 4e5a73c..4d8e454 100644
> --- a/include/linux/security.h
> +++ b/include/linux/security.h
> @@ -1601,7 +1601,7 @@ struct security_operations {
>         int (*socket_sock_rcv_skb) (struct sock *sk, struct sk_buff *skb);
>         int (*socket_getpeersec_stream) (struct socket *sock, char __user *optval, int __user *optlen, unsigned len);
>         int (*socket_getpeersec_dgram) (struct socket *sock, struct sk_buff *skb, u32 *secid);
> -       int (*sk_alloc_security) (struct sock *sk, int family, gfp_t priority);
> +       int (*sk_alloc_security) (struct sock *sk, int family, gfp_t priority, bool kernel);
>         void (*sk_free_security) (struct sock *sk);
>         void (*sk_clone_security) (const struct sock *sk, struct sock *newsk);
>         void (*sk_getsecid) (struct sock *sk, u32 *secid);
> @@ -2539,7 +2539,7 @@ int security_sock_rcv_skb(struct sock *sk, struct sk_buff *skb);
>  int security_socket_getpeersec_stream(struct socket *sock, char __user *optval,
>                                       int __user *optlen, unsigned len);
>  int security_socket_getpeersec_dgram(struct socket *sock, struct sk_buff *skb, u32 *secid);
> -int security_sk_alloc(struct sock *sk, int family, gfp_t priority);
> +int security_sk_alloc(struct sock *sk, int family, gfp_t priority, bool kernel);
>  void security_sk_free(struct sock *sk);
>  void security_sk_clone(const struct sock *sk, struct sock *newsk);
>  void security_sk_classify_flow(struct sock *sk, struct flowi *fl);
> @@ -2667,7 +2667,7 @@ static inline int security_socket_getpeersec_dgram(struct socket *sock, struct s
>         return -ENOPROTOOPT;
>  }
>
> -static inline int security_sk_alloc(struct sock *sk, int family, gfp_t priority)
> +static inline int security_sk_alloc(struct sock *sk, int family, gfp_t priority, bool kernel)
>  {
>         return 0;
>  }
> diff --git a/net/core/sock.c b/net/core/sock.c
> index 8f67ced..e00cadf 100644
> --- a/net/core/sock.c
> +++ b/net/core/sock.c
> @@ -1186,7 +1186,7 @@ static struct sock *sk_prot_alloc(struct proto *prot, gfp_t priority,
>         if (sk != NULL) {
>                 kmemcheck_annotate_bitfield(sk, flags);
>
> -               if (security_sk_alloc(sk, family, priority))
> +               if (security_sk_alloc(sk, family, priority, false))
>                         goto out_free;
>
>                 if (!try_module_get(prot->owner))
> diff --git a/net/ipv4/ip_output.c b/net/ipv4/ip_output.c
> index 76dde25..b233d6e 100644
> --- a/net/ipv4/ip_output.c
> +++ b/net/ipv4/ip_output.c
> @@ -1524,6 +1524,8 @@ void ip_send_unicast_reply(struct net *net, struct sk_buff *skb, __be32 daddr,
>         sk->sk_priority = skb->priority;
>         sk->sk_protocol = ip_hdr(skb)->protocol;
>         sk->sk_bound_dev_if = arg->bound_dev_if;
> +       if (security_sk_alloc(sk, PF_INET, GFP_ATOMIC, true))
> +               goto out;
>         sock_net_set(sk, net);
>         __skb_queue_head_init(&sk->sk_write_queue);
>         sk->sk_sndbuf = sysctl_wmem_default;
> @@ -1539,7 +1541,7 @@ void ip_send_unicast_reply(struct net *net, struct sk_buff *skb, __be32 daddr,
>                 skb_set_queue_mapping(nskb, skb_get_queue_mapping(skb));
>                 ip_push_pending_frames(sk, &fl4);
>         }
> -
> +out:
>         put_cpu_var(unicast_sock);
>
>         ip_rt_put(rt);
> diff --git a/security/security.c b/security/security.c
> index 860aeb3..23cf297 100644
> --- a/security/security.c
> +++ b/security/security.c
> @@ -1146,9 +1146,9 @@ int security_socket_getpeersec_dgram(struct socket *sock, struct sk_buff *skb, u
>  }
>  EXPORT_SYMBOL(security_socket_getpeersec_dgram);
>
> -int security_sk_alloc(struct sock *sk, int family, gfp_t priority)
> +int security_sk_alloc(struct sock *sk, int family, gfp_t priority, bool kernel)
>  {
> -       return security_ops->sk_alloc_security(sk, family, priority);
> +       return security_ops->sk_alloc_security(sk, family, priority, kernel);
>  }
>
>  void security_sk_free(struct sock *sk)
> diff --git a/security/selinux/hooks.c b/security/selinux/hooks.c
> index 6c77f63..ccd4374 100644
> --- a/security/selinux/hooks.c
> +++ b/security/selinux/hooks.c
> @@ -4289,10 +4289,13 @@ out:
>         return 0;
>  }
>
> -static int selinux_sk_alloc_security(struct sock *sk, int family, gfp_t priority)
> +static int selinux_sk_alloc_security(struct sock *sk, int family, gfp_t priority, bool kernel)
>  {
>         struct sk_security_struct *sksec;
>
> +       if (kernel && sk->sk_security)
> +               return 0;
> +
>         sksec = kzalloc(sizeof(*sksec), priority);
>         if (!sksec)
>                 return -ENOMEM;
> diff --git a/security/smack/smack_lsm.c b/security/smack/smack_lsm.c
> index 8221514..0b066d0 100644
> --- a/security/smack/smack_lsm.c
> +++ b/security/smack/smack_lsm.c
> @@ -1749,20 +1749,26 @@ static void smack_task_to_inode(struct task_struct *p, struct inode *inode)
>   * @sk: the socket
>   * @family: unused
>   * @gfp_flags: memory allocation flags
> + * @kernel: true if we should check sk_security being already set
>   *
>   * Assign Smack pointers to current
>   *
>   * Returns 0 on success, -ENOMEM is there's no memory
>   */
> -static int smack_sk_alloc_security(struct sock *sk, int family, gfp_t gfp_flags)
> +static int smack_sk_alloc_security(struct sock *sk, int family, gfp_t gfp_flags, bool kernel)
>  {
> -       char *csp = smk_of_current();
> +       char *csp;
>         struct socket_smack *ssp;
>
> +       if (kernel && sk->sk_security)
> +               return 0;
> +
>         ssp = kzalloc(sizeof(struct socket_smack), gfp_flags);
>         if (ssp == NULL)
>                 return -ENOMEM;
>
> +       csp = kernel ? smack_net_ambient : smk_of_current();
> +
>         ssp->smk_in = csp;
>         ssp->smk_out = csp;
>         ssp->smk_packet = NULL;
>
>

--047d7b339f4dbc296104c6dac2e3
Content-Type: application/octet-stream; name="tmp.patch"
Content-Disposition: attachment; filename="tmp.patch"
Content-Transfer-Encoding: base64
X-Attachment-Id: f_h5oa1cro0

Y29tbWl0IGZlYWY0ZmU4YThlNDUwOTU0MDI4Njg5OWQwMmNkODhmMDljMGQzNDMKQXV0aG9yOiBF
cmljIFBhcmlzIDxlcGFyaXNAcmVkaGF0LmNvbT4KRGF0ZTogICBUaHUgQXVnIDkgMTQ6MDg6MTIg
MjAxMiAtMDQwMAoKICAgIE5ldHdvcmsvU2VjdXJpdHk6IGFsbG9jYXRlIHNlY3VyaXR5IGRhdGEg
d2hlbiB3ZSBhbGxvY2F0ZSB1bmljYXN0IHNvY2tldHMKICAgIAogICAgY29tbWl0IGJlOWY0YTQ0
ZTdkNDFjZWUgKGlwdjQ6IHRjcDogcmVtb3ZlIHBlciBuZXQgdGNwX3NvY2spIGFkZGVkIGEKICAg
IHJlZ3Jlc3Npb24gYmVjYXVzZSBpdCBkaWQgbm90IHByb3Blcmx5IGluaXRpYWxpemUgdGhlIG5l
dyBwZXIgY3B1IHNvY2tldHMuCiAgICBUaGlzIHdhcyByZXBvcnRlZCBhbmQgYmlzZWN0ZWQgYnkg
Sm9obiBTdHVsdHo6CiAgICAKICAgIFsgICA2OS4yNzI5MjddIEJVRzogdW5hYmxlIHRvIGhhbmRs
ZSBrZXJuZWwgTlVMTCBwb2ludGVyIGRlcmVmZXJlbmNlIGF0IDAwMDAwMDAwMDAwMDAwMTAKICAg
IFsgICA2OS4yNzMzNzRdIElQOiBbPGZmZmZmZmZmODEzMmU3YzQ+XSBzZWxpbnV4X2lwX3Bvc3Ry
b3V0ZV9jb21wYXQrMHhhNC8weGUwCiAgICBbICAgNjkuMjczMzc0XSBQR0QgM2E4NWIwNjcgUFVE
IDNmNTBiMDY3IFBNRCAwCiAgICBbICAgNjkuMjczMzc0XSBPb3BzOiAwMDAwIFsjMV0gUFJFRU1Q
VCBTTVAKICAgIFsgICA2OS4yNzMzNzRdIENQVSAzCiAgICBbICAgNjkuMjczMzc0XSBQaWQ6IDIz
OTIsIGNvbW06IGh3Y2xvY2sgTm90IHRhaW50ZWQgMy42LjAtcmMxam9obisgIzEwNiBCb2NocyBC
b2NocwogICAgWyAgIDY5LjI3MzM3NF0gUklQOiAwMDEwOls8ZmZmZmZmZmY4MTMyZTdjND5dICBb
PGZmZmZmZmZmODEzMmU3YzQ+XSBzZWxpbnV4X2lwX3Bvc3Ryb3V0ZV9jb21wYXQrMHhhNC8weGUw
CiAgICBbICAgNjkuMjczMzc0XSBSU1A6IDAwMTg6ZmZmZjg4MDAzZjAwMzcyMCAgRUZMQUdTOiAw
MDAxMDI0NgogICAgWyAgIDY5LjI3MzM3NF0gUkFYOiAwMDAwMDAwMDAwMDAwMDAwIFJCWDogZmZm
Zjg4MDAzZjVmYTlkOCBSQ1g6IDAwMDAwMDAwMDAwMDAwMDYKICAgIFsgICA2OS4yNzMzNzRdIFJE
WDogZmZmZjg4MDAzZjAwMzc0MCBSU0k6IGZmZmY4ODAwM2M2YjI1NmMgUkRJOiBmZmZmODgwMDNm
NWZhOWQ4CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgWyBPSyBdCiAgICBbICAgNjkuMjczMzc0XSBSQlA6
IGZmZmY4ODAwM2YwMDM3YTAgUjA4OiAwMDAwMDAwMDAwMDAwMDAwIFIwOTogZmZmZjg4MDAzZjFk
MGNjMAogICAgWyAgIDY5LjI3MzM3NF0gUjEwOiAwMDAwMDAwMDAwMDAwMDAzIFIxMTogMDAwMDAw
MDAwMDAwMDAwMCBSMTI6IDAwMDAwMDAwMDAwMDAwMDAKICAgIFsgICA2OS4yNzMzNzRdIFIxMzog
MDAwMDAwMDAwMDAwMDAwMiBSMTQ6IGZmZmY4ODAwM2YwMDM3YzAgUjE1OiAwMDAwMDAwMDAwMDAw
MDA0CiAgICBbICAgNjkuMjczMzc0XSBGUzogIDAwMDA3ZmEzOTgyMTE3MDAoMDAwMCkgR1M6ZmZm
Zjg4MDAzZjAwMDAwMCgwMDAwKSBrbmxHUzowMDAwMDAwMDAwMDAwMDAwCiAgICBbICAgNjkuMjcz
Mzc0XSBDUzogIDAwMTAgRFM6IDAwMDAgRVM6IDAwMDAgQ1IwOiAwMDAwMDAwMDgwMDUwMDMzCiAg
ICBbICAgNjkuMjczMzc0XSBDUjI6IDAwMDAwMDAwMDAwMDAwMTAgQ1IzOiAwMDAwMDAwMDNiNTJh
MDAwIENSNDogMDAwMDAwMDAwMDAwMDZlMAogICAgWyAgIDY5LjI3MzM3NF0gRFIwOiAwMDAwMDAw
MDAwMDAwMDAwIERSMTogMDAwMDAwMDAwMDAwMDAwMCBEUjI6IDAwMDAwMDAwMDAwMDAwMDAKICAg
IFsgICA2OS4yNzMzNzRdIERSMzogMDAwMDAwMDAwMDAwMDAwMCBEUjY6IDAwMDAwMDAwZmZmZjBm
ZjAgRFI3OiAwMDAwMDAwMDAwMDAwNDAwCiAgICBbICAgNjkuMjczMzc0XSBQcm9jZXNzIGh3Y2xv
Y2sgKHBpZDogMjM5MiwgdGhyZWFkaW5mbyBmZmZmODgwMDNhMGVlMDAwLCB0YXNrIGZmZmY4ODAw
M2ZhODJiODApCiAgICBbICAgNjkuMjczMzc0XSBTdGFjazoKICAgIFsgICA2OS4yNzMzNzRdICBm
ZmZmODgwMDNjNmIyNTU4IDAwMDAwMDAwMDAwMDAwMDYgMDAwMDAwMDAwMDAwMDAwMCAwMDAwMTYw
MDY3ZDcwMDAyCiAgICBbICAgNjkuMjczMzc0XSAgMGYwMjAwMGEwMjAyMDAwYSAwMDAwMDAwMDAw
MDAwMDAwIDAwMDAwMDAwMDAwMDAwMDAgMDAwMDAwMDAwMDAwMDAwMAogICAgWyAgIDY5LjI3MzM3
NF0gIGZmZmY4ODAwM2YwMDM4MDIgZmZmZjg4MDAzZjAwMzcyOCBmZmZmODgwMDNmMWQ0MmQwIGZm
ZmY4ODAwM2Q2YzM1NjAKICAgIFsgICA2OS4yNzMzNzRdIENhbGwgVHJhY2U6CiAgICBbICAgNjku
MjczMzc0XSAgPElSUT4KICAgIFsgICA2OS4yNzMzNzRdICBbPGZmZmZmZmZmODEzMmVhYWI+XSBz
ZWxpbnV4X2lwX3Bvc3Ryb3V0ZSsweDJhYi8weDNlMAogICAgWyAgIDY5LjI3MzM3NF0gIFs8ZmZm
ZmZmZmY4MTMyZWMxYz5dIHNlbGludXhfaXB2NF9wb3N0cm91dGUrMHgxYy8weDIwCiAgICBbICAg
NjkuMjczMzc0XSAgWzxmZmZmZmZmZjgxOTgyNjVjPl0gbmZfaXRlcmF0ZSsweGFjLzB4MTQwCiAg
ICBbICAgNjkuMjczMzc0XSAgWzxmZmZmZmZmZjgxOTgyN2E1Pl0gbmZfaG9va19zbG93KzB4YjUv
MHgyMTAKICAgIFsgICA2OS4yNzMzNzRdICBbPGZmZmZmZmZmODE5OWNiYmE+XSBpcF9vdXRwdXQr
MHhhYS8weDE1MAogICAgWyAgIDY5LjI3MzM3NF0gIFs8ZmZmZmZmZmY4MTk5YTlhZj5dIGlwX2xv
Y2FsX291dCsweDdmLzB4MTEwCiAgICBbICAgNjkuMjczMzc0XSAgWzxmZmZmZmZmZjgxOTlkODJl
Pl0gaXBfc2VuZF9za2IrMHhlLzB4NDAKICAgIFsgICA2OS4yNzMzNzRdICBbPGZmZmZmZmZmODE5
OWQ4OGI+XSBpcF9wdXNoX3BlbmRpbmdfZnJhbWVzKzB4MmIvMHgzMAogICAgWyAgIDY5LjI3MzM3
NF0gIFs8ZmZmZmZmZmY4MTk5ZGM5Nz5dIGlwX3NlbmRfdW5pY2FzdF9yZXBseSsweDJjNy8weDNj
MAogICAgWyAgIDY5LjI3MzM3NF0gIFs8ZmZmZmZmZmY4MTliYjIxNT5dIHRjcF92NF9zZW5kX3Jl
c2V0KzB4MWY1LzB4M2YwCiAgICBbICAgNjkuMjczMzc0XSAgWzxmZmZmZmZmZjgxOWJmMDRiPl0g
dGNwX3Y0X3JjdisweDJiYi8weDEwODAKICAgIFsgICA2OS4yNzMzNzRdICBbPGZmZmZmZmZmODE5
OTRkNzM+XSBpcF9sb2NhbF9kZWxpdmVyX2ZpbmlzaCsweDEzMy8weDRkMAogICAgWyAgIDY5LjI3
MzM3NF0gIFs8ZmZmZmZmZmY4MTk5NTNlMD5dIGlwX2xvY2FsX2RlbGl2ZXIrMHg5MC8weGEwCiAg
ICBbICAgNjkuMjczMzc0XSAgWzxmZmZmZmZmZjgxOTk0NWIyPl0gaXBfcmN2X2ZpbmlzaCsweDI2
Mi8weDhmMAogICAgWyAgIDY5LjI3MzM3NF0gIFs8ZmZmZmZmZmY4MTk5NTc0Mj5dIGlwX3Jjdisw
eDM1Mi8weDNhMAogICAgWyAgIDY5LjMyMzg0NF0gIFs8ZmZmZmZmZmY4MTkyNTI0ND5dIF9fbmV0
aWZfcmVjZWl2ZV9za2IrMHhjYjQvMHgxMGUwCiAgICBbICAgNjkuMzIzODQ0XSAgWzxmZmZmZmZm
ZjgxOTJiYTVkPl0gbmV0aWZfcmVjZWl2ZV9za2IrMHgxOGQvMHgyMzAKICAgIFsgICA2OS4zMjM4
NDRdICBbPGZmZmZmZmZmODE3NDZhYmM+XSB2aXJ0bmV0X3BvbGwrMHg1OGMvMHg3YjAKICAgIFsg
ICA2OS4zMjM4NDRdICBbPGZmZmZmZmZmODE5MmNmNTk+XSBuZXRfcnhfYWN0aW9uKzB4Mjg5LzB4
NTUwCiAgICBbICAgNjkuMzIzODQ0XSAgWzxmZmZmZmZmZjgxMDU4NDZhPl0gX19kb19zb2Z0aXJx
KzB4MWRhLzB4NTYwCiAgICBbICAgNjkuMzIzODQ0XSAgWzxmZmZmZmZmZjgxYjVjMmJjPl0gY2Fs
bF9zb2Z0aXJxKzB4MWMvMHgzMAogICAgWyAgIDY5LjMyMzg0NF0gIFs8ZmZmZmZmZmY4MTAwNGQ3
NT5dIGRvX3NvZnRpcnErMHgxMDUvMHgxZTAKICAgIFsgICA2OS4zMjM4NDRdICBbPGZmZmZmZmZm
ODEwNThiYmU+XSBpcnFfZXhpdCsweDllLzB4MTAwCiAgICBbICAgNjkuMzIzODQ0XSAgWzxmZmZm
ZmZmZjgxYjVjOWQzPl0gZG9fSVJRKzB4NjMvMHhkMAogICAgWyAgIDY5LjMyMzg0NF0gIFs8ZmZm
ZmZmZmY4MWI1YTU2Zj5dIGNvbW1vbl9pbnRlcnJ1cHQrMHg2Zi8weDZmCiAgICBbICAgNjkuMzIz
ODQ0XSAgPEVPST4KICAgIFsgICA2OS4zMjM4NDRdICBbPGZmZmZmZmZmODEwOTkzYWQ+XSBfX21p
Z2h0X3NsZWVwKzB4MWNkLzB4MjgwCiAgICBbICAgNjkuMzIzODQ0XSAgWzxmZmZmZmZmZjgxMTYw
ZTc0Pl0gbWlnaHRfZmF1bHQrMHgzNC8weGIwCiAgICBbICAgNjkuMzIzODQ0XSAgWzxmZmZmZmZm
ZjgxMDU2NTdlPl0gc3lzX2dldHRpbWVvZmRheSsweGJlLzB4ZjAKICAgIFsgICA2OS4zMjM4NDRd
ICBbPGZmZmZmZmZmODFiNWFmZTk+XSBzeXN0ZW1fY2FsbF9mYXN0cGF0aCsweDE2LzB4MWIKICAg
IFsgICA2OS4zMjM4NDRdIENvZGU6IGMwIDQ1IDMxIGM5IGIxIDAxIGJhIDJhIDAwIDAwIDAwIGU4
IGE3IDg5IGZmIGZmIDg1IGMwIGI5IDAwIDAwIDZmIDAwIDc0IDBlIDQ4IDgzIGM0IDcwIDg5IGM4
IDViIDQxIDVjIDVkIGMzIDBmIDFmIDAwIDBmIGI2IDRkIGVmIDw0MT4gOGIgN2MgMjQgMTAgNDgg
OGQgNTUgYzAgNDggODkgZGUgZTggYWIgNmQgMDEgMDAgODMgZjggMDEgMTkKICAgIFsgICA2OS4z
MjM4NDRdIFJJUCAgWzxmZmZmZmZmZjgxMzJlN2M0Pl0gc2VsaW51eF9pcF9wb3N0cm91dGVfY29t
cGF0KzB4YTQvMHhlMAogICAgWyAgIDY5LjMyMzg0NF0gIFJTUCA8ZmZmZjg4MDAzZjAwMzcyMD4K
ICAgIFsgICA2OS4zMjM4NDRdIENSMjogMDAwMDAwMDAwMDAwMDAxMAogICAgWyAgIDY5LjM1NzQ4
OV0gLS0tWyBlbmQgdHJhY2UgMGNkM2UxYTYwZGVlNjA5NiBdLS0tCiAgICBbICAgNjkuMzU4MzUz
XSBLZXJuZWwgcGFuaWMgLSBub3Qgc3luY2luZzogRmF0YWwgZXhjZXB0aW9uIGluIGludGVycnVw
dAogICAgCiAgICBUaGUgcmVhc29uIGZvciB0aGUgcmVncmVzaW9uIGlzIGJlY2F1c2Ugb2YgaG93
IHRoZSBuZXcgc29jayBpcyBjcmVhdGVkLiAgVGhlCiAgICBvbGQgc29ja2V0IHdhcyBjcmVhdGVk
IHVzaW5nIGluZXRfY3RsX3NvY2tfY3JlYXRlKCkgd2hpY2ggdXNlcyBhbGwgZ2VuZXJpYwogICAg
ZnVuY3Rpb25zIHRvIGVzdGFibGlzaCB0aGUgc3RydWN0IHNvY2tldCwgc3RydWN0IHNvY2ssIGFu
ZCBkbyBhbGwgb2YgdGhlCiAgICBhbGxvY2F0aW9uIGFuZCBpbml0aWFsaXphdGlvbiBvZiB0aGUg
c29ja2V0IGFuZCBpdHMgYXBwcm9wcmlhdGUgc2VjdXJpdHkgZGF0YS4KICAgIAogICAgYWthOgog
ICAgCiAgICBpbmV0X2N0bF9zb2NrX2NyZWF0ZQogICAgICBzb2NrX2NyZWF0ZV9rZXJuCiAgICAg
ICAgX19zb2NrX2NyZWF0ZQogICAgICAgICAgcGYtPmNyZWF0ZSAoaW5ldF9jcmVhdGUpCiAgICAg
ICAgICAgIHNrX2FsbG9jCiAgICAgICAgICAgICAgc2tfcHJvdF9hbGxvYwogICAgICAgICAgICAg
ICAgc2VjX3NrX2FsbG9jKCkKICAgIAogICAgVGhlc2UgbmV3IHBlcl9jcHUgc2tpcCBhbGwgb2Yg
dGhhdCBpbml0aWFsaXphdGlvbiBhbmQgaW5zdGVhZCB0cnkgdG8gZG8gaXQgYnkKICAgIGhhbmQu
ICBEb2luZyBpdCBieSBoYW5kIGNhdXNlcyBhIHNlY29uZCByZWdyZXNzaW9uLiAgVGhlIF9fc29j
a19jcmVhdGUoKQogICAgZnVuY3Rpb24gY2FsbHMgc2VjdXJpdHlfc29ja2V0X3Bvc3RfY3JlYXRl
KCkgd2hpY2ggaW5pdGlhbGl6ZXMgdGhlIHNlY3VydHkKICAgIHN0YXRlIG9uIGJvdGggdGhlIHNv
Y2tldCBhbmQgdGhlIHNvY2suICBIb3dldmVyIGhlcmUgd2UgZG9uJ3Qgc2V0IHVwIHRoZQogICAg
c2VjdXJpdHkgc3RydWN0dXJlLiAgSSdkIGxpa2UgdG8gdXNlIHNlY3VyaXR5X3NvY2tldF9wb3N0
X2NyZWF0ZSgpIGJ1dCBpdCBuZWVkcwogICAgdGhlIHNvY2tldCBhbmQgaW4gdGhpcyBjYXNlIHdl
IHNraXBwZWQgc3RyYWlnaHQgdG8gdGhlIHN0cnVjdCBzb2NrLiAgTG9va3MgbGlrZQogICAgdGhp
cyBjdXN0b20gaGFja2FyeSBpcyBnb2luZyB0byByZXF1aXJlIGEgc2Vjb25kIHBhdGNoIHdoaWNo
IGV4cG9zZXMgdGhlIGluYXJkcwogICAgb2Ygc2VjdXJpdHlfc29ja2V0X3Bvc3RfY3JlYXRlKCkg
YXMgc2VjdXJpdHlfc29ja19wb3N0X2NyZWF0ZSgpIHNvIHdlIGNhbiBkbwogICAgdGhlIGxhYmVs
aW5nIG9mIHRoaXMgY3JlYXRlZCB0aGlzIHdheS4gIEJ1dCBhdCBsZWFzdCB0aGlzIG9uZSB3b24n
dCBwYW5pYyB0aGUKICAgIGtlcm5lbC4KICAgIAogICAgUmVwb3J0ZWQtYnk6IEpvaG4gU3R1bHR6
IDxqb2huc3R1bEB1cy5pYm0uY29tPgogICAgQmlzZWN0ZWQtYnk6IEpvaG4gU3R1bHR6IDxqb2hu
c3R1bEB1cy5pYm0uY29tPgogICAgU2lnbmVkLW9mZi1ieTogRXJpYyBQYXJpcyA8ZXBhcmlzQHJl
ZGhhdC5jb20+CiAgICBDYzogRXJpYyBEdW1hemV0IDxlZHVtYXpldEBnb29nbGUuY29tPgogICAg
Q2M6IFBhdWwgTW9vcmUgPHBhdWxAcGF1bC1tb29yZS5jb20+CiAgICBDYzogIlNlcmdlIEUuIEhh
bGx5biIgPHNlcmdlQGhhbGx5bi5jb20+CgpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC9zZWN1
cml0eS5oIGIvaW5jbHVkZS9saW51eC9zZWN1cml0eS5oCmluZGV4IDRlNWE3M2MuLjFlMGM1YTcg
MTAwNjQ0Ci0tLSBhL2luY2x1ZGUvbGludXgvc2VjdXJpdHkuaAorKysgYi9pbmNsdWRlL2xpbnV4
L3NlY3VyaXR5LmgKQEAgLTE2MDEsNyArMTYwMSw3IEBAIHN0cnVjdCBzZWN1cml0eV9vcGVyYXRp
b25zIHsKIAlpbnQgKCpzb2NrZXRfc29ja19yY3Zfc2tiKSAoc3RydWN0IHNvY2sgKnNrLCBzdHJ1
Y3Qgc2tfYnVmZiAqc2tiKTsKIAlpbnQgKCpzb2NrZXRfZ2V0cGVlcnNlY19zdHJlYW0pIChzdHJ1
Y3Qgc29ja2V0ICpzb2NrLCBjaGFyIF9fdXNlciAqb3B0dmFsLCBpbnQgX191c2VyICpvcHRsZW4s
IHVuc2lnbmVkIGxlbik7CiAJaW50ICgqc29ja2V0X2dldHBlZXJzZWNfZGdyYW0pIChzdHJ1Y3Qg
c29ja2V0ICpzb2NrLCBzdHJ1Y3Qgc2tfYnVmZiAqc2tiLCB1MzIgKnNlY2lkKTsKLQlpbnQgKCpz
a19hbGxvY19zZWN1cml0eSkgKHN0cnVjdCBzb2NrICpzaywgaW50IGZhbWlseSwgZ2ZwX3QgcHJp
b3JpdHkpOworCWludCAoKnNrX2FsbG9jX3NlY3VyaXR5KSAoc3RydWN0IHNvY2sgKnNrLCBpbnQg
ZmFtaWx5LCBnZnBfdCBwcmlvcml0eSwgaW50IG51bWFfbm9kZSk7CiAJdm9pZCAoKnNrX2ZyZWVf
c2VjdXJpdHkpIChzdHJ1Y3Qgc29jayAqc2spOwogCXZvaWQgKCpza19jbG9uZV9zZWN1cml0eSkg
KGNvbnN0IHN0cnVjdCBzb2NrICpzaywgc3RydWN0IHNvY2sgKm5ld3NrKTsKIAl2b2lkICgqc2tf
Z2V0c2VjaWQpIChzdHJ1Y3Qgc29jayAqc2ssIHUzMiAqc2VjaWQpOwpAQCAtMjUzOSw3ICsyNTM5
LDcgQEAgaW50IHNlY3VyaXR5X3NvY2tfcmN2X3NrYihzdHJ1Y3Qgc29jayAqc2ssIHN0cnVjdCBz
a19idWZmICpza2IpOwogaW50IHNlY3VyaXR5X3NvY2tldF9nZXRwZWVyc2VjX3N0cmVhbShzdHJ1
Y3Qgc29ja2V0ICpzb2NrLCBjaGFyIF9fdXNlciAqb3B0dmFsLAogCQkJCSAgICAgIGludCBfX3Vz
ZXIgKm9wdGxlbiwgdW5zaWduZWQgbGVuKTsKIGludCBzZWN1cml0eV9zb2NrZXRfZ2V0cGVlcnNl
Y19kZ3JhbShzdHJ1Y3Qgc29ja2V0ICpzb2NrLCBzdHJ1Y3Qgc2tfYnVmZiAqc2tiLCB1MzIgKnNl
Y2lkKTsKLWludCBzZWN1cml0eV9za19hbGxvYyhzdHJ1Y3Qgc29jayAqc2ssIGludCBmYW1pbHks
IGdmcF90IHByaW9yaXR5KTsKK2ludCBzZWN1cml0eV9za19hbGxvYyhzdHJ1Y3Qgc29jayAqc2ss
IGludCBmYW1pbHksIGdmcF90IHByaW9yaXR5LCBpbnQgbnVtYV9ub2RlKTsKIHZvaWQgc2VjdXJp
dHlfc2tfZnJlZShzdHJ1Y3Qgc29jayAqc2spOwogdm9pZCBzZWN1cml0eV9za19jbG9uZShjb25z
dCBzdHJ1Y3Qgc29jayAqc2ssIHN0cnVjdCBzb2NrICpuZXdzayk7CiB2b2lkIHNlY3VyaXR5X3Nr
X2NsYXNzaWZ5X2Zsb3coc3RydWN0IHNvY2sgKnNrLCBzdHJ1Y3QgZmxvd2kgKmZsKTsKQEAgLTI2
NjcsNyArMjY2Nyw3IEBAIHN0YXRpYyBpbmxpbmUgaW50IHNlY3VyaXR5X3NvY2tldF9nZXRwZWVy
c2VjX2RncmFtKHN0cnVjdCBzb2NrZXQgKnNvY2ssIHN0cnVjdCBzCiAJcmV0dXJuIC1FTk9QUk9U
T09QVDsKIH0KIAotc3RhdGljIGlubGluZSBpbnQgc2VjdXJpdHlfc2tfYWxsb2Moc3RydWN0IHNv
Y2sgKnNrLCBpbnQgZmFtaWx5LCBnZnBfdCBwcmlvcml0eSkKK3N0YXRpYyBpbmxpbmUgaW50IHNl
Y3VyaXR5X3NrX2FsbG9jKHN0cnVjdCBzb2NrICpzaywgaW50IGZhbWlseSwgZ2ZwX3QgcHJpb3Jp
dHksIGludCBudW1hX25vZGUpCiB7CiAJcmV0dXJuIDA7CiB9CmRpZmYgLS1naXQgYS9pbmNsdWRl
L25ldC9pcC5oIGIvaW5jbHVkZS9uZXQvaXAuaAppbmRleCBiZDVlNDQ0Li4zNDA5MDVkIDEwMDY0
NAotLS0gYS9pbmNsdWRlL25ldC9pcC5oCisrKyBiL2luY2x1ZGUvbmV0L2lwLmgKQEAgLTEwNSw3
ICsxMDUsNyBAQCBleHRlcm4gdm9pZAkJaXBfc2VuZF9jaGVjayhzdHJ1Y3QgaXBoZHIgKmlwKTsK
IGV4dGVybiBpbnQJCV9faXBfbG9jYWxfb3V0KHN0cnVjdCBza19idWZmICpza2IpOwogZXh0ZXJu
IGludAkJaXBfbG9jYWxfb3V0KHN0cnVjdCBza19idWZmICpza2IpOwogZXh0ZXJuIGludAkJaXBf
cXVldWVfeG1pdChzdHJ1Y3Qgc2tfYnVmZiAqc2tiLCBzdHJ1Y3QgZmxvd2kgKmZsKTsKLWV4dGVy
biB2b2lkCQlpcF9pbml0KHZvaWQpOworZXh0ZXJuIGludAkJaXBfaW5pdCh2b2lkKTsKIGV4dGVy
biBpbnQJCWlwX2FwcGVuZF9kYXRhKHN0cnVjdCBzb2NrICpzaywgc3RydWN0IGZsb3dpNCAqZmw0
LAogCQkJCSAgICAgICBpbnQgZ2V0ZnJhZyh2b2lkICpmcm9tLCBjaGFyICp0bywgaW50IG9mZnNl
dCwgaW50IGxlbiwKIAkJCQkJCSAgIGludCBvZGQsIHN0cnVjdCBza19idWZmICpza2IpLApkaWZm
IC0tZ2l0IGEvbmV0L2NvcmUvc29jay5jIGIvbmV0L2NvcmUvc29jay5jCmluZGV4IDhmNjdjZWQ4
Li4yY2FiNDU1IDEwMDY0NAotLS0gYS9uZXQvY29yZS9zb2NrLmMKKysrIGIvbmV0L2NvcmUvc29j
ay5jCkBAIC0xMTg2LDcgKzExODYsNyBAQCBzdGF0aWMgc3RydWN0IHNvY2sgKnNrX3Byb3RfYWxs
b2Moc3RydWN0IHByb3RvICpwcm90LCBnZnBfdCBwcmlvcml0eSwKIAlpZiAoc2sgIT0gTlVMTCkg
ewogCQlrbWVtY2hlY2tfYW5ub3RhdGVfYml0ZmllbGQoc2ssIGZsYWdzKTsKIAotCQlpZiAoc2Vj
dXJpdHlfc2tfYWxsb2Moc2ssIGZhbWlseSwgcHJpb3JpdHkpKQorCQlpZiAoc2VjdXJpdHlfc2tf
YWxsb2Moc2ssIGZhbWlseSwgcHJpb3JpdHksIG51bWFfbm9kZV9pZCgpKSkKIAkJCWdvdG8gb3V0
X2ZyZWU7CiAKIAkJaWYgKCF0cnlfbW9kdWxlX2dldChwcm90LT5vd25lcikpCmRpZmYgLS1naXQg
YS9uZXQvaXB2NC9hZl9pbmV0LmMgYi9uZXQvaXB2NC9hZl9pbmV0LmMKaW5kZXggNjY4MWNjZi4u
M2Y3OWYzNyAxMDA2NDQKLS0tIGEvbmV0L2lwdjQvYWZfaW5ldC5jCisrKyBiL25ldC9pcHY0L2Fm
X2luZXQuYwpAQCAtMTcyMCw3ICsxNzIwLDggQEAgc3RhdGljIGludCBfX2luaXQgaW5ldF9pbml0
KHZvaWQpCiAJICoJU2V0IHRoZSBJUCBtb2R1bGUgdXAKIAkgKi8KIAotCWlwX2luaXQoKTsKKwlp
ZiAoaXBfaW5pdCgpIDwgMCkKKwkJcGFuaWMoIkZhaWxlZCB0byBpbml0aWFsaXplIGlwLlxuIik7
CiAKIAl0Y3BfdjRfaW5pdCgpOwogCmRpZmYgLS1naXQgYS9uZXQvaXB2NC9pcF9vdXRwdXQuYyBi
L25ldC9pcHY0L2lwX291dHB1dC5jCmluZGV4IDc2ZGRlMjUuLjRhNzc1YjMgMTAwNjQ0Ci0tLSBh
L25ldC9pcHY0L2lwX291dHB1dC5jCisrKyBiL25ldC9pcHY0L2lwX291dHB1dC5jCkBAIC0xNTQ1
LDEyICsxNTQ1LDIzIEBAIHZvaWQgaXBfc2VuZF91bmljYXN0X3JlcGx5KHN0cnVjdCBuZXQgKm5l
dCwgc3RydWN0IHNrX2J1ZmYgKnNrYiwgX19iZTMyIGRhZGRyLAogCWlwX3J0X3B1dChydCk7CiB9
CiAKLXZvaWQgX19pbml0IGlwX2luaXQodm9pZCkKK2ludCBfX2luaXQgaXBfaW5pdCh2b2lkKQog
eworCXN0cnVjdCBpbmV0X3NvY2sgKnNvY2s7CisJaW50IHJjLCBjcHU7CisKIAlpcF9ydF9pbml0
KCk7CiAJaW5ldF9pbml0cGVlcnMoKTsKIAogI2lmIGRlZmluZWQoQ09ORklHX0lQX01VTFRJQ0FT
VCkgJiYgZGVmaW5lZChDT05GSUdfUFJPQ19GUykKIAlpZ21wX21jX3Byb2NfaW5pdCgpOwogI2Vu
ZGlmCisKKwlmb3JfZWFjaF9wb3NzaWJsZV9jcHUoY3B1KSB7CisJCXNvY2sgPSAmcGVyX2NwdSh1
bmljYXN0X3NvY2ssIGNwdSk7CisJCXJjID0gc2VjdXJpdHlfc2tfYWxsb2MoJnNvY2stPnNrLCBQ
Rl9JTkVULCBHRlBfS0VSTkVMLCBjcHVfdG9fbm9kZShjcHUpKTsKKwkJaWYgKHJjKQorCQkJcmV0
dXJuIHJjOworCX0KKwlyZXR1cm4gMDsKIH0KZGlmZiAtLWdpdCBhL3NlY3VyaXR5L2NhcGFiaWxp
dHkuYyBiL3NlY3VyaXR5L2NhcGFiaWxpdHkuYwppbmRleCA2MTA5NWRmLi4wNTI1ZDI4IDEwMDY0
NAotLS0gYS9zZWN1cml0eS9jYXBhYmlsaXR5LmMKKysrIGIvc2VjdXJpdHkvY2FwYWJpbGl0eS5j
CkBAIC02NTAsNyArNjUwLDcgQEAgc3RhdGljIGludCBjYXBfc29ja2V0X2dldHBlZXJzZWNfZGdy
YW0oc3RydWN0IHNvY2tldCAqc29jaywKIAlyZXR1cm4gLUVOT1BST1RPT1BUOwogfQogCi1zdGF0
aWMgaW50IGNhcF9za19hbGxvY19zZWN1cml0eShzdHJ1Y3Qgc29jayAqc2ssIGludCBmYW1pbHks
IGdmcF90IHByaW9yaXR5KQorc3RhdGljIGludCBjYXBfc2tfYWxsb2Nfc2VjdXJpdHkoc3RydWN0
IHNvY2sgKnNrLCBpbnQgZmFtaWx5LCBnZnBfdCBwcmlvcml0eSwgaW50IG51bWFfbm9kZSkKIHsK
IAlyZXR1cm4gMDsKIH0KZGlmZiAtLWdpdCBhL3NlY3VyaXR5L3NlY3VyaXR5LmMgYi9zZWN1cml0
eS9zZWN1cml0eS5jCmluZGV4IDg2MGFlYjMuLjAyYTdmNzYgMTAwNjQ0Ci0tLSBhL3NlY3VyaXR5
L3NlY3VyaXR5LmMKKysrIGIvc2VjdXJpdHkvc2VjdXJpdHkuYwpAQCAtMTE0Niw5ICsxMTQ2LDkg
QEAgaW50IHNlY3VyaXR5X3NvY2tldF9nZXRwZWVyc2VjX2RncmFtKHN0cnVjdCBzb2NrZXQgKnNv
Y2ssIHN0cnVjdCBza19idWZmICpza2IsIHUKIH0KIEVYUE9SVF9TWU1CT0woc2VjdXJpdHlfc29j
a2V0X2dldHBlZXJzZWNfZGdyYW0pOwogCi1pbnQgc2VjdXJpdHlfc2tfYWxsb2Moc3RydWN0IHNv
Y2sgKnNrLCBpbnQgZmFtaWx5LCBnZnBfdCBwcmlvcml0eSkKK2ludCBzZWN1cml0eV9za19hbGxv
YyhzdHJ1Y3Qgc29jayAqc2ssIGludCBmYW1pbHksIGdmcF90IHByaW9yaXR5LCBpbnQgbnVtYV9u
b2RlKQogewotCXJldHVybiBzZWN1cml0eV9vcHMtPnNrX2FsbG9jX3NlY3VyaXR5KHNrLCBmYW1p
bHksIHByaW9yaXR5KTsKKwlyZXR1cm4gc2VjdXJpdHlfb3BzLT5za19hbGxvY19zZWN1cml0eShz
aywgZmFtaWx5LCBwcmlvcml0eSwgbnVtYV9ub2RlKTsKIH0KIAogdm9pZCBzZWN1cml0eV9za19m
cmVlKHN0cnVjdCBzb2NrICpzaykKZGlmZiAtLWdpdCBhL3NlY3VyaXR5L3NlbGludXgvaG9va3Mu
YyBiL3NlY3VyaXR5L3NlbGludXgvaG9va3MuYwppbmRleCA2Yzc3ZjYzLi5iZGNmZDBjIDEwMDY0
NAotLS0gYS9zZWN1cml0eS9zZWxpbnV4L2hvb2tzLmMKKysrIGIvc2VjdXJpdHkvc2VsaW51eC9o
b29rcy5jCkBAIC00Mjg5LDExICs0Mjg5LDEyIEBAIG91dDoKIAlyZXR1cm4gMDsKIH0KIAotc3Rh
dGljIGludCBzZWxpbnV4X3NrX2FsbG9jX3NlY3VyaXR5KHN0cnVjdCBzb2NrICpzaywgaW50IGZh
bWlseSwgZ2ZwX3QgcHJpb3JpdHkpCitzdGF0aWMgaW50IHNlbGludXhfc2tfYWxsb2Nfc2VjdXJp
dHkoc3RydWN0IHNvY2sgKnNrLCBpbnQgZmFtaWx5LCBnZnBfdCBwcmlvcml0eSwKKwkJCQkgICAg
IGludCBudW1hX25vZGUpCiB7CiAJc3RydWN0IHNrX3NlY3VyaXR5X3N0cnVjdCAqc2tzZWM7CiAK
LQlza3NlYyA9IGt6YWxsb2Moc2l6ZW9mKCpza3NlYyksIHByaW9yaXR5KTsKKwlza3NlYyA9IGtt
YWxsb2Nfbm9kZShzaXplb2YoKnNrc2VjKSwgcHJpb3JpdHkgfCBfX0dGUF9aRVJPLCBudW1hX25v
ZGUpOwogCWlmICghc2tzZWMpCiAJCXJldHVybiAtRU5PTUVNOwogCmRpZmYgLS1naXQgYS9zZWN1
cml0eS9zbWFjay9zbWFja19sc20uYyBiL3NlY3VyaXR5L3NtYWNrL3NtYWNrX2xzbS5jCmluZGV4
IDgyMjE1MTQuLmI0M2FlNWQgMTAwNjQ0Ci0tLSBhL3NlY3VyaXR5L3NtYWNrL3NtYWNrX2xzbS5j
CisrKyBiL3NlY3VyaXR5L3NtYWNrL3NtYWNrX2xzbS5jCkBAIC0xNzU0LDEyICsxNzU0LDE0IEBA
IHN0YXRpYyB2b2lkIHNtYWNrX3Rhc2tfdG9faW5vZGUoc3RydWN0IHRhc2tfc3RydWN0ICpwLCBz
dHJ1Y3QgaW5vZGUgKmlub2RlKQogICoKICAqIFJldHVybnMgMCBvbiBzdWNjZXNzLCAtRU5PTUVN
IGlzIHRoZXJlJ3Mgbm8gbWVtb3J5CiAgKi8KLXN0YXRpYyBpbnQgc21hY2tfc2tfYWxsb2Nfc2Vj
dXJpdHkoc3RydWN0IHNvY2sgKnNrLCBpbnQgZmFtaWx5LCBnZnBfdCBnZnBfZmxhZ3MpCitzdGF0
aWMgaW50IHNtYWNrX3NrX2FsbG9jX3NlY3VyaXR5KHN0cnVjdCBzb2NrICpzaywgaW50IGZhbWls
eSwgZ2ZwX3QgZ2ZwX2ZsYWdzLAorCQkJCSAgIGludCBudW1hX25vZGUpCiB7CiAJY2hhciAqY3Nw
ID0gc21rX29mX2N1cnJlbnQoKTsKIAlzdHJ1Y3Qgc29ja2V0X3NtYWNrICpzc3A7CiAKLQlzc3Ag
PSBremFsbG9jKHNpemVvZihzdHJ1Y3Qgc29ja2V0X3NtYWNrKSwgZ2ZwX2ZsYWdzKTsKKwlzc3Ag
PSBrbWFsbG9jX25vZGUoc2l6ZW9mKHN0cnVjdCBzb2NrZXRfc21hY2spLCBnZnBfZmxhZ3MgfCBf
X0dGUF9aRVJPLAorCQkJICAgbnVtYV9ub2RlKTsKIAlpZiAoc3NwID09IE5VTEwpCiAJCXJldHVy
biAtRU5PTUVNOwogCg==
--047d7b339f4dbc296104c6dac2e3--
--
To unsubscribe from this list: send the line "unsubscribe linux-security-module" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

