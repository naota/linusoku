Path: news.gmane.org!not-for-mail
From: Silas Boyd-Wickizer <sbw@mit.edu>
Newsgroups: gmane.linux.kernel
Subject: [PATCH 2/3] Use get_online_cpus to avoid races involving
 for_each_online_cpu
Date: Thu, 2 Aug 2012 17:05:57 -0700
Lines: 73
Approved: news@gmane.org
Message-ID: <20120803000557.GC3443@mit.edu>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Trace: dough.gmane.org 1343952616 6411 80.91.229.3 (3 Aug 2012 00:10:16 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Fri, 3 Aug 2012 00:10:16 +0000 (UTC)
Cc: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>,
	"H. Peter Anvin" <hpa@zytor.com>,
	Thomas Gleixner <tglx@linutronix.de>, x86@kernel.org
To: linux-kernel@vger.kernel.org
Original-X-From: linux-kernel-owner@vger.kernel.org Fri Aug 03 02:10:16 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1Sx5T6-0007lz-0b
	for glk-linux-kernel-3@plane.gmane.org; Fri, 03 Aug 2012 02:10:16 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753034Ab2HCAKH (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Thu, 2 Aug 2012 20:10:07 -0400
Original-Received: from mail-gg0-f174.google.com ([209.85.161.174]:37162 "EHLO
	mail-gg0-f174.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751997Ab2HCAKB (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Thu, 2 Aug 2012 20:10:01 -0400
Original-Received: by ggnl2 with SMTP id l2so155971ggn.19
        for <linux-kernel@vger.kernel.org>; Thu, 02 Aug 2012 17:10:01 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=sender:date:from:to:cc:subject:message-id:mime-version:content-type
         :content-disposition:user-agent;
        bh=jMuajnl0OOEI7NSk2QRssppvEZ8wXnRBZhD9a1jwop0=;
        b=yxKQ+uKnty+7WGD3T1pNphlqSsa2vR+hkwtEHTgvkfBFhHBgp38h4IbbAZ0383t5Qu
         z2HpeAXt4HfERNhpB8TVshbR41DNEJxzas7QhPEyIPH0biEVEl1yTFlCv0aOjsuQvphc
         tnu6Fdyy2hR8vMA5/fIEDBbUy3LrOK9hCDzDSdtDC/rkh7c9W5JO7M0tENyqd6nK4aRS
         x0kVKQPHzDCos3VuSbcyvyQimoFoMdp+ZSrDyM1me6fvBlBtbUGa+ARcBY/BFbHeeJIz
         zkZjlo7SOSru/4vBIVy9pmBNnjh/5YJKuKRtS79V6Ist4outLaS4+b2VyjiUxjvU6WUF
         PE+g==
Original-Received: by 10.50.94.196 with SMTP id de4mr6852361igb.17.1343952600415;
        Thu, 02 Aug 2012 17:10:00 -0700 (PDT)
Original-Received: from mit.edu (c-98-246-152-142.hsd1.or.comcast.net. [98.246.152.142])
        by mx.google.com with ESMTPS id va9sm19247869igb.17.2012.08.02.17.09.59
        (version=TLSv1/SSLv3 cipher=OTHER);
        Thu, 02 Aug 2012 17:09:59 -0700 (PDT)
Content-Disposition: inline
User-Agent: Mutt/1.5.21 (2010-09-15)
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1337044
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1337044>

If arch/x86/kernel/cpuid.c is a module, a CPU might offline or online
between the for_each_online_cpu() loop and the call to
register_hotcpu_notifier in cpuid_init or the call to
unregister_hotcpu_notifier in cpuid_exit.  The potential races can
lead to leaks/duplicates, attempts to destroy non-existant devices, or
random pointer dereferences.

For example, in cpuid_exit if:

        for_each_online_cpu(cpu)
                cpuid_device_destroy(cpu);
        class_destroy(cpuid_class);
        __unregister_chrdev(CPUID_MAJOR, 0, NR_CPUS, "cpu/cpuid");
        <----- CPU onlines
        unregister_hotcpu_notifier(&cpuid_class_cpu_notifier);

the hotcpu notifier will attempt to create a device for the
cpuid_class, which the module already destroyed.

This fix surrounds for_each_online_cpu and register_hotcpu_notifier or
unregister_hotcpu_notifier with get_online_cpus+put_online_cpus.

Tested on a VM.

Signed-off-by: Silas Boyd-Wickizer <sbw@mit.edu>
---
 arch/x86/kernel/cpuid.c |    5 +++++
 1 file changed, 5 insertions(+)

diff --git a/arch/x86/kernel/cpuid.c b/arch/x86/kernel/cpuid.c
index 39472dd..60c7891 100644
--- a/arch/x86/kernel/cpuid.c
+++ b/arch/x86/kernel/cpuid.c
@@ -199,12 +199,14 @@ static int __init cpuid_init(void)
 		goto out_chrdev;
 	}
 	cpuid_class->devnode = cpuid_devnode;
+	get_online_cpus();
 	for_each_online_cpu(i) {
 		err = cpuid_device_create(i);
 		if (err != 0)
 			goto out_class;
 	}
 	register_hotcpu_notifier(&cpuid_class_cpu_notifier);
+	put_online_cpus();
 
 	err = 0;
 	goto out;
@@ -214,6 +216,7 @@ out_class:
 	for_each_online_cpu(i) {
 		cpuid_device_destroy(i);
 	}
+	put_online_cpus();
 	class_destroy(cpuid_class);
 out_chrdev:
 	__unregister_chrdev(CPUID_MAJOR, 0, NR_CPUS, "cpu/cpuid");
@@ -225,11 +228,13 @@ static void __exit cpuid_exit(void)
 {
 	int cpu = 0;
 
+	get_online_cpus();
 	for_each_online_cpu(cpu)
 		cpuid_device_destroy(cpu);
 	class_destroy(cpuid_class);
 	__unregister_chrdev(CPUID_MAJOR, 0, NR_CPUS, "cpu/cpuid");
 	unregister_hotcpu_notifier(&cpuid_class_cpu_notifier);
+	put_online_cpus();
 }
 
 module_init(cpuid_init);
-- 
1.7.10.4

