Path: news.gmane.org!not-for-mail
From: Michel Lespinasse <walken@google.com>
Newsgroups: gmane.linux.kernel.mm,gmane.linux.kernel
Subject: [PATCH 3/5] kmemleak: use rbtree instead of prio tree
Date: Tue,  7 Aug 2012 00:25:41 -0700
Lines: 224
Approved: news@gmane.org
Message-ID: <1344324343-3817-4-git-send-email-walken@google.com>
References: <1344324343-3817-1-git-send-email-walken@google.com>
NNTP-Posting-Host: plane.gmane.org
X-Trace: dough.gmane.org 1344324383 10391 80.91.229.3 (7 Aug 2012 07:26:23 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Tue, 7 Aug 2012 07:26:23 +0000 (UTC)
Cc: linux-mm@kvack.org,
	linux-kernel@vger.kernel.org,
	torvalds@linux-foundation.org
To: riel@redhat.com,
	peterz@infradead.org,
	vrajesh@umich.edu,
	daniel.santos@pobox.com,
	aarcange@redhat.com,
	dwmw2@infradead.org,
	akpm@linux-foundation.org
Original-X-From: owner-linux-mm@kvack.org Tue Aug 07 09:26:21 2012
Return-path: <owner-linux-mm@kvack.org>
Envelope-to: glkm-linux-mm-2@m.gmane.org
Original-Received: from kanga.kvack.org ([205.233.56.17])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <owner-linux-mm@kvack.org>)
	id 1SyeBD-0004nP-7J
	for glkm-linux-mm-2@m.gmane.org; Tue, 07 Aug 2012 09:26:15 +0200
Original-Received: by kanga.kvack.org (Postfix)
	id 321876B0074; Tue,  7 Aug 2012 03:26:11 -0400 (EDT)
Delivered-To: linux-mm-outgoing@kvack.org
Original-Received: by kanga.kvack.org (Postfix, from userid 40)
	id 1CE1B6B005D; Tue,  7 Aug 2012 03:26:07 -0400 (EDT)
X-Original-To: int-list-linux-mm@kvack.org
Delivered-To: int-list-linux-mm@kvack.org
Original-Received: by kanga.kvack.org (Postfix, from userid 63042)
	id 30E786B005D; Tue,  7 Aug 2012 03:26:05 -0400 (EDT)
X-Original-To: linux-mm@kvack.org
Delivered-To: linux-mm@kvack.org
Original-Received: from psmtp.com (na3sys010amx101.postini.com [74.125.245.101])
	by kanga.kvack.org (Postfix) with SMTP id 9DD576B006E
	for <linux-mm@kvack.org>; Tue,  7 Aug 2012 03:26:03 -0400 (EDT)
Original-Received: from mail-pb0-f41.google.com ([209.85.160.41]) (using TLSv1) by na3sys010amx101.postini.com ([74.125.244.10]) with SMTP;
	Tue, 07 Aug 2012 07:26:03 GMT
Original-Received: by mail-pb0-f41.google.com with SMTP id jt11so3954282pbb.14
        for <linux-mm@kvack.org>; Tue, 07 Aug 2012 00:26:03 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=from:to:cc:subject:date:message-id:x-mailer:in-reply-to:references;
        bh=WMnHn1L+nyoZarjNlNkeYuhL33vz/HVdbG+NHdVP7Lk=;
        b=ksLb1lKMtLceGXRvagFvG9C9qlPwPtZs26r1m4jb5US9b2+FGtdedJ1VThXOzON6G+
         +A1OzVvGOvpB4COoWMuEtcIkVbzPtjdywAG8VL9o5Hj+dd8DWBgjSlS+OZg5LbUW/Fwd
         N1mtsp5fA1MnXwhIHeTz97V8bB2fRAEjdGyBhuPPwYeqbNzpnaJJ6hDMfcmmv8xznTr/
         jQmaEzK9bihULKSr/SU6v+nzdlVPePiTV2WS/TrfW2QE8fP0bgJkmEDZaVTRVJVS8yR4
         7m7T/RGFlC7lMQDUGHVc2fFsZpV+hgVheif8oEqgAKz7UTQqlakcNVI5KWyGzuBjlxZC
         rLpQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=from:to:cc:subject:date:message-id:x-mailer:in-reply-to:references
         :x-gm-message-state;
        bh=WMnHn1L+nyoZarjNlNkeYuhL33vz/HVdbG+NHdVP7Lk=;
        b=Q3J8zm7D2P17tWmhDTVcdILLKhjE33yT7lVv1EX2vFQq6tIJHXbHFa5BTC8m3RbRE9
         6sq8M6R4Q55C4CLrpvWkrxhmIfidENozE3P+fTmVgVK2uXpKA7V+fbLaf5RdZE0iFaS5
         PKCF5MTqu15aie+GEgjs60JhbWQsO1BDN9NXC5AtqKlSaMcyvP7wWQK5HUCO9lCAqEYS
         GLu44o13RinUOqENOgh2ahI50kxgytFyakBrWmssCVj5rdRl9fLgpL7V/8pZGM6UKpFx
         s4jInz1BlOcbUF/lqEt7JnrFGHLL72tIr6d6Ye7MTfCcQUR1O5HMYmgLmV9EsX54dPp7
         BEEg==
Original-Received: by 10.68.220.193 with SMTP id py1mr25942319pbc.4.1344324363157;
        Tue, 07 Aug 2012 00:26:03 -0700 (PDT)
Original-Received: by 10.68.220.193 with SMTP id py1mr25942295pbc.4.1344324363069;
        Tue, 07 Aug 2012 00:26:03 -0700 (PDT)
Original-Received: from studio.mtv.corp.google.com (studio.mtv.corp.google.com [172.18.96.163])
        by mx.google.com with ESMTPS id qx8sm7210404pbc.63.2012.08.07.00.26.01
        (version=TLSv1/SSLv3 cipher=OTHER);
        Tue, 07 Aug 2012 00:26:02 -0700 (PDT)
X-Mailer: git-send-email 1.7.7.3
In-Reply-To: <1344324343-3817-1-git-send-email-walken@google.com>
X-Gm-Message-State: ALoCoQlbWo1lYLj1G2sADKxmoiLRRyfL8mJTMvdzcPhBBKZ1WLCA3ACnpGw+UR41XUbXk7jvYYXfPOLNVrvGVmV7PFwSUaRNBPoQS41xrlv8RCeDfOCZ1V/7f+pnbTI+yvkQAOeoDfJ0wIPlLQmweYcjg4J35/E3ne1VGxXGPmifjHamPdynJdr7lFhQS+U/JonVIsXRCKU8
X-pstn-levels: (S:99.90000/99.90000 CV:99.9000 FC:95.5390 LC:95.5390 R:95.9108 P:95.9108 M:97.0282 C:98.6951 )
X-pstn-dkim: 1 skipped:not-enabled
X-pstn-settings: 3 (1.0000:0.0100) s cv GT3 gt2 gt1 r p m c 
X-pstn-addresses: from <walken@google.com> [db-null] 
X-Bogosity: Ham, tests=bogofilter, spamicity=0.000000, version=1.2.2
Original-Sender: owner-linux-mm@kvack.org
Precedence: bulk
X-Loop: owner-majordomo@kvack.org
List-ID: <linux-mm.kvack.org>
Xref: news.gmane.org gmane.linux.kernel.mm:83757 gmane.linux.kernel:1338833
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1338833>

kmemleak uses a tree where each node represents an allocated memory object
in order to quickly find out what object a given address is part of.
However, the objects don't overlap, so rbtrees are a better choice than
prio tree for this use. They are both faster and have lower memory overhead.

Tested by booting a kernel with kmemleak enabled, loading the kmemleak_test
module, and looking for the expected messages.

Signed-off-by: Michel Lespinasse <walken@google.com>
---
 mm/kmemleak.c |   98 +++++++++++++++++++++++++++++----------------------------
 1 files changed, 50 insertions(+), 48 deletions(-)

diff --git a/mm/kmemleak.c b/mm/kmemleak.c
index 45eb621..8de1b09 100644
--- a/mm/kmemleak.c
+++ b/mm/kmemleak.c
@@ -29,7 +29,7 @@
  * - kmemleak_lock (rwlock): protects the object_list modifications and
  *   accesses to the object_tree_root. The object_list is the main list
  *   holding the metadata (struct kmemleak_object) for the allocated memory
- *   blocks. The object_tree_root is a priority search tree used to look-up
+ *   blocks. The object_tree_root is a red black tree used to look-up
  *   metadata based on a pointer to the corresponding memory block.  The
  *   kmemleak_object structures are added to the object_list and
  *   object_tree_root in the create_object() function called from the
@@ -71,7 +71,7 @@
 #include <linux/delay.h>
 #include <linux/export.h>
 #include <linux/kthread.h>
-#include <linux/prio_tree.h>
+#include <linux/rbtree.h>
 #include <linux/fs.h>
 #include <linux/debugfs.h>
 #include <linux/seq_file.h>
@@ -132,7 +132,7 @@ struct kmemleak_scan_area {
  * Structure holding the metadata for each allocated memory block.
  * Modifications to such objects should be made while holding the
  * object->lock. Insertions or deletions from object_list, gray_list or
- * tree_node are already protected by the corresponding locks or mutex (see
+ * rb_node are already protected by the corresponding locks or mutex (see
  * the notes on locking above). These objects are reference-counted
  * (use_count) and freed using the RCU mechanism.
  */
@@ -141,7 +141,7 @@ struct kmemleak_object {
 	unsigned long flags;		/* object status flags */
 	struct list_head object_list;
 	struct list_head gray_list;
-	struct prio_tree_node tree_node;
+	struct rb_node rb_node;
 	struct rcu_head rcu;		/* object_list lockless traversal */
 	/* object usage count; object freed when use_count == 0 */
 	atomic_t use_count;
@@ -182,9 +182,9 @@ struct kmemleak_object {
 static LIST_HEAD(object_list);
 /* the list of gray-colored objects (see color_gray comment below) */
 static LIST_HEAD(gray_list);
-/* prio search tree for object boundaries */
-static struct prio_tree_root object_tree_root;
-/* rw_lock protecting the access to object_list and prio_tree_root */
+/* search tree for object boundaries */
+static struct rb_root object_tree_root = RB_ROOT;
+/* rw_lock protecting the access to object_list and object_tree_root */
 static DEFINE_RWLOCK(kmemleak_lock);
 
 /* allocation caches for kmemleak internal data */
@@ -380,7 +380,7 @@ static void dump_object_info(struct kmemleak_object *object)
 	trace.entries = object->trace;
 
 	pr_notice("Object 0x%08lx (size %zu):\n",
-		  object->tree_node.start, object->size);
+		  object->pointer, object->size);
 	pr_notice("  comm \"%s\", pid %d, jiffies %lu\n",
 		  object->comm, object->pid, object->jiffies);
 	pr_notice("  min_count = %d\n", object->min_count);
@@ -392,32 +392,32 @@ static void dump_object_info(struct kmemleak_object *object)
 }
 
 /*
- * Look-up a memory block metadata (kmemleak_object) in the priority search
+ * Look-up a memory block metadata (kmemleak_object) in the object search
  * tree based on a pointer value. If alias is 0, only values pointing to the
  * beginning of the memory block are allowed. The kmemleak_lock must be held
  * when calling this function.
  */
 static struct kmemleak_object *lookup_object(unsigned long ptr, int alias)
 {
-	struct prio_tree_node *node;
-	struct prio_tree_iter iter;
-	struct kmemleak_object *object;
-
-	prio_tree_iter_init(&iter, &object_tree_root, ptr, ptr);
-	node = prio_tree_next(&iter);
-	if (node) {
-		object = prio_tree_entry(node, struct kmemleak_object,
-					 tree_node);
-		if (!alias && object->pointer != ptr) {
+	struct rb_node *rb = object_tree_root.rb_node;
+
+	while (rb) {
+		struct kmemleak_object *object =
+			rb_entry(rb, struct kmemleak_object, rb_node);
+		if (ptr < object->pointer)
+			rb = object->rb_node.rb_left;
+		else if (object->pointer + object->size <= ptr)
+			rb = object->rb_node.rb_right;
+		else if (object->pointer == ptr || alias)
+			return object;
+		else {
 			kmemleak_warn("Found object by alias at 0x%08lx\n",
 				      ptr);
 			dump_object_info(object);
-			object = NULL;
+			break;
 		}
-	} else
-		object = NULL;
-
-	return object;
+	}
+	return NULL;
 }
 
 /*
@@ -471,7 +471,7 @@ static void put_object(struct kmemleak_object *object)
 }
 
 /*
- * Look up an object in the prio search tree and increase its use_count.
+ * Look up an object in the object search tree and increase its use_count.
  */
 static struct kmemleak_object *find_and_get_object(unsigned long ptr, int alias)
 {
@@ -516,8 +516,8 @@ static struct kmemleak_object *create_object(unsigned long ptr, size_t size,
 					     int min_count, gfp_t gfp)
 {
 	unsigned long flags;
-	struct kmemleak_object *object;
-	struct prio_tree_node *node;
+	struct kmemleak_object *object, *parent;
+	struct rb_node **link, *rb_parent;
 
 	object = kmem_cache_alloc(object_cache, gfp_kmemleak_mask(gfp));
 	if (!object) {
@@ -560,31 +560,34 @@ static struct kmemleak_object *create_object(unsigned long ptr, size_t size,
 	/* kernel backtrace */
 	object->trace_len = __save_stack_trace(object->trace);
 
-	INIT_PRIO_TREE_NODE(&object->tree_node);
-	object->tree_node.start = ptr;
-	object->tree_node.last = ptr + size - 1;
-
 	write_lock_irqsave(&kmemleak_lock, flags);
 
 	min_addr = min(min_addr, ptr);
 	max_addr = max(max_addr, ptr + size);
-	node = prio_tree_insert(&object_tree_root, &object->tree_node);
-	/*
-	 * The code calling the kernel does not yet have the pointer to the
-	 * memory block to be able to free it.  However, we still hold the
-	 * kmemleak_lock here in case parts of the kernel started freeing
-	 * random memory blocks.
-	 */
-	if (node != &object->tree_node) {
-		kmemleak_stop("Cannot insert 0x%lx into the object search tree "
-			      "(already existing)\n", ptr);
-		object = lookup_object(ptr, 1);
-		spin_lock(&object->lock);
-		dump_object_info(object);
-		spin_unlock(&object->lock);
 
-		goto out;
+	link = &object_tree_root.rb_node;
+	rb_parent = NULL;
+	while (*link) {
+		rb_parent = *link;
+		parent = rb_entry(rb_parent, struct kmemleak_object, rb_node);
+		if (ptr + size <= parent->pointer)
+			link = &parent->rb_node.rb_left;
+		else if (parent->pointer + parent->size <= ptr)
+			link = &parent->rb_node.rb_right;
+		else {
+			kmemleak_stop("Cannot insert 0x%lx into the object "
+				      "search tree (overlaps existing)\n",
+				      ptr);
+			object = parent;
+			spin_lock(&object->lock);
+			dump_object_info(object);
+			spin_unlock(&object->lock);
+			goto out;
+		}
 	}
+	rb_link_node(&object->rb_node, rb_parent, link);
+	rb_insert_color(&object->rb_node, &object_tree_root);
+
 	list_add_tail_rcu(&object->object_list, &object_list);
 out:
 	write_unlock_irqrestore(&kmemleak_lock, flags);
@@ -600,7 +603,7 @@ static void __delete_object(struct kmemleak_object *object)
 	unsigned long flags;
 
 	write_lock_irqsave(&kmemleak_lock, flags);
-	prio_tree_remove(&object_tree_root, &object->tree_node);
+	rb_erase(&object->rb_node, &object_tree_root);
 	list_del_rcu(&object->object_list);
 	write_unlock_irqrestore(&kmemleak_lock, flags);
 
@@ -1768,7 +1771,6 @@ void __init kmemleak_init(void)
 
 	object_cache = KMEM_CACHE(kmemleak_object, SLAB_NOLEAKTRACE);
 	scan_area_cache = KMEM_CACHE(kmemleak_scan_area, SLAB_NOLEAKTRACE);
-	INIT_PRIO_TREE_ROOT(&object_tree_root);
 
 	if (crt_early_log >= ARRAY_SIZE(early_log))
 		pr_warning("Early log buffer exceeded (%d), please increase "
-- 
1.7.7.3

--
To unsubscribe, send a message with 'unsubscribe linux-mm' in
the body to majordomo@kvack.org.  For more info on Linux MM,
see: http://www.linux-mm.org/ .
Don't email: <a href=mailto:"dont@kvack.org"> email@kvack.org </a>

