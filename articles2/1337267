Path: news.gmane.org!not-for-mail
From: Felipe Balbi <balbi@ti.com>
Newsgroups: gmane.linux.ports.arm.omap,gmane.linux.drivers.devicetree,gmane.linux.documentation,gmane.linux.kernel,gmane.linux.ports.arm.kernel,gmane.linux.usb.general
Subject: Re: [PATCH v6 01/11] drivers: usb: otg: add a new driver for omap
 usb2 phy
Date: Fri, 3 Aug 2012 16:27:09 +0300
Lines: 404
Approved: news@gmane.org
Message-ID: <20120803132708.GC8269@arwen.pp.htv.fi>
References: <1343639400-28725-1-git-send-email-kishon@ti.com>
 <1343639400-28725-2-git-send-email-kishon@ti.com>
Reply-To: balbi@ti.com
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha1;
	protocol="application/pgp-signature"; boundary="TiqCXmo5T1hvSQQg"
X-Trace: dough.gmane.org 1344000649 18798 80.91.229.3 (3 Aug 2012 13:30:49 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Fri, 3 Aug 2012 13:30:49 +0000 (UTC)
Cc: grant.likely@secretlab.ca, rob.herring@calxeda.com,
	rob@landley.net, linux@arm.linux.org.uk,
	gregkh@linuxfoundation.org, b-cousson@ti.com, rnayak@ti.com,
	tony@atomide.com, devicetree-discuss@lists.ozlabs.org,
	linux-doc@vger.kernel.org, linux-kernel@vger.kernel.org,
	linux-arm-kernel@lists.infradead.org, balbi@ti.com,
	linux-omap@vger.kernel.org, linux-usb@vger.kernel.org
To: Kishon Vijay Abraham I <kishon@ti.com>
Original-X-From: linux-omap-owner@vger.kernel.org Fri Aug 03 15:30:46 2012
Return-path: <linux-omap-owner@vger.kernel.org>
Envelope-to: gplao-linux-omap-open-source-moved1@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-omap-owner@vger.kernel.org>)
	id 1SxHxl-0004IR-Gj
	for gplao-linux-omap-open-source-moved1@plane.gmane.org; Fri, 03 Aug 2012 15:30:45 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752876Ab2HCNak (ORCPT
	<rfc822;gplao-linux-omap-open-source-moved1@m.gmane.org>);
	Fri, 3 Aug 2012 09:30:40 -0400
Original-Received: from na3sys009aog120.obsmtp.com ([74.125.149.140]:46433 "EHLO
	na3sys009aog120.obsmtp.com" rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1751703Ab2HCNai (ORCPT
	<rfc822;linux-omap@vger.kernel.org>); Fri, 3 Aug 2012 09:30:38 -0400
Original-Received: from mail-lpp01m010-f47.google.com ([209.85.215.47]) (using TLSv1) by na3sys009aob120.postini.com ([74.125.148.12]) with SMTP
	ID DSNKUBvSfGHQuigR/F0CkwJKuLQKmi0gCvWI@postini.com; Fri, 03 Aug 2012 06:30:37 PDT
Original-Received: by lagv3 with SMTP id v3so86159lag.34
        for <linux-omap@vger.kernel.org>; Fri, 03 Aug 2012 06:30:35 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=date:from:to:cc:subject:message-id:reply-to:references:mime-version
         :content-type:content-disposition:in-reply-to:user-agent
         :x-gm-message-state;
        bh=YnS/FHXpu5cQHkwjFQsLEpmoPCBd2h0jrXwlpodU8Pg=;
        b=fyxaode2uyBGdc2wxVX88uuQg75VQPsNzKVTeoOBSKTKwZlIHM9O/fOMX8xENSNvIn
         YltBUFfURqKvn/SdO+WB4rW9UfeDjuMc7mjA7cvoAUa22hzIeLmbraBHNFFF+07D3h8Q
         Dq3LF49F0fDLcn4vcwZ2xblEZL8y4p6A8r72k7K7yBCTAaPGg21vwpw9tRZiMfIEFegI
         xIYtwyoyN/w/DK6k4OZbaC/1GFA5UPXwdP4jHpYHEJmdL6P+8vYynIFF70bfuBebMQ5M
         kcYZxHWYP3QJY5o6XJw/4SpxUmJTJKfGuV74CSbVCHGpWZipdXTUbgbXacWHc3uN2+/W
         DH0A==
Original-Received: by 10.112.99.71 with SMTP id eo7mr678818lbb.84.1344000635369;
        Fri, 03 Aug 2012 06:30:35 -0700 (PDT)
Original-Received: from localhost (cs78217178.pp.htv.fi. [62.78.217.178])
        by mx.google.com with ESMTPS id s3sm2039878lbk.11.2012.08.03.06.30.33
        (version=TLSv1/SSLv3 cipher=OTHER);
        Fri, 03 Aug 2012 06:30:34 -0700 (PDT)
Content-Disposition: inline
In-Reply-To: <1343639400-28725-2-git-send-email-kishon@ti.com>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-Gm-Message-State: ALoCoQltpXdIw05onXTwny0R6BGeBvYqcR1eSOP+rZ9u7oQSKVzzZHLWImFUEwEBtooU374gG8Ay
Original-Sender: linux-omap-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-omap.vger.kernel.org>
X-Mailing-List: linux-omap@vger.kernel.org
Xref: news.gmane.org gmane.linux.ports.arm.omap:81756 gmane.linux.drivers.devicetree:19007 gmane.linux.documentation:6008 gmane.linux.kernel:1337267 gmane.linux.ports.arm.kernel:180067 gmane.linux.usb.general:68815
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1337267>


--TiqCXmo5T1hvSQQg
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

On Mon, Jul 30, 2012 at 02:39:50PM +0530, Kishon Vijay Abraham I wrote:
> All phy related programming like enabling/disabling the clocks, powering
> on/off the phy is taken care of by this driver. It is also used for OTG
> related functionality like srp.
>=20
> This also includes device tree support for usb2 phy driver and
> the documentation with device tree binding information is updated.
>=20
> Currently writing to control module register is taken care in this
> driver which will be removed once the control module driver is in place.
>=20
> Cc: Felipe Balbi <balbi@ti.com>
> Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
> ---
>  .../devicetree/bindings/bus/omap-ocp2scp.txt       |    3 +
>  Documentation/devicetree/bindings/usb/omap-usb.txt |   17 ++
>  drivers/usb/otg/Kconfig                            |   10 +
>  drivers/usb/otg/Makefile                           |    1 +
>  drivers/usb/otg/omap-usb2.c                        |  280 ++++++++++++++=
++++++

let's move this to drivers/usb/phy/. I'll prepare a patch moving all phy
drivers to that directory after the OTG state machine is ready ;-)

> diff --git a/Documentation/devicetree/bindings/usb/omap-usb.txt b/Documen=
tation/devicetree/bindings/usb/omap-usb.txt
> new file mode 100644
> index 0000000..52f503b
> --- /dev/null
> +++ b/Documentation/devicetree/bindings/usb/omap-usb.txt
> @@ -0,0 +1,17 @@
> +OMAP USB PHY
> +
> +OMAP USB2 PHY
> +
> +Required properties:
> + - compatible: Should be "ti,omap-usb2"
> + - reg : Address and length of the register set for the device. Also
> +add the address of control module dev conf register until a driver for
> +control module is added
> +
> +This is usually a subnode of ocp2scp to which it is connected.
> +
> +usb2phy@4a0ad080 {
> +	compatible =3D "ti,omap-usb2";
> +	reg =3D <0x4a0ad080 0x58>,
> +		<0x4a002300 0x1>;
> +};
> diff --git a/drivers/usb/otg/Kconfig b/drivers/usb/otg/Kconfig
> index 5c87db0..c751db7 100644
> --- a/drivers/usb/otg/Kconfig
> +++ b/drivers/usb/otg/Kconfig
> @@ -78,6 +78,16 @@ config TWL6030_USB
>  	  are hooked to this driver through platform_data structure.
>  	  The definition of internal PHY APIs are in the mach-omap2 layer.
> =20
> +config OMAP_USB2
> +	tristate "OMAP USB2 PHY Driver"
> +	depends on OMAP_OCP2SCP
> +	select USB_OTG_UTILS
> +	help
> +	  Enable this to support the transceiver that is part of SOC. This
> +	  driver takes care of all the PHY functionality apart from comparator.
> +	  The USB OTG controller communicates with the comparator using this
> +	  driver.
> +
>  config NOP_USB_XCEIV
>  	tristate "NOP USB Transceiver Driver"
>  	select USB_OTG_UTILS
> diff --git a/drivers/usb/otg/Makefile b/drivers/usb/otg/Makefile
> index 41aa509..2c2a3ca 100644
> --- a/drivers/usb/otg/Makefile
> +++ b/drivers/usb/otg/Makefile
> @@ -13,6 +13,7 @@ obj-$(CONFIG_USB_GPIO_VBUS)	+=3D gpio_vbus.o
>  obj-$(CONFIG_ISP1301_OMAP)	+=3D isp1301_omap.o
>  obj-$(CONFIG_TWL4030_USB)	+=3D twl4030-usb.o
>  obj-$(CONFIG_TWL6030_USB)	+=3D twl6030-usb.o
> +obj-$(CONFIG_OMAP_USB2)		+=3D omap-usb2.o
>  obj-$(CONFIG_NOP_USB_XCEIV)	+=3D nop-usb-xceiv.o
>  obj-$(CONFIG_USB_ULPI)		+=3D ulpi.o
>  obj-$(CONFIG_USB_ULPI_VIEWPORT)	+=3D ulpi_viewport.o
> diff --git a/drivers/usb/otg/omap-usb2.c b/drivers/usb/otg/omap-usb2.c
> new file mode 100644
> index 0000000..026cb3c
> --- /dev/null
> +++ b/drivers/usb/otg/omap-usb2.c
> @@ -0,0 +1,280 @@
> +/*
> + * omap-usb2.c - USB PHY, talking to musb controller in OMAP.
> + *
> + * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com
> + * This program is free software; you can redistribute it and/or modify
> + * it under the terms of the GNU General Public License as published by
> + * the Free Software Foundation; either version 2 of the License, or
> + * (at your option) any later version.
> + *
> + * Author: Kishon Vijay Abraham I <kishon@ti.com>
> + *
> + * This program is distributed in the hope that it will be useful,
> + * but WITHOUT ANY WARRANTY; without even the implied warranty of
> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
> + * GNU General Public License for more details.
> + *
> + */
> +
> +#include <linux/module.h>
> +#include <linux/platform_device.h>
> +#include <linux/slab.h>
> +#include <linux/of.h>
> +#include <linux/io.h>
> +#include <linux/usb/omap_usb.h>
> +#include <linux/usb/phy_companion.h>
> +#include <linux/clk.h>
> +#include <linux/err.h>
> +#include <linux/pm_runtime.h>
> +#include <linux/delay.h>
> +
> +/**
> + * omap_usb2_set_comparator - links the comparator present in the sytem =
with
> + *	this phy
> + * @comparator - the companion phy(comparator) for this phy
> + *
> + * The phy companion driver should call this API passing the phy_compani=
on
> + * filled with set_vbus and start_srp to be used by usb phy.
> + *
> + * For use by phy companion driver
> + */
> +void omap_usb2_set_comparator(struct phy_companion *comparator)
> +{
> +	struct omap_usb	*phy;
> +	struct usb_phy	*x =3D usb_get_phy(USB_PHY_TYPE_USB2);
> +
> +	if (x) {
> +		phy =3D phy_to_omapusb(x);
> +		phy->comparator =3D comparator;
> +	}
> +}
> +EXPORT_SYMBOL_GPL(omap_usb2_set_comparator);
> +
> +/**
> + * omap_usb_phy_power - power on/off the phy using control module reg
> + * @phy: struct omap_usb *
> + * @on: 0 or 1, based on powering on or off the PHY
> + *
> + * XXX: Remove this function once control module driver gets merged
> + */
> +static void omap_usb_phy_power(struct omap_usb *phy, int on)
> +{
> +	u32 val;
> +
> +	if (on) {
> +		val =3D readl(phy->control_dev);
> +		if (val & PHY_PD) {
> +			writel(~PHY_PD, phy->control_dev);
> +			/* XXX: add proper documentation for this delay */
> +			mdelay(200);
> +		}
> +	} else {
> +		writel(PHY_PD, phy->control_dev);
> +	}
> +}
> +
> +static int omap_usb_set_vbus(struct usb_otg *otg, bool enabled)
> +{
> +	struct omap_usb *phy =3D phy_to_omapusb(otg->phy);
> +
> +	if (!phy->comparator)
> +		return -ENODEV;
> +
> +	return phy->comparator->set_vbus(phy->comparator, enabled);
> +}
> +
> +static int omap_usb_start_srp(struct usb_otg *otg)
> +{
> +	struct omap_usb *phy =3D phy_to_omapusb(otg->phy);
> +
> +	if (!phy->comparator)
> +		return -ENODEV;
> +
> +	return phy->comparator->start_srp(phy->comparator);
> +}
> +
> +static int omap_usb_set_host(struct usb_otg *otg, struct usb_bus *host)
> +{
> +	struct usb_phy	*phy =3D otg->phy;
> +
> +	otg->host =3D host;
> +	if (!host)
> +		phy->state =3D OTG_STATE_UNDEFINED;
> +
> +	return 0;
> +}
> +
> +static int omap_usb_set_peripheral(struct usb_otg *otg,
> +		struct usb_gadget *gadget)
> +{
> +	struct usb_phy	*phy =3D otg->phy;
> +
> +	otg->gadget =3D gadget;
> +	if (!gadget)
> +		phy->state =3D OTG_STATE_UNDEFINED;
> +
> +	return 0;
> +}
> +
> +static int omap_usb2_suspend(struct usb_phy *x, int suspend)
> +{
> +	u32 ret;
> +	struct omap_usb *phy =3D phy_to_omapusb(x);
> +
> +	if (suspend && !phy->is_suspended) {
> +		omap_usb_phy_power(phy, 0);
> +		pm_runtime_put_sync(phy->dev);
> +		phy->is_suspended =3D 1;
> +	} else if (!suspend && phy->is_suspended) {
> +		ret =3D pm_runtime_get_sync(phy->dev);
> +		if (ret < 0) {
> +			dev_err(phy->dev, "get_sync failed with err %d\n",
> +									ret);
> +			return ret;
> +		}
> +		omap_usb_phy_power(phy, 1);
> +		phy->is_suspended =3D 0;
> +	}
> +
> +	return 0;
> +}
> +
> +static int __devinit omap_usb2_probe(struct platform_device *pdev)
> +{
> +	struct omap_usb			*phy;
> +	struct usb_otg			*otg;
> +	struct resource			*res;
> +
> +	phy =3D devm_kzalloc(&pdev->dev, sizeof(*phy), GFP_KERNEL);
> +	if (!phy) {
> +		dev_err(&pdev->dev, "unable to allocate memory for USB2 PHY\n");
> +		return -ENOMEM;
> +	}
> +
> +	otg =3D devm_kzalloc(&pdev->dev, sizeof(*otg), GFP_KERNEL);
> +	if (!otg) {
> +		dev_err(&pdev->dev, "unable to allocate memory for USB OTG\n");
> +		return -ENOMEM;
> +	}
> +
> +	phy->dev		=3D &pdev->dev;
> +
> +	phy->phy.dev		=3D phy->dev;
> +	phy->phy.label		=3D "omap-usb2";
> +	phy->phy.set_suspend	=3D omap_usb2_suspend;
> +	phy->phy.otg		=3D otg;
> +
> +	res =3D platform_get_resource(pdev, IORESOURCE_MEM, 1);
> +
> +	phy->control_dev =3D devm_request_and_ioremap(&pdev->dev, res);
> +	if (phy->control_dev =3D=3D NULL) {
> +		dev_err(&pdev->dev, "Failed to obtain io memory\n");
> +		return -ENXIO;
> +	}
> +
> +	phy->is_suspended	=3D 1;
> +	omap_usb_phy_power(phy, 0);
> +
> +	otg->set_host		=3D omap_usb_set_host;
> +	otg->set_peripheral	=3D omap_usb_set_peripheral;
> +	otg->set_vbus		=3D omap_usb_set_vbus;
> +	otg->start_srp		=3D omap_usb_start_srp;
> +	otg->phy		=3D &phy->phy;
> +
> +	phy->wkupclk =3D devm_clk_get(phy->dev, "usb_phy_cm_clk32k");
> +	if (IS_ERR(phy->wkupclk)) {
> +		dev_err(&pdev->dev, "unable to get usb_phy_cm_clk32k\n");
> +		return PTR_ERR(phy->wkupclk);
> +	}
> +	clk_prepare(phy->wkupclk);
> +
> +	usb_add_phy(&phy->phy, USB_PHY_TYPE_USB2);
> +
> +	platform_set_drvdata(pdev, phy);
> +
> +	pm_runtime_enable(phy->dev);
> +
> +	return 0;
> +}
> +
> +static int __devexit omap_usb2_remove(struct platform_device *pdev)
> +{
> +	struct omap_usb	*phy =3D platform_get_drvdata(pdev);
> +
> +	clk_unprepare(phy->wkupclk);
> +	usb_remove_phy(&phy->phy);
> +	platform_set_drvdata(pdev, NULL);

this platform_set_drvdata() is unnecessary as the pdev object will be
destroyed.

> +	return 0;
> +}
> +
> +#ifdef CONFIG_PM_RUNTIME
> +
> +static int omap_usb2_runtime_suspend(struct device *dev)
> +{
> +	struct platform_device	*pdev =3D to_platform_device(dev);
> +	struct omap_usb	*phy =3D platform_get_drvdata(pdev);
> +
> +	clk_disable(phy->wkupclk);

weird. I would expect the wakeup clock to be enabled on suspend and
disabled on resume. Isn't this causing any unbalanced disable warnings ?

> +
> +	return 0;
> +}
> +
> +static int omap_usb2_runtime_resume(struct device *dev)
> +{
> +	u32 ret =3D 0;
> +	struct platform_device	*pdev =3D to_platform_device(dev);
> +	struct omap_usb	*phy =3D platform_get_drvdata(pdev);
> +
> +	ret =3D clk_enable(phy->wkupclk);
> +	if (ret < 0)
> +		dev_err(phy->dev, "Failed to enable wkupclk %d\n", ret);
> +
> +	return ret;
> +}
> +
> +static const struct dev_pm_ops omap_usb2_pm_ops =3D {
> +	SET_RUNTIME_PM_OPS(omap_usb2_runtime_suspend, omap_usb2_runtime_resume,
> +		NULL)

only runtime ? What about static suspend ? We need this to work also
after a traditional echo mem > /sys/power/state ;-)

> +#ifdef CONFIG_OF
> +static const struct of_device_id omap_usb2_id_table[] =3D {
> +	{ .compatible =3D "ti,omap-usb2" },
> +	{}
> +};
> +MODULE_DEVICE_TABLE(of, omap_usb2_id_table);
> +#endif
> +
> +static struct platform_driver omap_usb2_driver =3D {
> +	.probe		=3D omap_usb2_probe,
> +	.remove		=3D __devexit_p(omap_usb2_remove),
> +	.driver		=3D {
> +		.name	=3D "omap-usb2",
> +		.owner	=3D THIS_MODULE,
> +		.pm	=3D DEV_PM_OPS,
> +		.of_match_table =3D of_match_ptr(omap_usb2_id_table),
> +	},
> +};
> +
> +static int __init usb2_omap_init(void)
> +{
> +	return platform_driver_register(&omap_usb2_driver);
> +}
> +arch_initcall(usb2_omap_init);

I'd really like to see this converted into a module_platform_driver().
If you have dependencies, just make sure to return -EPROBE_DEFER so your
probe gets retried.

--=20
balbi

--TiqCXmo5T1hvSQQg
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: Digital signature

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQIcBAEBAgAGBQJQG9GsAAoJEIaOsuA1yqREt+MP/iVVHaeEJeHBLkm3UhsyZAMp
yaBdwq3LF13IGRQ6qLQodmmk2B1U5eJgnrzszVY3HsTt2wcH3OLcMtKRezHt2D0r
JUSM7o3RfoyZe+fOBAgwxn4VWpQlqUJRtaI1eLYQQDahRBlAR9A+eY7gmlUwehF7
fSk6h47NyA1mNdCCoh8YyGy1hX2dDoyIMDJCMwlRkL8e2b3oOT4S37lNeGOKJZIw
LGF7Ixy7iAp//fFcAPd85NOwUgpf7Y1b1fD4rhOqXlJY28L9qAnBkGP/dAORgg8E
EK9d9XzMQsaWOjXMwID0WvW1TYQMBENelR8sUwIO5I3/bxQX7E5RGiRplBxFdulR
Bk66VfWSUU7G4wQ5M9iTlB2JbwQU8z8pORtXbtGzv/76WWUuYoxJuYd0G20qwg6K
SO3aqJb9ufJRW5jcj/XTLMR6EOb1E7AgX23n5NdAC0rQ4flW2ZklgXsiicMp5890
Eo9nRhg2/Ebfo1FiteOquSN9aPzYZmVkOm4IktWVVtyyTYvvp9h9Pq94Raf9zNoE
sGEUGZ79yiZ8EXGN7ajEdpDAZBPMa+MH8joXqMBL9z0Tyc6bKMw21Jl1EfwWMrpE
3TP6y6uL6OlqAKN8GaSsUSfEQvi0o5TXL67VxNT8XoRezYT63L/rcuPo7QV61zyQ
dT2VkrlR7Jg3iaBC9RSC
=4ty5
-----END PGP SIGNATURE-----

--TiqCXmo5T1hvSQQg--
--
To unsubscribe from this list: send the line "unsubscribe linux-omap" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

