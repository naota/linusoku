Path: news.gmane.org!not-for-mail
From: Michel Lespinasse <walken@google.com>
Newsgroups: gmane.linux.kernel.mm,gmane.linux.kernel
Subject: [PATCH v2 9/9] rbtree: remove prior augmented rbtree implementation
Date: Thu,  2 Aug 2012 15:34:18 -0700
Lines: 233
Approved: news@gmane.org
Message-ID: <1343946858-8170-10-git-send-email-walken@google.com>
References: <1343946858-8170-1-git-send-email-walken@google.com>
NNTP-Posting-Host: plane.gmane.org
X-Trace: dough.gmane.org 1343946895 32709 80.91.229.3 (2 Aug 2012 22:34:55 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Thu, 2 Aug 2012 22:34:55 +0000 (UTC)
Cc: linux-mm@kvack.org,
	linux-kernel@vger.kernel.org,
	torvalds@linux-foundation.org
To: riel@redhat.com,
	peterz@infradead.org,
	daniel.santos@pobox.com,
	aarcange@redhat.com,
	dwmw2@infradead.org,
	akpm@linux-foundation.org
Original-X-From: owner-linux-mm@kvack.org Fri Aug 03 00:34:54 2012
Return-path: <owner-linux-mm@kvack.org>
Envelope-to: glkm-linux-mm-2@m.gmane.org
Original-Received: from kanga.kvack.org ([205.233.56.17])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <owner-linux-mm@kvack.org>)
	id 1Sx3yn-0005Ng-Bc
	for glkm-linux-mm-2@m.gmane.org; Fri, 03 Aug 2012 00:34:53 +0200
Original-Received: by kanga.kvack.org (Postfix)
	id 9BC946B0071; Thu,  2 Aug 2012 18:34:47 -0400 (EDT)
Delivered-To: linux-mm-outgoing@kvack.org
Original-Received: by kanga.kvack.org (Postfix, from userid 40)
	id 7BEC76B0073; Thu,  2 Aug 2012 18:34:47 -0400 (EDT)
X-Original-To: int-list-linux-mm@kvack.org
Delivered-To: int-list-linux-mm@kvack.org
Original-Received: by kanga.kvack.org (Postfix, from userid 63042)
	id 2C3116B0072; Thu,  2 Aug 2012 18:34:46 -0400 (EDT)
X-Original-To: linux-mm@kvack.org
Delivered-To: linux-mm@kvack.org
Original-Received: from psmtp.com (na3sys010amx204.postini.com [74.125.245.204])
	by kanga.kvack.org (Postfix) with SMTP id A6F1E6B0073
	for <linux-mm@kvack.org>; Thu,  2 Aug 2012 18:34:45 -0400 (EDT)
Original-Received: from mail-yw0-f41.google.com ([209.85.213.41]) (using TLSv1) by na3sys010amx204.postini.com ([74.125.244.10]) with SMTP;
	Thu, 02 Aug 2012 22:34:45 GMT
Original-Received: by mail-yw0-f41.google.com with SMTP id 47so71180yhr.14
        for <linux-mm@kvack.org>; Thu, 02 Aug 2012 15:34:45 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=from:to:cc:subject:date:message-id:x-mailer:in-reply-to:references;
        bh=MOY65iXF75axRysjU5DxLZPFNdID6fG/tmg2yEClYDY=;
        b=hXly+iJJnXsX9IjdAbZLAacIW/RGeYBLJo/67il4Pvxim+Yg8WZTmIdswvEmrjkNl5
         LbcNpDRWuSmdh8rgjjn5zvcrCXtcmC+ksoHUfMbLexZUAebJWbwDHkFtNVZ01hA98LAF
         6fYDysgWTfaWeuVdUDq30llj+GPNELQKooN0iYP1aj4bAvmhICKkbp1l53tLpFVPY0WV
         TAIHhmaAwMfMJfptDVP3XOIFggH7ddVX3n+Gmp43bIQscoe1FTI8OuaHIw0mHoOCyvoj
         QYSUiWhMxnegsRfkPcK5jt14+hf+xoiKvuV5AWC1Gf0LFV2FDw+LXxqNGfqQ/GcZTwU8
         o/Eg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=from:to:cc:subject:date:message-id:x-mailer:in-reply-to:references
         :x-gm-message-state;
        bh=MOY65iXF75axRysjU5DxLZPFNdID6fG/tmg2yEClYDY=;
        b=b6f2QQ8uJvf75Ku4NYaQ22+o8PMDWUvtbhe3vNmXaSNxaMbPsfguHK/GWEtKjGdFcK
         1TqyBx/Kd+MxdMa5bn/FDTArD6HgdyamnbM9aKzgbzHgCUJWg9lZWDv85UB5zkaQ5OUH
         cPuZJNfpycvQmZJJ0PWa+GHpVJuY4m3EYpl89Ed6mDvqF9mnI8TBmF3cXFHrwZiGnecK
         X87v0mH6HFLd5BHwjCfC2qoxdJORaoLsPS2tk/5poTmCnJis8zmVwgo8gGSpT+37hZ10
         ZQdCdwMwHKDMrzA4jrHCIh1pfEKf36o9Kw3fbZsD2fytP4NecTEreSzIsfuVucp5G8hd
         EAGA==
Original-Received: by 10.50.217.201 with SMTP id pa9mr6558452igc.54.1343946884582;
        Thu, 02 Aug 2012 15:34:44 -0700 (PDT)
Original-Received: by 10.50.217.201 with SMTP id pa9mr6558425igc.54.1343946884445;
        Thu, 02 Aug 2012 15:34:44 -0700 (PDT)
Original-Received: from studio.mtv.corp.google.com (studio.mtv.corp.google.com [172.18.96.163])
        by mx.google.com with ESMTPS id pp4sm16344211igb.5.2012.08.02.15.34.43
        (version=TLSv1/SSLv3 cipher=OTHER);
        Thu, 02 Aug 2012 15:34:43 -0700 (PDT)
X-Mailer: git-send-email 1.7.7.3
In-Reply-To: <1343946858-8170-1-git-send-email-walken@google.com>
X-Gm-Message-State: ALoCoQkjFwX6uhmPZHlfShBgObWK3ZNikIH0oKvfVzBm20QTl/MwTz7I+CduRJn/54enKH8rTokova9arYWqvAMt7P09TJy55mcIoNfE/pU41m/hux7AY4Ax0QA9go5fqOXucH3+tmRHZurK/0o0/yP9z7//YF3QrqLgRR353QD14WYzsvvZLC8vNI4KP/H5dTZY9RIAI0U8
X-pstn-neptune: 0/0/0.00/0
X-pstn-levels: (S:95.16293/99.90000 CV:99.9000 FC:95.5390 LC:95.5390 R:95.9108 P:95.9108 M:97.0282 C:98.6951 )
X-pstn-dkim: 1 skipped:not-enabled
X-pstn-settings: 3 (1.0000:0.0100) s cv GT3 gt2 gt1 r p m c 
X-pstn-addresses: from <walken@google.com> [db-null] 
X-Bogosity: Ham, tests=bogofilter, spamicity=0.000000, version=1.2.2
Original-Sender: owner-linux-mm@kvack.org
Precedence: bulk
X-Loop: owner-majordomo@kvack.org
List-ID: <linux-mm.kvack.org>
Xref: news.gmane.org gmane.linux.kernel.mm:83510 gmane.linux.kernel:1337022
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1337022>

convert arch/x86/mm/pat_rbtree.c to the proposed augmented rbtree api
and remove the old augmented rbtree implementation.

Signed-off-by: Michel Lespinasse <walken@google.com>
---
 arch/x86/mm/pat_rbtree.c |   65 +++++++++++++++++++++++++++++------------
 include/linux/rbtree.h   |    8 -----
 lib/rbtree.c             |   71 ----------------------------------------------
 3 files changed, 46 insertions(+), 98 deletions(-)

diff --git a/arch/x86/mm/pat_rbtree.c b/arch/x86/mm/pat_rbtree.c
index 8acaddd..7e1515b 100644
--- a/arch/x86/mm/pat_rbtree.c
+++ b/arch/x86/mm/pat_rbtree.c
@@ -54,29 +54,57 @@ static u64 get_subtree_max_end(struct rb_node *node)
 	return ret;
 }
 
-/* Update 'subtree_max_end' for a node, based on node and its children */
-static void memtype_rb_augment_cb(struct rb_node *node, void *__unused)
+static u64 compute_subtree_max_end(struct memtype *data)
 {
-	struct memtype *data;
-	u64 max_end, child_max_end;
-
-	if (!node)
-		return;
-
-	data = container_of(node, struct memtype, rb);
-	max_end = data->end;
+	u64 max_end = data->end, child_max_end;
 
-	child_max_end = get_subtree_max_end(node->rb_right);
+	child_max_end = get_subtree_max_end(data->rb.rb_right);
 	if (child_max_end > max_end)
 		max_end = child_max_end;
 
-	child_max_end = get_subtree_max_end(node->rb_left);
+	child_max_end = get_subtree_max_end(data->rb.rb_left);
 	if (child_max_end > max_end)
 		max_end = child_max_end;
 
-	data->subtree_max_end = max_end;
+	return max_end;
+}
+
+/* Update 'subtree_max_end' for node and its parents */
+static void memtype_rb_propagate_cb(struct rb_node *node, struct rb_node *stop)
+{
+	while (node != stop) {
+		struct memtype *data = container_of(node, struct memtype, rb);
+		u64 subtree_max_end = compute_subtree_max_end(data);
+		if (data->subtree_max_end == subtree_max_end)
+			break;
+		data->subtree_max_end = subtree_max_end;
+		node = rb_parent(&data->rb);
+	}
+}
+
+static void memtype_rb_copy_cb(struct rb_node *old, struct rb_node *new)
+{
+	struct memtype *old_data = container_of(old, struct memtype, rb);
+	struct memtype *new_data = container_of(new, struct memtype, rb);
+
+	new_data->subtree_max_end = old_data->subtree_max_end;
 }
 
+/* Update 'subtree_max_end' after tree rotation. old and new are the
+ * former and current subtree roots */
+static void memtype_rb_rotate_cb(struct rb_node *old, struct rb_node *new)
+{
+	struct memtype *old_data = container_of(old, struct memtype, rb);
+	struct memtype *new_data = container_of(new, struct memtype, rb);
+
+	new_data->subtree_max_end = old_data->subtree_max_end;
+	old_data->subtree_max_end = compute_subtree_max_end(old_data);
+}
+
+static const struct rb_augment_callbacks memtype_rb_augment_cb = {
+	memtype_rb_propagate_cb, memtype_rb_copy_cb, memtype_rb_rotate_cb
+};
+
 /* Find the first (lowest start addr) overlapping range from rb tree */
 static struct memtype *memtype_rb_lowest_match(struct rb_root *root,
 				u64 start, u64 end)
@@ -179,15 +207,17 @@ static void memtype_rb_insert(struct rb_root *root, struct memtype *newdata)
 		struct memtype *data = container_of(*node, struct memtype, rb);
 
 		parent = *node;
+		if (data->subtree_max_end < newdata->end)
+			data->subtree_max_end = newdata->end;
 		if (newdata->start <= data->start)
 			node = &((*node)->rb_left);
 		else if (newdata->start > data->start)
 			node = &((*node)->rb_right);
 	}
 
+	newdata->subtree_max_end = newdata->end;
 	rb_link_node(&newdata->rb, parent, node);
-	rb_insert_color(&newdata->rb, root);
-	rb_augment_insert(&newdata->rb, memtype_rb_augment_cb, NULL);
+	rb_insert_augmented(&newdata->rb, root, &memtype_rb_augment_cb);
 }
 
 int rbt_memtype_check_insert(struct memtype *new, unsigned long *ret_type)
@@ -209,16 +239,13 @@ int rbt_memtype_check_insert(struct memtype *new, unsigned long *ret_type)
 
 struct memtype *rbt_memtype_erase(u64 start, u64 end)
 {
-	struct rb_node *deepest;
 	struct memtype *data;
 
 	data = memtype_rb_exact_match(&memtype_rbroot, start, end);
 	if (!data)
 		goto out;
 
-	deepest = rb_augment_erase_begin(&data->rb);
-	rb_erase(&data->rb, &memtype_rbroot);
-	rb_augment_erase_end(deepest, memtype_rb_augment_cb, NULL);
+	rb_erase_augmented(&data->rb, &memtype_rbroot, &memtype_rb_augment_cb);
 out:
 	return data;
 }
diff --git a/include/linux/rbtree.h b/include/linux/rbtree.h
index c902eb9..4ace31b 100644
--- a/include/linux/rbtree.h
+++ b/include/linux/rbtree.h
@@ -80,14 +80,6 @@ rb_insert_augmented(struct rb_node *node, struct rb_root *root,
 }
 
 
-typedef void (*rb_augment_f)(struct rb_node *node, void *data);
-
-extern void rb_augment_insert(struct rb_node *node,
-			      rb_augment_f func, void *data);
-extern struct rb_node *rb_augment_erase_begin(struct rb_node *node);
-extern void rb_augment_erase_end(struct rb_node *node,
-				 rb_augment_f func, void *data);
-
 /* Find logical next and previous nodes in a tree */
 extern struct rb_node *rb_next(const struct rb_node *);
 extern struct rb_node *rb_prev(const struct rb_node *);
diff --git a/lib/rbtree.c b/lib/rbtree.c
index 11c11e9..e45eed1 100644
--- a/lib/rbtree.c
+++ b/lib/rbtree.c
@@ -537,77 +537,6 @@ void rb_erase_augmented(struct rb_node *node, struct rb_root *root,
 }
 EXPORT_SYMBOL(rb_erase_augmented);
 
-static void rb_augment_path(struct rb_node *node, rb_augment_f func, void *data)
-{
-	struct rb_node *parent;
-
-up:
-	func(node, data);
-	parent = rb_parent(node);
-	if (!parent)
-		return;
-
-	if (node == parent->rb_left && parent->rb_right)
-		func(parent->rb_right, data);
-	else if (parent->rb_left)
-		func(parent->rb_left, data);
-
-	node = parent;
-	goto up;
-}
-
-/*
- * after inserting @node into the tree, update the tree to account for
- * both the new entry and any damage done by rebalance
- */
-void rb_augment_insert(struct rb_node *node, rb_augment_f func, void *data)
-{
-	if (node->rb_left)
-		node = node->rb_left;
-	else if (node->rb_right)
-		node = node->rb_right;
-
-	rb_augment_path(node, func, data);
-}
-EXPORT_SYMBOL(rb_augment_insert);
-
-/*
- * before removing the node, find the deepest node on the rebalance path
- * that will still be there after @node gets removed
- */
-struct rb_node *rb_augment_erase_begin(struct rb_node *node)
-{
-	struct rb_node *deepest;
-
-	if (!node->rb_right && !node->rb_left)
-		deepest = rb_parent(node);
-	else if (!node->rb_right)
-		deepest = node->rb_left;
-	else if (!node->rb_left)
-		deepest = node->rb_right;
-	else {
-		deepest = rb_next(node);
-		if (deepest->rb_right)
-			deepest = deepest->rb_right;
-		else if (rb_parent(deepest) != node)
-			deepest = rb_parent(deepest);
-	}
-
-	return deepest;
-}
-EXPORT_SYMBOL(rb_augment_erase_begin);
-
-/*
- * after removal, update the tree to account for the removed entry
- * and any rebalance damage.
- */
-void rb_augment_erase_end(struct rb_node *node, rb_augment_f func, void *data)
-{
-	if (node)
-		rb_augment_path(node, func, data);
-}
-EXPORT_SYMBOL(rb_augment_erase_end);
-
 /*
  * This function returns the first node (in sort order) of the tree.
  */
-- 
1.7.7.3

--
To unsubscribe, send a message with 'unsubscribe linux-mm' in
the body to majordomo@kvack.org.  For more info on Linux MM,
see: http://www.linux-mm.org/ .
Don't email: <a href=mailto:"dont@kvack.org"> email@kvack.org </a>

