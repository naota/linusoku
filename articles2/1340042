Path: news.gmane.org!not-for-mail
From: Jeff Layton <jlayton@redhat.com>
Newsgroups: gmane.linux.kernel,gmane.linux.file-systems,gmane.linux.nfs
Subject: [PATCH v5 16/19] vfs: have do_sys_truncate retry once on an ESTALE error
Date: Wed,  8 Aug 2012 09:21:39 -0400
Lines: 126
Approved: news@gmane.org
Message-ID: <1344432102-22312-17-git-send-email-jlayton@redhat.com>
References: <1344432102-22312-1-git-send-email-jlayton@redhat.com>
NNTP-Posting-Host: plane.gmane.org
X-Trace: dough.gmane.org 1344432212 31503 80.91.229.3 (8 Aug 2012 13:23:32 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Wed, 8 Aug 2012 13:23:32 +0000 (UTC)
Cc: linux-fsdevel@vger.kernel.org, linux-nfs@vger.kernel.org,
	linux-kernel@vger.kernel.org, michael.brantley@deshaw.com,
	hch@infradead.org, miklos@szeredi.hu, pstaubach@exagrid.com
To: viro@ZenIV.linux.org.uk
Original-X-From: linux-kernel-owner@vger.kernel.org Wed Aug 08 15:23:31 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1Sz6ET-0007Px-F1
	for glk-linux-kernel-3@plane.gmane.org; Wed, 08 Aug 2012 15:23:29 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1758572Ab2HHNXX (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Wed, 8 Aug 2012 09:23:23 -0400
Original-Received: from mail-yw0-f46.google.com ([209.85.213.46]:36554 "EHLO
	mail-yw0-f46.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1758504Ab2HHNWK (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Wed, 8 Aug 2012 09:22:10 -0400
Original-Received: by mail-yw0-f46.google.com with SMTP id m54so724654yhm.19
        for <linux-kernel@vger.kernel.org>; Wed, 08 Aug 2012 06:22:09 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=sender:from:to:cc:subject:date:message-id:x-mailer:in-reply-to
         :references:x-gm-message-state;
        bh=Davuijoc1nx0+QOiKlipfuzZ2gOyKeDrukOMQ3kVDT8=;
        b=cTOLgopROiMLVc72BqFleCNw12Fc92c6Qn+Zxt3ycQ6LsconAYR8aVPIqVACEheG7Z
         NwrVXICfkHMRfV07MwN/wr7Iepy/Opw+8j7XToV06/NpTvozDXVUwNDzY3MB+VA0uNSY
         HbNQ7iRm55HoXbepVXzxra4RcK2hv5uyzoxPrV+5T1KgIonNJ/Lw+Tke9iB6jlSVfb0v
         7fm8Kie3QJrFiw/MQXJKos3ccRyhUsY/LxouzKMSpmU/WHp5aNT7/PTarQDB+5CLqfCW
         /lMXFjsoqkVthvQ2CkOPJ7zAxQd+I5MAZ5Cs2F6KATc/B9X0Hxsfl50Oa0sOiIZXgkGc
         sFjw==
Original-Received: by 10.236.140.67 with SMTP id d43mr16598566yhj.19.1344432129850;
        Wed, 08 Aug 2012 06:22:09 -0700 (PDT)
Original-Received: from salusa.poochiereds.net (cpe-069-134-145-027.nc.res.rr.com. [69.134.145.27])
        by mx.google.com with ESMTPS id l1sm24418002yhm.19.2012.08.08.06.22.08
        (version=SSLv3 cipher=OTHER);
        Wed, 08 Aug 2012 06:22:09 -0700 (PDT)
X-Mailer: git-send-email 1.7.11.2
In-Reply-To: <1344432102-22312-1-git-send-email-jlayton@redhat.com>
X-Gm-Message-State: ALoCoQnIdUH1bAPjoa/N0i3STVTgC6b5ytMyZfD23VYZHhaYSZaQZbdJMnQPMQMnr9H9SviwZnia
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1340042 gmane.linux.file-systems:66463 gmane.linux.nfs:51367
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1340042>

Signed-off-by: Jeff Layton <jlayton@redhat.com>
---
 fs/open.c | 92 +++++++++++++++++++++++++++++++++++----------------------------
 1 file changed, 51 insertions(+), 41 deletions(-)

diff --git a/fs/open.c b/fs/open.c
index 7babeed..0df0c5d 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -66,62 +66,72 @@ static long do_sys_truncate(const char __user *pathname, loff_t length)
 	struct path path;
 	struct inode *inode;
 	int error;
+	unsigned int lookup_flags = LOOKUP_FOLLOW;
+	unsigned int try = 0;
+	char *name;
 
-	error = -EINVAL;
 	if (length < 0)	/* sorry, but loff_t says... */
-		goto out;
+		return -EINVAL;
 
-	error = user_path(pathname, &path);
-	if (error)
-		goto out;
-	inode = path.dentry->d_inode;
+	name = getname_flags(pathname, lookup_flags, NULL);
+	if (IS_ERR(name))
+		return PTR_ERR(name);
 
-	/* For directories it's -EISDIR, for other non-regulars - -EINVAL */
-	error = -EISDIR;
-	if (S_ISDIR(inode->i_mode))
-		goto dput_and_out;
+	do {
+		error = kern_path_at(AT_FDCWD, name, lookup_flags, &path);
+		if (error)
+			break;
+		inode = path.dentry->d_inode;
 
-	error = -EINVAL;
-	if (!S_ISREG(inode->i_mode))
-		goto dput_and_out;
+		/* For dirs, -EISDIR. For other non-regulars, -EINVAL */
+		error = -EISDIR;
+		if (S_ISDIR(inode->i_mode))
+			goto dput_and_out;
 
-	error = mnt_want_write(path.mnt);
-	if (error)
-		goto dput_and_out;
+		error = -EINVAL;
+		if (!S_ISREG(inode->i_mode))
+			goto dput_and_out;
 
-	error = inode_permission(inode, MAY_WRITE);
-	if (error)
-		goto mnt_drop_write_and_out;
+		error = mnt_want_write(path.mnt);
+		if (error)
+			goto dput_and_out;
 
-	error = -EPERM;
-	if (IS_APPEND(inode))
-		goto mnt_drop_write_and_out;
+		error = inode_permission(inode, MAY_WRITE);
+		if (error)
+			goto mnt_drop_write_and_out;
 
-	error = get_write_access(inode);
-	if (error)
-		goto mnt_drop_write_and_out;
+		error = -EPERM;
+		if (IS_APPEND(inode))
+			goto mnt_drop_write_and_out;
 
-	/*
-	 * Make sure that there are no leases.  get_write_access() protects
-	 * against the truncate racing with a lease-granting setlease().
-	 */
-	error = break_lease(inode, O_WRONLY);
-	if (error)
-		goto put_write_and_out;
+		error = get_write_access(inode);
+		if (error)
+			goto mnt_drop_write_and_out;
 
-	error = locks_verify_truncate(inode, NULL, length);
-	if (!error)
-		error = security_path_truncate(&path);
-	if (!error)
-		error = do_truncate(path.dentry, length, 0, NULL);
+		/*
+		 * Make sure that there are no leases. get_write_access()
+		 * protects against the truncate racing with a lease-granting
+		 * setlease().
+		 */
+		error = break_lease(inode, O_WRONLY);
+		if (error)
+			goto put_write_and_out;
+
+		error = locks_verify_truncate(inode, NULL, length);
+		if (!error)
+			error = security_path_truncate(&path);
+		if (!error)
+			error = do_truncate(path.dentry, length, 0, NULL);
 
 put_write_and_out:
-	put_write_access(inode);
+		put_write_access(inode);
 mnt_drop_write_and_out:
-	mnt_drop_write(path.mnt);
+		mnt_drop_write(path.mnt);
 dput_and_out:
-	path_put(&path);
-out:
+		path_put(&path);
+		lookup_flags |= LOOKUP_REVAL;
+	} while (retry_estale(error, try++));
+	putname(name);
 	return error;
 }
 
-- 
1.7.11.2

