Path: news.gmane.org!not-for-mail
From: "Alexis R. Cortes" <alexis.cortes-l0cyMroinI0@public.gmane.org>
Newsgroups: gmane.linux.usb.general,gmane.linux.kernel
Subject: Re: FW: FW: [PATCH] usb: host: xhci: Fix Compliance Mode on SN65LVPE502CP
 Hardware
Date: Fri, 3 Aug 2012 13:09:36 -0500
Lines: 376
Approved: news@gmane.org
Message-ID: <501C13E0.9040400@ti.com>
References: <00c901cd71a1$4f337c60$ed9a7520$@cortes@ti.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset="ISO-8859-1"
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1344017374 1202 80.91.229.3 (3 Aug 2012 18:09:34 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Fri, 3 Aug 2012 18:09:34 +0000 (UTC)
Cc: <gregkh-hQyY1W1yCW8ekmWlsbkhG0B+6BGkLq7r@public.gmane.org>, <linux-usb-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>,
	<linux-kernel-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>, <brian.quach-l0cyMroinI0@public.gmane.org>,
	<jorge.llamas-l0cyMroinI0@public.gmane.org>
To: <sarah.a.sharp-VuQAYsv1563Yd54FQh9/CA@public.gmane.org>
Original-X-From: linux-usb-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org Fri Aug 03 20:09:32 2012
Return-path: <linux-usb-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>
Envelope-to: glug-linux-usb-wOFGN7rlS/M9smdsby/KFg@public.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-usb-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>)
	id 1SxMJX-00035W-Vo
	for glug-linux-usb-wOFGN7rlS/M9smdsby/KFg@public.gmane.org; Fri, 03 Aug 2012 20:09:32 +0200
Original-Received: (majordomo-u79uwXL29TY76Z2rM5mHXA@public.gmane.org) by vger.kernel.org via listexpand
	id S1751716Ab2HCSJ3 (ORCPT <rfc822;glug-linux-usb@m.gmane.org>);
	Fri, 3 Aug 2012 14:09:29 -0400
Original-Received: from comal.ext.ti.com ([198.47.26.152]:35763 "EHLO comal.ext.ti.com"
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752328Ab2HCSJ2 (ORCPT <rfc822;linux-usb-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>);
	Fri, 3 Aug 2012 14:09:28 -0400
Original-Received: from dlelxv30.itg.ti.com ([172.17.2.17])
	by comal.ext.ti.com (8.13.7/8.13.7) with ESMTP id q73I9PLB028859;
	Fri, 3 Aug 2012 13:09:25 -0500
Original-Received: from DFLE72.ent.ti.com (dfle72.ent.ti.com [128.247.5.109])
	by dlelxv30.itg.ti.com (8.13.8/8.13.8) with ESMTP id q73I9Pgw019383;
	Fri, 3 Aug 2012 13:09:25 -0500
Original-Received: from dlelxv23.itg.ti.com (172.17.1.198) by dfle72.ent.ti.com
 (128.247.5.109) with Microsoft SMTP Server id 14.1.323.3; Fri, 3 Aug 2012
 13:09:25 -0500
Original-Received: from [157.87.206.198] (dlep21.itg.ti.com [157.170.170.26])	by
 dlelxv23.itg.ti.com (8.13.8/8.13.8) with ESMTP id q73I9OB8032354;	Fri, 3 Aug
 2012 13:09:24 -0500
User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20120713 Thunderbird/14.0
In-Reply-To: <00c901cd71a1$4f337c60$ed9a7520$@cortes-l0cyMroinI0@public.gmane.org>
Original-Sender: linux-usb-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org
Precedence: bulk
List-ID: <linux-usb.vger.kernel.org>
X-Mailing-List: linux-usb-u79uwXL29TY76Z2rM5mHXA@public.gmane.org
Xref: news.gmane.org gmane.linux.usb.general:68867 gmane.linux.kernel:1337470
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1337470>

Hi Sarah,

I'll perform the code style changes you mentioned and will submit the patch.

Regarding your remark about deleting the timer on suspend and re-initializing on resume 'always' (only if the system is subject to the quirk), the reason of doing this is that when the system resumes from suspend, it doesn't matter if all ports had entered U0 before the system suspension, the Compliance Mode issue could hit again after resume, so it is like starting everything again, that is why on the compliance_mode_recovery_timer_init() function I'm reinitializing the 'xhci->port_status_u0' to 0. I'll add a comment mentioning this behavior on the description of the patch and also on the code.

Best Regards,
Alexis Cortes. 

> -----Original Message-----
> From: Sarah Sharp [mailto:sarah.a.sharp-VuQAYsv1563Yd54FQh9/CA@public.gmane.org] 
> Sent: Friday, August 03, 2012 12:22 PM
> To: Alexis R. Cortes
> Cc: gregkh-hQyY1W1yCW8ekmWlsbkhG0B+6BGkLq7r@public.gmane.org; linux-usb-u79uwXL29TY76Z2rM5mHXA@public.gmane.org;
> linux-kernel-u79uwXL29TY76Z2rM5mHXA@public.gmane.org; brian.quach-l0cyMroinI0@public.gmane.org; jorge.llamas-l0cyMroinI0@public.gmane.org
> Subject: Re: FW: [PATCH] usb: host: xhci: Fix Compliance Mode on
> SN65LVPE502CP Hardware
> 
> On Thu, Aug 02, 2012 at 05:11:30PM -0500, Alexis R. Cortes wrote:
>> Hi Sarah,
>>
>> I have rewritten my code following your recommendations. Could you please
> review it and give your comments? If everything is fine I'll proceed to
> generate the patch and submit it.
> 
> I have a couple style comments and one potential code behavior issue.
> 
>> The description of my patch is:
>> ----------------------------------------------------------------------
>> -----
>> usb: host: xhci: Fix Compliance Mode on SN65LVPE502CP Hardware
>>
>> This patch is intended to work around a known issue on the 
>> SN65LVPE502CP USB3.0 re-driver that can delay the negotiation between 
>> a device and the host past the usual handshake timeout.
>>
>> If that happens on the first insertion, the host controller port will 
>> enter in Compliance Mode and NO port status event will be generated 
>> (as per xHCI Spec) making impossible to detect this event by software. 
>> The port will remain in compliance mode until a warm reset is applied 
>> to it.
>>
>> As a result of this, the port will seem "dead" to the user and no 
>> device connections or disconnections will be detected.
>>
>> For solving this, the patch creates a timer which polls every 2 
>> seconds the link state of each host controller's port (this by reading 
>> the PORTSC register) and recovers the port by issuing a Warm reset 
>> every time Compliance mode is detected.
>>
>> Since the issue is being caused by a piece of hardware, the timer will 
>> be enabled ONLY on those systems that have the SN65LVPE502CP installed 
>> (this patch uses DMI strings for detecting those systems) therefore 
>> making this patch to act as a quirk (XHCI_COMP_MODE_QUIRK has been 
>> added to the xhci stack).
>>
>> This patch applies for these systems: 
>> Vendor: Hewlett-Packard. System Models: Z420, Z620 and Z820.
>> ----------------------------------------------------------------------
>> -----
>>
>> The 'git diff' of my change is as follows:
>>
>> diff --git a/drivers/usb/host/xhci-hub.c b/drivers/usb/host/xhci-hub.c 
>> index 7b01094..3a3c614 100644
>> --- a/drivers/usb/host/xhci-hub.c
>> +++ b/drivers/usb/host/xhci-hub.c
>> @@ -493,11 +493,47 @@ static void xhci_hub_report_link_state(u32 *status,
> u32 status_reg)
>>                  * when this bit is set.
>>                  */
>>                 pls |= USB_PORT_STAT_CONNECTION;
>> +       } else {
>> +               /*
>> +                * If CAS bit isn't set but the Port is already at
>> +                * Compliance Mode, fake a connection so the USB core
>> +                * notices the Compliance state and resets the port.
>> +                * This resolves an issue generated by the SN65LVPE502CP
>> +                * in which sometimes the port enters compliance mode
>> +                * caused by a delay on the host-device negotiation.
>> +                */
>> +               if (pls == USB_SS_PORT_LS_COMP_MOD)
>> +                       pls |= USB_PORT_STAT_CONNECTION;
>>         }
>> +
>>         /* update status field */
>>         *status |= pls;
>>  }
>>  
> 
> Function comments need a blank line at the top, like so:
> 
> /*
>  * Function comment.
>  */
> void xhci_del_comp_mod_timer(struct xhci_hcd *xhci, u32 status, u16 wIndex)
> 
> 
>> +/* Function for Compliance Mode Quirk.
>> + *
>> + * This Function verifies if all xhc USB3 ports have entered U0, if 
>> +so,
>> + * the compliance mode timer is deleted. A port won't enter
>> + * compliance mode if it has previously entered U0.
>> + */
>> +void xhci_del_comp_mod_timer(struct xhci_hcd *xhci, u32 status, u16 
>> +wIndex) {
>> +       u32 all_ports_seen_u0 = ((1 << xhci->num_usb3_ports)-1);
>> +       bool port_in_u0 = ((status & PORT_PLS_MASK) == XDEV_U0);
>> +
>> +       if (!(xhci->quirks & XHCI_COMP_MODE_QUIRK))
>> +               return;
>> +
>> +       if ((xhci->port_status_u0 != all_ports_seen_u0) && port_in_u0) {
>> +               xhci->port_status_u0 |= 1 << wIndex;
>> +               if (xhci->port_status_u0 == all_ports_seen_u0) {
>> +                       del_timer_sync(&xhci->comp_mode_recovery_timer);
>> +                       xhci_dbg(xhci, "All USB3 ports have entered U0
> already!\n");
>> +                       xhci_dbg(xhci, "Compliance Mode Recovery Timer
> Deleted.\n");
>> +               }
>> +       }
>> +}
>> +
>>  int xhci_hub_control(struct usb_hcd *hcd, u16 typeReq, u16 wValue,
>>                 u16 wIndex, char *buf, u16 wLength)  { @@ -645,6 
>> +681,11 @@ int xhci_hub_control(struct usb_hcd *hcd, u16 typeReq, u16
> wValue,
>>                 /* Update Port Link State for super speed ports*/
>>                 if (hcd->speed == HCD_USB3) {
>>                         xhci_hub_report_link_state(&status, temp);
>> +                       /*
>> +                        * Verify if all USB3 Ports Have entered U0
> already.
>> +                        * Delete Compliance Mode Timer if so.
>> +                        */
>> +                       xhci_del_comp_mod_timer(xhci, temp, wIndex);
>>                 }
>>                 if (bus_state->port_c_suspend & (1 << wIndex))
>>                         status |= 1 << USB_PORT_FEAT_C_SUSPEND; diff 
>> --git a/drivers/usb/host/xhci.c b/drivers/usb/host/xhci.c index 
>> a979cd0..9c18375 100644
>> --- a/drivers/usb/host/xhci.c
>> +++ b/drivers/usb/host/xhci.c
>> @@ -26,6 +26,7 @@
>>  #include <linux/module.h>
>>  #include <linux/moduleparam.h>
>>  #include <linux/slab.h>
>> +#include <linux/dmi.h>
>>  
>>  #include "xhci.h"
>>  
>> @@ -397,6 +398,97 @@ static void xhci_msix_sync_irqs(struct xhci_hcd 
>> *xhci)
>>  
>>  #endif
>>  
>> +static void compliance_mode_recovery(unsigned long arg) {
>> +       struct xhci_hcd *xhci;
>> +       struct usb_hcd *hcd;
>> +       u32 temp;
>> +       int i;
>> +
>> +       xhci = (struct xhci_hcd *)arg;
>> +
>> +       for (i = 0; i < xhci->num_usb3_ports; i++) {
>> +               temp = xhci_readl(xhci, xhci->usb3_ports[i]);
>> +               if ((temp & PORT_PLS_MASK) == USB_SS_PORT_LS_COMP_MOD) {
>> +                       /*
>> +                        * Compliance Mode Detected. Letting USB Core
>> +                        * handle the Warm Reset
>> +                        */
>> +                       xhci_dbg(xhci, "Compliance Mode Detected->Port
> %d!\n",
>> +                                       i + 1);
>> +                       xhci_dbg(xhci, "Attempting Recovery routine!\n");
>> +                       hcd = xhci->shared_hcd;
>> +
>> +                       if (hcd->state == HC_STATE_SUSPENDED)
>> +                               usb_hcd_resume_root_hub(hcd);
>> +
>> +                       usb_hcd_poll_rh_status(hcd);
>> +               }
>> +       }
>> +
>> +       if (xhci->port_status_u0 != ((1 << xhci->num_usb3_ports)-1))
>> +               mod_timer(&xhci->comp_mode_recovery_timer,
>> +                       jiffies + 
>> +msecs_to_jiffies(COMP_MODE_RCVRY_MSECS));
>> +}
>> +
>> +/*
>> + * Quirk to work around issue generated by the SN65LVPE502CP USB3.0 
>> +re-driver
>> + * that causes ports behind that hardware to enter compliance mode
> sometimes.
>> + * The quirk creates a timer that polls every 2 seconds the link 
>> +state of
>> + * each host controller's port and recovers it by issuing a Warm 
>> +reset
>> + * if Compliance mode is detected, otherwise the port will become 
>> +"dead" (no
>> + * device connections or disconnections will be detected anymore). 
>> +Becasue no
>> + * status event is generated when entering compliance mode (per xhci 
>> +spec),
>> + * this quirk is needed on systems that have the failing hardware
> installed.
>> + */
>> +
> 
> Don't put a newline between the comment and the function.  If someone
> converts the function comment to kernel doc style, I don't think the tools
> will pick up the comment properly.
> 
>> +static void compliance_mode_recovery_timer_init(struct xhci_hcd 
>> +*xhci) {
>> +       xhci->port_status_u0 = 0;
>> +       init_timer(&xhci->comp_mode_recovery_timer);
>> +
>> +       xhci->comp_mode_recovery_timer.data = (unsigned long) xhci;
>> +       xhci->comp_mode_recovery_timer.function =
> compliance_mode_recovery;
>> +       xhci->comp_mode_recovery_timer.expires = jiffies +
>> +                       msecs_to_jiffies(COMP_MODE_RCVRY_MSECS);
>> +
>> +       set_timer_slack(&xhci->comp_mode_recovery_timer,
>> +                       msecs_to_jiffies(COMP_MODE_RCVRY_MSECS));
>> +       add_timer(&xhci->comp_mode_recovery_timer);
>> +       xhci_dbg(xhci, "Compliance Mode Recovery Timer 
>> +Initialized.\n"); }
>> +
>> +/*
>> + * This function identifies the systems that have installed the 
>> +SN65LVPE502CP
>> + * USB3.0 re-driver and that need the Compliance Mode Quirk.
>> + * Systems:
>> + * Vendor: Hewlett-Packard -> System Models: Z420, Z620 and Z820  */
>> +
> 
> No newline here either, please.
> 
>> +static bool compliance_mode_recovery_timer_quirk_check(void)
>> +{
>> +       const char *dmi_product_name, *dmi_sys_vendor;
>> +
>> +       dmi_product_name = dmi_get_system_info(DMI_PRODUCT_NAME);
>> +       dmi_sys_vendor = dmi_get_system_info(DMI_SYS_VENDOR);
>> +
>> +       if (!(strstr(dmi_sys_vendor, "Hewlett-Packard")))
>> +               return false;
>> +
>> +       if (strstr(dmi_product_name, "Z420") ||
>> +                       strstr(dmi_product_name, "Z620") ||
>> +                       strstr(dmi_product_name, "Z820"))
>> +               return true;
>> +
>> +       return false;
>> +}
>> +
>> +static int xhci_all_ports_seen_u0(struct xhci_hcd *xhci) {
>> +       return (xhci->port_status_u0 == ((1 << 
>> +xhci->num_usb3_ports)-1)); }
>> +
>> +
>>  /*
>>   * Initialize memory for HCD and xHC (one-time init).
>>   *
>> @@ -420,6 +512,12 @@ int xhci_init(struct usb_hcd *hcd)
>>         retval = xhci_mem_init(xhci, GFP_KERNEL);
>>         xhci_dbg(xhci, "Finished xhci_init\n");
>>  
>> +       /* Initializing Compliance Mode Recovery Data If Needed */
>> +       if (compliance_mode_recovery_timer_quirk_check()) {
>> +               xhci->quirks |= XHCI_COMP_MODE_QUIRK;
>> +               compliance_mode_recovery_timer_init(xhci);
>> +       }
>> +
>>         return retval;
>>  }
>>  
>> @@ -628,6 +726,11 @@ void xhci_stop(struct usb_hcd *hcd)
>>         del_timer_sync(&xhci->event_ring_timer);
>>  #endif
>>  
>> +       /* Deleting Compliance Mode Recovery Timer */
>> +       if ((xhci->quirks & XHCI_COMP_MODE_QUIRK) &&
>> +                       (!(xhci_all_ports_seen_u0(xhci))))
>> +               del_timer_sync(&xhci->comp_mode_recovery_timer);
>> +
>>         if (xhci->quirks & XHCI_AMD_PLL_FIX)
>>                 usb_amd_dev_put();
>>  
>> @@ -802,6 +905,16 @@ int xhci_suspend(struct xhci_hcd *xhci)
>>         }
>>         spin_unlock_irq(&xhci->lock);
>>  
>> +       /*
>> +        * Deleting Compliance Mode Recovery Timer because the xHCI Host
>> +        * is about to be suspended.
>> +        */
>> +       if ((xhci->quirks & XHCI_COMP_MODE_QUIRK) &&
>> +                       (!(xhci_all_ports_seen_u0(xhci)))) {
>> +               del_timer_sync(&xhci->comp_mode_recovery_timer);
>> +               xhci_dbg(xhci, "Compliance Mode Recovery Timer
> Deleted!\n");
>> +       }
>> +
> 
> So you conditionally delete the compliance mode timer here, if there's still
> a port that hasn't seen U0 (meaning there is a compliance timer running),
> but...
> 
>>         /* step 5: remove core well power */
>>         /* synchronize irq when using MSI-X */
>>         xhci_msix_sync_irqs(xhci);
>> @@ -934,6 +1047,10 @@ int xhci_resume(struct xhci_hcd *xhci, bool
> hibernated)
>>                 usb_hcd_resume_root_hub(hcd);
>>                 usb_hcd_resume_root_hub(xhci->shared_hcd);
>>         }
>> +
>> +       if (xhci->quirks & XHCI_COMP_MODE_QUIRK)
>> +               compliance_mode_recovery_timer_init(xhci);
>> +
> 
> ..you unconditionally re-initialize it here.  That means on resume, the
> timer will always get re-started.  I think you want to only reinitialize it
> if there are ports that haven't seen U0.
> 
> Or was that part of the workaround?  Do you have to re-start the timer after
> resume from suspend or hibernate?  If ports need to see U0 after resume or
> they might go into compliance mode, wouldn't you want to reset the
> xhci->port_state to zero?
> 
> If you do need to re-initialize the timer unconditionally, please add a
> comment here, and in the description.
> 
>>         return retval;
>>  }
>>  #endif /* CONFIG_PM */
>> diff --git a/drivers/usb/host/xhci.h b/drivers/usb/host/xhci.h index 
>> 55c0785..f1e7874 100644
>> --- a/drivers/usb/host/xhci.h
>> +++ b/drivers/usb/host/xhci.h
>> @@ -1494,6 +1494,7 @@ struct xhci_hcd {
>>  #define XHCI_TRUST_TX_LENGTH   (1 << 10)
>>  #define XHCI_LPM_SUPPORT       (1 << 11)
>>  #define XHCI_INTEL_HOST                (1 << 12)
>> +#define XHCI_COMP_MODE_QUIRK   (1 << 13)
>>         unsigned int            num_active_eps;
>>         unsigned int            limit_active_eps;
>>         /* There are two roothubs to keep track of bus suspend info 
>> for */ @@ -1510,6 +1511,11 @@ struct xhci_hcd {
>>         unsigned                sw_lpm_support:1;
>>         /* support xHCI 1.0 spec USB2 hardware LPM */
>>         unsigned                hw_lpm_support:1;
>> +       /* Compliance Mode Recovery Data */
>> +       struct timer_list       comp_mode_recovery_timer;
>> +       u32                     port_status_u0;
>> +/* Compliance Mode Timer Triggered every 2 seconds */ #define 
>> +COMP_MODE_RCVRY_MSECS 2000
>>  };
>>  
>>  /* convert between an HCD pointer and the corresponding EHCI_HCD */
>> (END)
> 
> Sarah Sharp
> 

--
To unsubscribe from this list: send the line "unsubscribe linux-usb" in
the body of a message to majordomo-u79uwXL29TY76Z2rM5mHXA@public.gmane.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

