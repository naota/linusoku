Path: news.gmane.org!not-for-mail
From: Hillf Danton <dhillf-Re5JQEeQqe8AvxtiuMwx3w@public.gmane.org>
Newsgroups: gmane.linux.kernel.containers,gmane.linux.kernel,gmane.linux.kernel.cgroups,gmane.linux.kernel.mm,gmane.linux.documentation
Subject: Re: [RFC PATCH 02/23 V2] cpuset: use N_MEMORY instead N_HIGH_MEMORY
Date: Sat, 4 Aug 2012 21:51:21 +0800
Lines: 173
Approved: news@gmane.org
Message-ID: <CAJd=RBDuGh26YxLGA2AdM4eu7-ZZAO8jjrJm4ZPjc62f3XZj5w@mail.gmail.com>
References: <1343875991-7533-1-git-send-email-laijs@cn.fujitsu.com>
	<1343875991-7533-3-git-send-email-laijs@cn.fujitsu.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1344088298 32323 80.91.229.3 (4 Aug 2012 13:51:38 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Sat, 4 Aug 2012 13:51:38 +0000 (UTC)
Cc: Christoph Lameter <cl-de/tnXTf+JLsfHDXvbKv3WD2FQJk+8+b@public.gmane.org>, Jiri Kosina <jkosina-AlSwsSmVLrQ@public.gmane.org>,
	Dan Magenheimer <dan.magenheimer-QHcLZuEGTsvQT0dZR+AlfA@public.gmane.org>,
	linux-kernel-u79uwXL29TY76Z2rM5mHXA@public.gmane.org, Michal Hocko <mhocko-AlSwsSmVLrQ@public.gmane.org>,
	Paul Gortmaker <paul.gortmaker-CWA4WttNNZF54TAoqtyWWQ@public.gmane.org>,
	Konstantin Khlebnikov <khlebnikov-GEFAQzZX7r8dnm+yROfE0A@public.gmane.org>,
	"H. Peter Anvin" <hpa-YMNOUZJC4hwAvxtiuMwx3w@public.gmane.org>, Sam Ravnborg <sam-uyr5N9Q2VtJg9hUCZPvPmw@public.gmane.org>,
	Gavin Shan <shangw-23VcF4HTsmIX0ybBhKVfKdBPR1lH4CV8@public.gmane.org>,
	Rik van Riel <riel-H+wXaHxf7aLQT0dZR+AlfA@public.gmane.org>, cgroups-u79uwXL29TY76Z2rM5mHXA@public.gmane.org,
	x86-DgEjT+Ai2ygdnm+yROfE0A@public.gmane.org, Hugh Dickins <hughd-hpIqsD4AKlfQT0dZR+AlfA@public.gmane.org>,
	Ingo Molnar <mingo-H+wXaHxf7aLQT0dZR+AlfA@public.gmane.org>, Mel Gorman <mgorman-l3A5Bk7waGM@public.gmane.org>,
	KOSAKI Motohiro <kosaki.motohiro-+CUm20s59erQFUHtdCDX3A@public.gmane.org>,
	David Rientjes <rientjes-hpIqsD4AKlfQT0dZR+AlfA@public.gmane.org>,
	Petr Holasek <pholasek-H+wXaHxf7aLQT0dZR+AlfA@public.gmane.org>, linux-mm-Bw31MaZKKs3YtjvyW6yDsg@public.gmane.org,
	Wanlong Gao <gaowanlong-BthXqXjhjHXQFUHtdCDX3A@public.gmane.org>,
	Djalal Harouni <tixxdz-Umm1ozX2/EEdnm+yROfE0A@public.gmane.org>, Rusty Russell <rusty-8n+1lVoiYb80n/F98K4Iww@public.gmane.org>,
	Wen Congyang <wency-BthXqXjhjHXQFUHtdCDX3A@public.gmane.org>,
	Peter Zijlstra <a.p.zijlstra@ch
To: Lai Jiangshan <laijs-BthXqXjhjHXQFUHtdCDX3A@public.gmane.org>
Original-X-From: containers-bounces-cunTk1MwBs9QetFLy7KEm3xJsTq8ys+cHZ5vskTnxNA@public.gmane.org Sat Aug 04 15:51:27 2012
Return-path: <containers-bounces-cunTk1MwBs9QetFLy7KEm3xJsTq8ys+cHZ5vskTnxNA@public.gmane.org>
Envelope-to: glc-containers-Uylq5CNFT+jYtjvyW6yDsg@public.gmane.org
Original-Received: from mail.linuxfoundation.org ([140.211.169.12])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <containers-bounces-cunTk1MwBs9QetFLy7KEm3xJsTq8ys+cHZ5vskTnxNA@public.gmane.org>)
	id 1SxelK-0000Vh-7d
	for glc-containers-Uylq5CNFT+jYtjvyW6yDsg@public.gmane.org; Sat, 04 Aug 2012 15:51:26 +0200
Original-Received: from mail.linux-foundation.org (localhost [IPv6:::1])
	by mail.linuxfoundation.org (Postfix) with ESMTP id 1923F7B3;
	Sat,  4 Aug 2012 13:51:25 +0000 (UTC)
X-Original-To: containers-cunTk1MwBs9QetFLy7KEm3xJsTq8ys+cHZ5vskTnxNA@public.gmane.org
Delivered-To: containers-i9wRM+HIrmnmtl4Z8vJ8Kg761KYD1DLY@public.gmane.org
Original-Received: from smtp1.linuxfoundation.org (smtp1.linux-foundation.org
	[172.17.192.35])
	by mail.linuxfoundation.org (Postfix) with ESMTP id 4D592282
	for <containers-cunTk1MwBs9QetFLy7KEm3xJsTq8ys+cHZ5vskTnxNA@public.gmane.org>;
	Sat,  4 Aug 2012 13:51:23 +0000 (UTC)
X-Greylist: whitelisted by SQLgrey-1.7.6
Original-Received: from mail-vb0-f47.google.com (mail-vb0-f47.google.com
	[209.85.212.47])
	by smtp1.linuxfoundation.org (Postfix) with ESMTPS id 4E5091F8D2
	for <containers-cunTk1MwBs9QetFLy7KEm3xJsTq8ys+cHZ5vskTnxNA@public.gmane.org>;
	Sat,  4 Aug 2012 13:51:22 +0000 (UTC)
Original-Received: by vbbfr13 with SMTP id fr13so1111953vbb.6
	for <containers-cunTk1MwBs9QetFLy7KEm3xJsTq8ys+cHZ5vskTnxNA@public.gmane.org>;
	Sat, 04 Aug 2012 06:51:21 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
	h=mime-version:in-reply-to:references:date:message-id:subject:from:to
	:cc:content-type;
	bh=mCnWrYXc8lx3ih5Yz97Zqj/KmmbVJnzV+knOjaBMKiE=;
	b=n2CeNmEj+ilCKwyvd563YmhPgn8jLEeG9nGb+ECQTNNcYiY6QgryybL7ronFAY5D+H
	sTJSjCpysTG0btLDJdK99cQPOQUJsa8NVtnTagDTZ7WGSQoprqS0KIoWfGcmPQ0MzgFN
	2Rnl4ZVGNTLXoCmxx4Z/5AMFFOpuJg9ftwWhc53k5rdVC0yrwD3D4KeaRQjM+Q48zYZG
	7/tfdDRxwTCxzUi7iaRrh/QMGXDuivjq7fzQVsG4GGninPYlC2L/opF3pWCvY+r020t6
	GCholFQ8ZNNj980y5AIMu1EwhdBx5RryJyQeGmTpL44M9Im0J0XXa6UOwCkMKcXCohTO
	gR5w==
Original-Received: by 10.58.35.51 with SMTP id e19mr4490993vej.27.1344088281308; Sat,
	04 Aug 2012 06:51:21 -0700 (PDT)
Original-Received: by 10.220.1.210 with HTTP; Sat, 4 Aug 2012 06:51:21 -0700 (PDT)
In-Reply-To: <1343875991-7533-3-git-send-email-laijs-BthXqXjhjHXQFUHtdCDX3A@public.gmane.org>
X-Spam-Status: No, score=-2.7 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, FREEMAIL_FROM,
	RCVD_IN_DNSWL_LOW autolearn=ham version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	smtp1.linux-foundation.org
X-BeenThere: containers-cunTk1MwBs9QetFLy7KEm3xJsTq8ys+cHZ5vskTnxNA@public.gmane.org
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: Linux Containers <containers.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/containers>, 
	<mailto:containers-request-cunTk1MwBs9QetFLy7KEm3xJsTq8ys+cHZ5vskTnxNA@public.gmane.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/containers/>
List-Post: <mailto:containers-cunTk1MwBs9QetFLy7KEm3xJsTq8ys+cHZ5vskTnxNA@public.gmane.org>
List-Help: <mailto:containers-request-cunTk1MwBs9QetFLy7KEm3xJsTq8ys+cHZ5vskTnxNA@public.gmane.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/containers>,
	<mailto:containers-request-cunTk1MwBs9QetFLy7KEm3xJsTq8ys+cHZ5vskTnxNA@public.gmane.org?subject=subscribe>
Original-Sender: containers-bounces-cunTk1MwBs9QetFLy7KEm3xJsTq8ys+cHZ5vskTnxNA@public.gmane.org
Errors-To: containers-bounces-cunTk1MwBs9QetFLy7KEm3xJsTq8ys+cHZ5vskTnxNA@public.gmane.org
Xref: news.gmane.org gmane.linux.kernel.containers:23530 gmane.linux.kernel:1337678 gmane.linux.kernel.cgroups:3535 gmane.linux.kernel.mm:83613 gmane.linux.documentation:6050
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1337678>

On Thu, Aug 2, 2012 at 10:52 AM, Lai Jiangshan <laijs-BthXqXjhjHXQFUHtdCDX3A@public.gmane.org> wrote:
> N_HIGH_MEMORY stands for the nodes that has normal or high memory.
> N_MEMORY stands for the nodes that has any memory.
>
> The code here need to handle with the nodes which have memory, we should
> use N_MEMORY instead.
>

As described in the change log of 01/23, N_MEMORY is introduced to be
alias of N_HIGH_MEMORY, but the above sounds like you are correcting
the usage of N_HIGH_MEMORY.

> Signed-off-by: Lai Jiangshan <laijs-BthXqXjhjHXQFUHtdCDX3A@public.gmane.org>
> ---

Other than that,

Acked-by: Hillf Danton <dhillf-Re5JQEeQqe8AvxtiuMwx3w@public.gmane.org>


>  Documentation/cgroups/cpusets.txt |    2 +-
>  include/linux/cpuset.h            |    2 +-
>  kernel/cpuset.c                   |   32 ++++++++++++++++----------------
>  3 files changed, 18 insertions(+), 18 deletions(-)
>
> diff --git a/Documentation/cgroups/cpusets.txt b/Documentation/cgroups/cpusets.txt
> index cefd3d8..12e01d4 100644
> --- a/Documentation/cgroups/cpusets.txt
> +++ b/Documentation/cgroups/cpusets.txt
> @@ -218,7 +218,7 @@ and name space for cpusets, with a minimum of additional kernel code.
>  The cpus and mems files in the root (top_cpuset) cpuset are
>  read-only.  The cpus file automatically tracks the value of
>  cpu_online_mask using a CPU hotplug notifier, and the mems file
> -automatically tracks the value of node_states[N_HIGH_MEMORY]--i.e.,
> +automatically tracks the value of node_states[N_MEMORY]--i.e.,
>  nodes with memory--using the cpuset_track_online_nodes() hook.
>
>
> diff --git a/include/linux/cpuset.h b/include/linux/cpuset.h
> index 838320f..8c8a60d 100644
> --- a/include/linux/cpuset.h
> +++ b/include/linux/cpuset.h
> @@ -144,7 +144,7 @@ static inline nodemask_t cpuset_mems_allowed(struct task_struct *p)
>         return node_possible_map;
>  }
>
> -#define cpuset_current_mems_allowed (node_states[N_HIGH_MEMORY])
> +#define cpuset_current_mems_allowed (node_states[N_MEMORY])
>  static inline void cpuset_init_current_mems_allowed(void) {}
>
>  static inline int cpuset_nodemask_valid_mems_allowed(nodemask_t *nodemask)
> diff --git a/kernel/cpuset.c b/kernel/cpuset.c
> index f33c715..2b133db 100644
> --- a/kernel/cpuset.c
> +++ b/kernel/cpuset.c
> @@ -302,10 +302,10 @@ static void guarantee_online_cpus(const struct cpuset *cs,
>   * are online, with memory.  If none are online with memory, walk
>   * up the cpuset hierarchy until we find one that does have some
>   * online mems.  If we get all the way to the top and still haven't
> - * found any online mems, return node_states[N_HIGH_MEMORY].
> + * found any online mems, return node_states[N_MEMORY].
>   *
>   * One way or another, we guarantee to return some non-empty subset
> - * of node_states[N_HIGH_MEMORY].
> + * of node_states[N_MEMORY].
>   *
>   * Call with callback_mutex held.
>   */
> @@ -313,14 +313,14 @@ static void guarantee_online_cpus(const struct cpuset *cs,
>  static void guarantee_online_mems(const struct cpuset *cs, nodemask_t *pmask)
>  {
>         while (cs && !nodes_intersects(cs->mems_allowed,
> -                                       node_states[N_HIGH_MEMORY]))
> +                                       node_states[N_MEMORY]))
>                 cs = cs->parent;
>         if (cs)
>                 nodes_and(*pmask, cs->mems_allowed,
> -                                       node_states[N_HIGH_MEMORY]);
> +                                       node_states[N_MEMORY]);
>         else
> -               *pmask = node_states[N_HIGH_MEMORY];
> -       BUG_ON(!nodes_intersects(*pmask, node_states[N_HIGH_MEMORY]));
> +               *pmask = node_states[N_MEMORY];
> +       BUG_ON(!nodes_intersects(*pmask, node_states[N_MEMORY]));
>  }
>
>  /*
> @@ -1100,7 +1100,7 @@ static int update_nodemask(struct cpuset *cs, struct cpuset *trialcs,
>                 return -ENOMEM;
>
>         /*
> -        * top_cpuset.mems_allowed tracks node_stats[N_HIGH_MEMORY];
> +        * top_cpuset.mems_allowed tracks node_stats[N_MEMORY];
>          * it's read-only
>          */
>         if (cs == &top_cpuset) {
> @@ -1122,7 +1122,7 @@ static int update_nodemask(struct cpuset *cs, struct cpuset *trialcs,
>                         goto done;
>
>                 if (!nodes_subset(trialcs->mems_allowed,
> -                               node_states[N_HIGH_MEMORY])) {
> +                               node_states[N_MEMORY])) {
>                         retval =  -EINVAL;
>                         goto done;
>                 }
> @@ -2034,7 +2034,7 @@ static struct cpuset *cpuset_next(struct list_head *queue)
>   * before dropping down to the next.  It always processes a node before
>   * any of its children.
>   *
> - * In the case of memory hot-unplug, it will remove nodes from N_HIGH_MEMORY
> + * In the case of memory hot-unplug, it will remove nodes from N_MEMORY
>   * if all present pages from a node are offlined.
>   */
>  static void
> @@ -2073,7 +2073,7 @@ scan_cpusets_upon_hotplug(struct cpuset *root, enum hotplug_event event)
>
>                         /* Continue past cpusets with all mems online */
>                         if (nodes_subset(cp->mems_allowed,
> -                                       node_states[N_HIGH_MEMORY]))
> +                                       node_states[N_MEMORY]))
>                                 continue;
>
>                         oldmems = cp->mems_allowed;
> @@ -2081,7 +2081,7 @@ scan_cpusets_upon_hotplug(struct cpuset *root, enum hotplug_event event)
>                         /* Remove offline mems from this cpuset. */
>                         mutex_lock(&callback_mutex);
>                         nodes_and(cp->mems_allowed, cp->mems_allowed,
> -                                               node_states[N_HIGH_MEMORY]);
> +                                               node_states[N_MEMORY]);
>                         mutex_unlock(&callback_mutex);
>
>                         /* Move tasks from the empty cpuset to a parent */
> @@ -2134,8 +2134,8 @@ void cpuset_update_active_cpus(bool cpu_online)
>
>  #ifdef CONFIG_MEMORY_HOTPLUG
>  /*
> - * Keep top_cpuset.mems_allowed tracking node_states[N_HIGH_MEMORY].
> - * Call this routine anytime after node_states[N_HIGH_MEMORY] changes.
> + * Keep top_cpuset.mems_allowed tracking node_states[N_MEMORY].
> + * Call this routine anytime after node_states[N_MEMORY] changes.
>   * See cpuset_update_active_cpus() for CPU hotplug handling.
>   */
>  static int cpuset_track_online_nodes(struct notifier_block *self,
> @@ -2148,7 +2148,7 @@ static int cpuset_track_online_nodes(struct notifier_block *self,
>         case MEM_ONLINE:
>                 oldmems = top_cpuset.mems_allowed;
>                 mutex_lock(&callback_mutex);
> -               top_cpuset.mems_allowed = node_states[N_HIGH_MEMORY];
> +               top_cpuset.mems_allowed = node_states[N_MEMORY];
>                 mutex_unlock(&callback_mutex);
>                 update_tasks_nodemask(&top_cpuset, &oldmems, NULL);
>                 break;
> @@ -2177,7 +2177,7 @@ static int cpuset_track_online_nodes(struct notifier_block *self,
>  void __init cpuset_init_smp(void)
>  {
>         cpumask_copy(top_cpuset.cpus_allowed, cpu_active_mask);
> -       top_cpuset.mems_allowed = node_states[N_HIGH_MEMORY];
> +       top_cpuset.mems_allowed = node_states[N_MEMORY];
>
>         hotplug_memory_notifier(cpuset_track_online_nodes, 10);
>
> @@ -2245,7 +2245,7 @@ void cpuset_init_current_mems_allowed(void)
>   *
>   * Description: Returns the nodemask_t mems_allowed of the cpuset
>   * attached to the specified @tsk.  Guaranteed to return some non-empty
> - * subset of node_states[N_HIGH_MEMORY], even if this means going outside the
> + * subset of node_states[N_MEMORY], even if this means going outside the
>   * tasks cpuset.
>   **/
>
> --
> 1.7.1
>
