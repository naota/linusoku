Path: news.gmane.org!not-for-mail
From: Daniel Mack <zonque-Re5JQEeQqe8AvxtiuMwx3w@public.gmane.org>
Newsgroups: gmane.linux.drivers.devicetree,gmane.linux.kernel
Subject: Re: [PATCH v3 1/2] lis3: add generic DT matching code
Date: Sun, 05 Aug 2012 18:18:42 +0200
Lines: 284
Approved: news@gmane.org
Message-ID: <501E9CE2.20500@gmail.com>
References: <1343633775-6268-1-git-send-email-zonque@gmail.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1344183542 11988 80.91.229.3 (5 Aug 2012 16:19:02 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Sun, 5 Aug 2012 16:19:02 +0000 (UTC)
Cc: devicetree-discuss-uLR06cmDAlY/bJ5BZ2RsiQ@public.gmane.org, eric.piel-VkQ1JFuSMpfAbQlEx87xDw@public.gmane.org,
 linux-kernel-u79uwXL29TY76Z2rM5mHXA@public.gmane.org, rob.herring-bsGFqQB8/DxBDgjK7y7TUQ@public.gmane.org
To: Daniel Mack <zonque-Re5JQEeQqe8AvxtiuMwx3w@public.gmane.org>
Original-X-From: devicetree-discuss-bounces+gldd-devicetree-discuss=m.gmane.org-uLR06cmDAlY/bJ5BZ2RsiQ@public.gmane.org Sun Aug 05 18:19:01 2012
Return-path: <devicetree-discuss-bounces+gldd-devicetree-discuss=m.gmane.org-uLR06cmDAlY/bJ5BZ2RsiQ@public.gmane.org>
Envelope-to: gldd-devicetree-discuss@m.gmane.org
Original-Received: from ozlabs.org ([203.10.76.45])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <devicetree-discuss-bounces+gldd-devicetree-discuss=m.gmane.org-uLR06cmDAlY/bJ5BZ2RsiQ@public.gmane.org>)
	id 1Sy3Xg-0008Tq-E8
	for gldd-devicetree-discuss@m.gmane.org; Sun, 05 Aug 2012 18:19:01 +0200
Original-Received: from ozlabs.org (localhost [IPv6:::1])
	by ozlabs.org (Postfix) with ESMTP id E02232C032F
	for <gldd-devicetree-discuss@m.gmane.org>; Mon,  6 Aug 2012 02:18:58 +1000 (EST)
Original-Received: from mail-bk0-f51.google.com (mail-bk0-f51.google.com
 [209.85.214.51])
 (using TLSv1 with cipher ECDHE-RSA-RC4-SHA (128/128 bits))
 (Client CN "smtp.gmail.com", Issuer "Google Internet Authority" (not verified))
 by ozlabs.org (Postfix) with ESMTPS id 9BCC92C00A3
 for <devicetree-discuss-uLR06cmDAlY/bJ5BZ2RsiQ@public.gmane.org>;
 Mon,  6 Aug 2012 02:18:49 +1000 (EST)
Original-Received: by bkcjk13 with SMTP id jk13so694454bkc.38
 for <devicetree-discuss-uLR06cmDAlY/bJ5BZ2RsiQ@public.gmane.org>;
 Sun, 05 Aug 2012 09:18:46 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=message-id:date:from:user-agent:mime-version:to:cc:subject
 :references:in-reply-to:x-enigmail-version:content-type
 :content-transfer-encoding;
 bh=QLcDVsbaZJJPbcg/7rMsSKHpJk0Y/NVsvsPjuiTouao=;
 b=kZcJLZaEkJf/Klo1jxVAUx/w0KWUE6GmX/vMR9mUP5vBF4iCtPA3Jv450Cqti5MgnS
 Eqs4Ry3W/Akyl5etLpH6TvTkJT8HEUwIaIE9vWxACNuqpj3wY4KQEU/Pf4hf+kovRYN0
 H9bfODbzRSBYWZb1AdJz1d2p9htYfXGr7G7cLJhMbEXK4vgdNlWVl1VQOTUIL4MnzHmX
 wwWBJ9n/u7UzKKo+tdtNYZTCDMt7m5opfqzxiLvhjCk0QvQOmhzTJnUWMaoh6nscTJGb
 X/AZZuKAQ887lxBt6233glnRt8gNT9tEMv6zB526xBBu7NRbdvZ1CucwDg3E43V1eesP
 1PWg==
Original-Received: by 10.204.156.70 with SMTP id v6mr3025698bkw.66.1344183526180;
 Sun, 05 Aug 2012 09:18:46 -0700 (PDT)
Original-Received: from [10.0.1.6] (i59F761A9.versanet.de. [89.247.97.169])
 by mx.google.com with ESMTPS id he8sm6360855bkc.3.2012.08.05.09.18.43
 (version=TLSv1/SSLv3 cipher=OTHER);
 Sun, 05 Aug 2012 09:18:45 -0700 (PDT)
User-Agent: Mozilla/5.0 (X11; Linux x86_64;
 rv:14.0) Gecko/20120717 Thunderbird/14.0
In-Reply-To: <1343633775-6268-1-git-send-email-zonque-Re5JQEeQqe8AvxtiuMwx3w@public.gmane.org>
X-Enigmail-Version: 1.4.3
X-BeenThere: devicetree-discuss-uLR06cmDAlY/bJ5BZ2RsiQ@public.gmane.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Discussion about Device Trees and associated tools across all
 architectures <devicetree-discuss.lists.ozlabs.org>
List-Unsubscribe: <https://lists.ozlabs.org/options/devicetree-discuss>,
 <mailto:devicetree-discuss-request-uLR06cmDAlY/bJ5BZ2RsiQ@public.gmane.org?subject=unsubscribe>
List-Archive: <http://lists.ozlabs.org/pipermail/devicetree-discuss/>
List-Post: <mailto:devicetree-discuss-uLR06cmDAlY/bJ5BZ2RsiQ@public.gmane.org>
List-Help: <mailto:devicetree-discuss-request-uLR06cmDAlY/bJ5BZ2RsiQ@public.gmane.org?subject=help>
List-Subscribe: <https://lists.ozlabs.org/listinfo/devicetree-discuss>,
 <mailto:devicetree-discuss-request-uLR06cmDAlY/bJ5BZ2RsiQ@public.gmane.org?subject=subscribe>
Errors-To: devicetree-discuss-bounces+gldd-devicetree-discuss=m.gmane.org-uLR06cmDAlY/bJ5BZ2RsiQ@public.gmane.org
Original-Sender: "devicetree-discuss"
 <devicetree-discuss-bounces+gldd-devicetree-discuss=m.gmane.org-uLR06cmDAlY/bJ5BZ2RsiQ@public.gmane.org>
Xref: news.gmane.org gmane.linux.drivers.devicetree:19052 gmane.linux.kernel:1337848
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1337848>

Ping, anyone?

On 30.07.2012 09:36, Daniel Mack wrote:
> This patch adds logic to parse lis3 properties from a device tree node
> and store them in a freshly allocated lis3lv02d_platform_data.
> 
> Note that the actual match tables are left out here. This part should
> happen in the drivers that bind to the individual busses (SPI/I2C/PCI).
> 
> Also adds some DT bindinds documentation.
> 
> Signed-off-by: Daniel Mack <zonque-Re5JQEeQqe8AvxtiuMwx3w@public.gmane.org>
> ---
> Changes from v2:
>  - kzalloc braino
> 
> Changes from v1:
>  - some typos in properties fixed
> 
> 
>  Documentation/devicetree/bindings/misc/lis302.txt |  74 ++++++++++++
>  drivers/misc/lis3lv02d/lis3lv02d.c                | 137 ++++++++++++++++++++++
>  drivers/misc/lis3lv02d/lis3lv02d.h                |   4 +
>  3 files changed, 215 insertions(+)
>  create mode 100644 Documentation/devicetree/bindings/misc/lis302.txt
> 
> diff --git a/Documentation/devicetree/bindings/misc/lis302.txt b/Documentation/devicetree/bindings/misc/lis302.txt
> new file mode 100644
> index 0000000..66230fd
> --- /dev/null
> +++ b/Documentation/devicetree/bindings/misc/lis302.txt
> @@ -0,0 +1,74 @@
> +LIS302 accelerometer devicetree bindings
> +
> +This device is matched via its bus drivers, and has a number of properties
> +that apply in on the generic device (independent from the bus).
> +
> +
> +Required properties for the SPI bindings:
> + - compatible: 		should be set to "st,lis3lv02d_spi"
> + - reg:			the chipselect index
> + - spi-max-frequency:	maximal bus speed, should be set to 1000000 unless
> +			constrained by external circuitry
> + - interrupts:		the interrupt generated by the device
> +
> +
> +Optional properties for all bus drivers:
> +
> + - st,click-single-{x,y,z}:	if present, tells the device to issue an
> +				interrupt on single click events on the
> +				x/y/z axis.
> + - st,click-double-{x,y,z}:	if present, tells the device to issue an
> +				interrupt on double click events on the
> +				x/y/z axis.
> + - st,click-thresh-{x,y,z}:	set the x/y/z axis threshold
> + - st,click-click-time-limit:	click time limit, from 0 to 127.5msec
> +				with step of 0.5 msec
> + - st,click-latency:		click latency, from 0 to 255 msec with
> +				step of 1 msec.
> + - st,click-window:		click window, from 0 to 255 msec with
> +				step of 1 msec.
> + - st,irq{1,2}-disable:		disable IRQ 1/2
> + - st,irq{1,2}-ff-wu-1:		raise IRQ 1/2 on FF_WU_1 condition
> + - st,irq{1,2}-ff-wu-2:		raise IRQ 1/2 on FF_WU_2 condition
> + - st,irq{1,2}-data-ready:	raise IRQ 1/2 on data ready contition
> + - st,irq{1,2}-click:		raise IRQ 1/2 on click condition
> + - st,irq-open-drain:		consider IRQ lines open-drain
> + - st,irq-active-low:		make IRQ lines active low
> + - st,wu-duration-1:		duration register for Free-Fall/Wake-Up
> +				interrupt 1
> + - st,wu-duration-2:		duration register for Free-Fall/Wake-Up
> +				interrupt 2
> + - st,wakeup-{x,y,z}-{lo,hi}:	set wakeup condition on x/y/z axis for
> +				upper/lower limit
> + - st,highpass-cutoff-hz=:	1, 2, 4 or 8 for 1Hz, 2Hz, 4Hz or 8Hz of
> +				highpass cut-off frequency
> + - st,hipass{1,2}-disable:	disable highpass 1/2.
> + - st,default-rate=:		set the default rate
> + - st,axis-{x,y,z}=:		set the axis to map to the three coordinates
> +
> +
> +Example for a SPI device node:
> +
> +	lis302@0 {
> +		compatible = "st,lis302dl-spi";
> +		reg = <0>;
> +		spi-max-frequency = <1000000>;
> +		interrupt-parent = <&gpio>;
> +		interrupts = <104 0>;
> +
> +		st,click-single-x;
> +		st,click-single-y;
> +		st,click-single-z;
> +		st,click-thresh-x = <10>;
> +		st,click-thresh-y = <10>;
> +		st,click-thresh-z = <10>;
> +		st,irq1-click;
> +		st,irq2-click;
> +		st,wakeup-x-lo;
> +		st,wakeup-x-hi;
> +		st,wakeup-y-lo;
> +		st,wakeup-y-hi;
> +		st,wakeup-z-lo;
> +		st,wakeup-z-hi;
> +	};
> +
> diff --git a/drivers/misc/lis3lv02d/lis3lv02d.c b/drivers/misc/lis3lv02d/lis3lv02d.c
> index a981e2a..1411fdc 100644
> --- a/drivers/misc/lis3lv02d/lis3lv02d.c
> +++ b/drivers/misc/lis3lv02d/lis3lv02d.c
> @@ -39,6 +39,7 @@
>  #include <linux/miscdevice.h>
>  #include <linux/pm_runtime.h>
>  #include <linux/atomic.h>
> +#include <linux/of_device.h>
>  #include "lis3lv02d.h"
>  
>  #define DRIVER_NAME     "lis3lv02d"
> @@ -912,6 +913,138 @@ static void lis3lv02d_8b_configure(struct lis3lv02d *lis3,
>  	}
>  }
>  
> +#ifdef CONFIG_OF
> +static int lis3lv02d_init_dt(struct lis3lv02d *lis3)
> +{
> +	struct lis3lv02d_platform_data *pdata;
> +	struct device_node *np = lis3->of_node;
> +	u32 tmp;
> +
> +	if (!lis3->of_node)
> +		return 0;
> +
> +	pdata = kzalloc(sizeof(*pdata), GFP_KERNEL);
> +	if (!pdata)
> +		return -ENOMEM;
> +
> +	if (of_get_property(np, "st,click-single-x", NULL))
> +		pdata->click_flags |= LIS3_CLICK_SINGLE_X;
> +	if (of_get_property(np, "st,click-double-x", NULL))
> +		pdata->click_flags |= LIS3_CLICK_DOUBLE_X;
> +
> +	if (of_get_property(np, "st,click-single-y", NULL))
> +		pdata->click_flags |= LIS3_CLICK_SINGLE_Y;
> +	if (of_get_property(np, "st,click-double-y", NULL))
> +		pdata->click_flags |= LIS3_CLICK_DOUBLE_Y;
> +
> +	if (of_get_property(np, "st,click-single-z", NULL))
> +		pdata->click_flags |= LIS3_CLICK_SINGLE_Z;
> +	if (of_get_property(np, "st,click-double-z", NULL))
> +		pdata->click_flags |= LIS3_CLICK_DOUBLE_Z;
> +
> +	if (!of_property_read_u32(np, "st,click-threshold-x", &tmp))
> +		pdata->click_thresh_x = tmp;
> +	if (!of_property_read_u32(np, "st,click-threshold-y", &tmp))
> +		pdata->click_thresh_y = tmp;
> +	if (!of_property_read_u32(np, "st,click-threshold-z", &tmp))
> +		pdata->click_thresh_z = tmp;
> +
> +	if (!of_property_read_u32(np, "st,click-time-limit", &tmp))
> +		pdata->click_time_limit = tmp;
> +	if (!of_property_read_u32(np, "st,click-latency", &tmp))
> +		pdata->click_latency = tmp;
> +	if (!of_property_read_u32(np, "st,click-window", &tmp))
> +		pdata->click_window = tmp;
> +
> +	if (of_get_property(np, "st,irq1-disable", NULL))
> +		pdata->irq_cfg |= LIS3_IRQ1_DISABLE;
> +	if (of_get_property(np, "st,irq1-ff-wu-1", NULL))
> +		pdata->irq_cfg |= LIS3_IRQ1_FF_WU_1;
> +	if (of_get_property(np, "st,irq1-ff-wu-2", NULL))
> +		pdata->irq_cfg |= LIS3_IRQ1_FF_WU_2;
> +	if (of_get_property(np, "st,irq1-data-ready", NULL))
> +		pdata->irq_cfg |= LIS3_IRQ1_DATA_READY;
> +	if (of_get_property(np, "st,irq1-click", NULL))
> +		pdata->irq_cfg |= LIS3_IRQ1_CLICK;
> +
> +	if (of_get_property(np, "st,irq2-disable", NULL))
> +		pdata->irq_cfg |= LIS3_IRQ2_DISABLE;
> +	if (of_get_property(np, "st,irq2-ff-wu-1", NULL))
> +		pdata->irq_cfg |= LIS3_IRQ2_FF_WU_1;
> +	if (of_get_property(np, "st,irq2-ff-wu-2", NULL))
> +		pdata->irq_cfg |= LIS3_IRQ2_FF_WU_2;
> +	if (of_get_property(np, "st,irq2-data-ready", NULL))
> +		pdata->irq_cfg |= LIS3_IRQ2_DATA_READY;
> +	if (of_get_property(np, "st,irq2-click", NULL))
> +		pdata->irq_cfg |= LIS3_IRQ2_CLICK;
> +
> +	if (of_get_property(np, "st,irq-open-drain", NULL))
> +		pdata->irq_cfg |= LIS3_IRQ_OPEN_DRAIN;
> +	if (of_get_property(np, "st,irq-active-low", NULL))
> +		pdata->irq_cfg |= LIS3_IRQ_ACTIVE_LOW;
> +
> +	if (!of_property_read_u32(np, "st,wu-duration-1", &tmp))
> +		pdata->duration1 = tmp;
> +	if (!of_property_read_u32(np, "st,wu-duration-2", &tmp))
> +		pdata->duration2 = tmp;
> +
> +	if (of_get_property(np, "st,wakeup-x-lo", NULL))
> +		pdata->wakeup_flags |= LIS3_WAKEUP_X_LO;
> +	if (of_get_property(np, "st,wakeup-x-hi", NULL))
> +		pdata->wakeup_flags |= LIS3_WAKEUP_X_HI;
> +	if (of_get_property(np, "st,wakeup-y-lo", NULL))
> +		pdata->wakeup_flags |= LIS3_WAKEUP_Y_LO;
> +	if (of_get_property(np, "st,wakeup-y-hi", NULL))
> +		pdata->wakeup_flags |= LIS3_WAKEUP_Y_HI;
> +	if (of_get_property(np, "st,wakeup-z-lo", NULL))
> +		pdata->wakeup_flags |= LIS3_WAKEUP_Z_LO;
> +	if (of_get_property(np, "st,wakeup-z-hi", NULL))
> +		pdata->wakeup_flags |= LIS3_WAKEUP_Z_HI;
> +
> +	if (!of_property_read_u32(np, "st,highpass-cutoff-hz", &tmp)) {
> +		switch (tmp) {
> +		case 1:
> +			pdata->hipass_ctrl = LIS3_HIPASS_CUTFF_1HZ;
> +			break;
> +		case 2:
> +			pdata->hipass_ctrl = LIS3_HIPASS_CUTFF_2HZ;
> +			break;
> +		case 4:
> +			pdata->hipass_ctrl = LIS3_HIPASS_CUTFF_4HZ;
> +			break;
> +		case 8:
> +			pdata->hipass_ctrl = LIS3_HIPASS_CUTFF_8HZ;
> +			break;
> +		}
> +	}
> +
> +	if (of_get_property(np, "st,hipass1-disable", NULL))
> +		pdata->hipass_ctrl |= LIS3_HIPASS1_DISABLE;
> +	if (of_get_property(np, "st,hipass2-disable", NULL))
> +		pdata->hipass_ctrl |= LIS3_HIPASS2_DISABLE;
> +
> +	if (of_get_property(np, "st,axis-x", NULL))
> +		pdata->axis_x = tmp;
> +	if (of_get_property(np, "st,axis-y", NULL))
> +		pdata->axis_y = tmp;
> +	if (of_get_property(np, "st,axis-z", NULL))
> +		pdata->axis_z = tmp;
> +
> +	if (of_get_property(np, "st,default-rate", NULL))
> +		pdata->default_rate = tmp;
> +
> +	lis3->pdata = pdata;
> +
> +	return 0;
> +}
> +
> +#else
> +static int lis3lv02d_init_dt(struct lis3lv02d *lis3)
> +{
> +	return 0;
> +}
> +#endif
> +
>  /*
>   * Initialise the accelerometer and the various subsystems.
>   * Should be rather independent of the bus system.
> @@ -922,6 +1055,10 @@ int lis3lv02d_init_device(struct lis3lv02d *lis3)
>  	irq_handler_t thread_fn;
>  	int irq_flags = 0;
>  
> +	err = lis3lv02d_init_dt(lis3);
> +	if (err < 0)
> +		return err;
> +
>  	lis3->whoami = lis3lv02d_read_8(lis3, WHO_AM_I);
>  
>  	switch (lis3->whoami) {
> diff --git a/drivers/misc/lis3lv02d/lis3lv02d.h b/drivers/misc/lis3lv02d/lis3lv02d.h
> index 2b1482a..a296f1d 100644
> --- a/drivers/misc/lis3lv02d/lis3lv02d.h
> +++ b/drivers/misc/lis3lv02d/lis3lv02d.h
> @@ -282,6 +282,10 @@ struct lis3lv02d {
>  
>  	struct lis3lv02d_platform_data *pdata;	/* for passing board config */
>  	struct mutex		mutex;     /* Serialize poll and selftest */
> +
> +#ifdef CONFIG_OF
> +	struct device_node	*of_node;
> +#endif
>  };
>  
>  int lis3lv02d_init_device(struct lis3lv02d *lis3);
> 
