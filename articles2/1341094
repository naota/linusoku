Path: news.gmane.org!not-for-mail
From: Fengguang Wu <fengguang.wu@intel.com>
Newsgroups: gmane.linux.kernel
Subject: Re: yama_ptrace_access_check(): possible recursive locking detected
Date: Fri, 10 Aug 2012 09:52:22 +0800
Lines: 97
Approved: news@gmane.org
Message-ID: <20120810015222.GA19286@localhost>
References: <20120726134748.GA20605@localhost>
 <CAGXu5j+xjud3w4cYXADM-KvFPvnkaKp49j5x-wdZ66wUJjkX0g@mail.gmail.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Trace: dough.gmane.org 1344563554 10991 80.91.229.3 (10 Aug 2012 01:52:34 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Fri, 10 Aug 2012 01:52:34 +0000 (UTC)
Cc: LKML <linux-kernel@vger.kernel.org>,
	Oleg Nesterov <oleg@redhat.com>
To: Kees Cook <keescook@chromium.org>
Original-X-From: linux-kernel-owner@vger.kernel.org Fri Aug 10 03:52:34 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SzeOv-0003Vy-8c
	for glk-linux-kernel-3@plane.gmane.org; Fri, 10 Aug 2012 03:52:33 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932489Ab2HJBw1 (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Thu, 9 Aug 2012 21:52:27 -0400
Original-Received: from mga11.intel.com ([192.55.52.93]:8637 "EHLO mga11.intel.com"
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932264Ab2HJBwZ (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Thu, 9 Aug 2012 21:52:25 -0400
Original-Received: from fmsmga001.fm.intel.com ([10.253.24.23])
  by fmsmga102.fm.intel.com with ESMTP; 09 Aug 2012 18:52:25 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="4.77,743,1336374000"; 
   d="scan'208";a="195926862"
Original-Received: from unknown (HELO wfg-t420.sh.intel.com) ([10.255.20.199])
  by fmsmga001.fm.intel.com with ESMTP; 09 Aug 2012 18:52:23 -0700
Original-Received: from wfg by wfg-t420.sh.intel.com with local (Exim 4.77)
	(envelope-from <fengguang.wu@intel.com>)
	id 1SzeOk-00052R-R4; Fri, 10 Aug 2012 09:52:22 +0800
Content-Disposition: inline
In-Reply-To: <CAGXu5j+xjud3w4cYXADM-KvFPvnkaKp49j5x-wdZ66wUJjkX0g@mail.gmail.com>
User-Agent: Mutt/1.5.21 (2010-09-15)
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1341094
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1341094>

On Thu, Aug 09, 2012 at 06:39:34PM -0700, Kees Cook wrote:
> Hi,
> 
> So, after taking a closer look at this, I cannot understand how it's
> possible. Yama's task_lock call is against "current", not "child",
> which is what ptrace_may_access() is locking. And the same code makes
> sure that current != child. Yama would never get called if current ==
> child.
> 
> How did you reproduce this situation?

This warning can be triggered with Dave Jones' trinity tool:

git://git.codemonkey.org.uk/trinity

That's a very dangerous tool, please only run it as normal user in a
backed up and chrooted test box. I personally run it inside an initrd.
If you are interested in reproducing this, I can send you the ready
made initrd in private email.

Thanks,
Fengguang
 
> On Thu, Jul 26, 2012 at 6:47 AM, Fengguang Wu <fengguang.wu@intel.com> wrote:
> > Hi Kees,
> >
> > Here is a recursive lock possibility:
> >
> >         ptrace_may_access()
> > =>        task_lock(task);
> >             yama_ptrace_access_check()
> >               get_task_comm()
> > =>              task_lock(task);
> >
> > [   60.230444] =============================================
> > [   60.232078] [ INFO: possible recursive locking detected ]
> > [   60.232078] 3.5.0+ #281 Not tainted
> > [   60.232078] ---------------------------------------------
> > [   60.232078] trinity-child0/17019 is trying to acquire lock:
> > [   60.232078]  (&(&p->alloc_lock)->rlock){+.+...}, at: [<c1176ffa>] get_task_comm+0x4a/0xf0
> > [   60.232078]
> > [   60.232078] but task is already holding lock:
> > [   60.232078]  (&(&p->alloc_lock)->rlock){+.+...}, at: [<c10653fa>] ptrace_may_access+0x4a/0xf0
> > [   60.232078]
> > [   60.232078] other info that might help us debug this:
> > [   60.232078]  Possible unsafe locking scenario:
> > [   60.232078]
> > [   60.232078]        CPU0
> > [   60.232078]        ----
> > [   60.232078]   lock(&(&p->alloc_lock)->rlock);
> > [   60.232078]   lock(&(&p->alloc_lock)->rlock);
> > [   60.232078]
> > [   60.232078]  *** DEADLOCK ***
> > [   60.232078]
> > [   60.232078]  May be due to missing lock nesting notation
> > [   60.232078]
> > [   60.232078] 3 locks held by trinity-child0/17019:
> > [   60.232078]  #0:  (&p->lock){+.+.+.}, at: [<c11a9683>] seq_read+0x33/0x6b0
> > [   60.232078]  #1:  (&sig->cred_guard_mutex){+.+.+.}, at: [<c11ff8ae>] lock_trace+0x2e/0xb0
> > [   60.232078]  #2:  (&(&p->alloc_lock)->rlock){+.+...}, at: [<c10653fa>] ptrace_may_access+0x4a/0xf0
> > [   60.232078]
> > [   60.232078] stack backtrace:
> > [   60.232078] Pid: 17019, comm: trinity-child0 Not tainted 3.5.0+ #281
> > [   60.232078] Call Trace:
> > [   60.232078]  [<c10c6238>] __lock_acquire+0x1498/0x14f0
> > [   60.232078]  [<c10be7e7>] ? trace_hardirqs_off+0x27/0x40
> > [   60.232078]  [<c10c6360>] lock_acquire+0xd0/0x110
> > [   60.232078]  [<c1176ffa>] ? get_task_comm+0x4a/0xf0
> > [   60.232078]  [<c1422290>] _raw_spin_lock+0x60/0x110
> > [   60.232078]  [<c1176ffa>] ? get_task_comm+0x4a/0xf0
> > [   60.232078]  [<c1176ffa>] get_task_comm+0x4a/0xf0
> > [   60.232078]  [<c1246798>] yama_ptrace_access_check+0x468/0x4a0
> > [   60.232078]  [<c124648f>] ? yama_ptrace_access_check+0x15f/0x4a0
> > [   60.232078]  [<c124209a>] security_ptrace_access_check+0x1a/0x30
> > [   60.232078]  [<c1065229>] __ptrace_may_access+0x189/0x310
> > [   60.232078]  [<c10650cc>] ? __ptrace_may_access+0x2c/0x310
> > [   60.232078]  [<c106542d>] ptrace_may_access+0x7d/0xf0
> > [   60.232078]  [<c11ff8ea>] lock_trace+0x6a/0xb0
> > [   60.232078]  [<c11ffa46>] proc_pid_stack+0x76/0x170
> > [   60.232078]  [<c1201064>] proc_single_show+0x74/0x100
> > [   60.232078]  [<c11a97b3>] seq_read+0x163/0x6b0
> > [   60.232078]  [<c105bf70>] ? do_setitimer+0x220/0x330
> > [   60.232078]  [<c11a9650>] ? seq_lseek+0x1f0/0x1f0
> > [   60.232078]  [<c116b55a>] vfs_read+0xca/0x280
> > [   60.232078]  [<c11a9650>] ? seq_lseek+0x1f0/0x1f0
> > [   60.232078]  [<c116b776>] sys_read+0x66/0xe0
> > [   60.232078]  [<c1423d9d>] syscall_call+0x7/0xb
> > [   60.232078]  [<c1420000>] ? __schedule+0x2a0/0xc80
> >
> > Thanks,
> > Fengguang
> 
> 
> 
> -- 
> Kees Cook
> Chrome OS Security
