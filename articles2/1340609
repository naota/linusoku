Path: news.gmane.org!not-for-mail
From: Arun MURTHY <arun.murthy@stericsson.com>
Newsgroups: gmane.linux.kernel,gmane.linux.network,gmane.linux.documentation
Subject: RE: [PATCHv2 3/4] modem_shm: u8500-shm: U8500 Shared Memory Driver
Date: Thu, 9 Aug 2012 12:11:18 +0200
Lines: 163
Approved: news@gmane.org
Message-ID: <F45880696056844FA6A73F415B568C695B0E797055@EXDCVYMBSTM006.EQ1STM.local>
References: <1344322471-3640-1-git-send-email-arun.murthy@stericsson.com>
	<1344322471-3640-4-git-send-email-arun.murthy@stericsson.com>
	<20120807110156.4d0c2571@pyramind.ukuu.org.uk>
	<F45880696056844FA6A73F415B568C695B0E7969E3@EXDCVYMBSTM006.EQ1STM.local>
 <20120808114606.2a1a3bd3@pyramind.ukuu.org.uk>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 8BIT
X-Trace: dough.gmane.org 1344507113 16455 80.91.229.3 (9 Aug 2012 10:11:53 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Thu, 9 Aug 2012 10:11:53 +0000 (UTC)
Cc: "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
	"netdev@vger.kernel.org" <netdev@vger.kernel.org>,
	"linux-doc@vger.kernel.org" <linux-doc@vger.kernel.org>,
	"gregkh@linuxfoundation.org" <gregkh@linuxfoundation.org>,
	Sjur BRENDELAND <sjur.brandeland@stericsson.com>
To: Alan Cox <alan@lxorguk.ukuu.org.uk>
Original-X-From: linux-kernel-owner@vger.kernel.org Thu Aug 09 12:11:52 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SzPiZ-0000Ix-2E
	for glk-linux-kernel-3@plane.gmane.org; Thu, 09 Aug 2012 12:11:51 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1757608Ab2HIKLo (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Thu, 9 Aug 2012 06:11:44 -0400
Original-Received: from eu1sys200aog115.obsmtp.com ([207.126.144.139]:54423 "EHLO
	eu1sys200aog115.obsmtp.com" rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1751477Ab2HIKLm convert rfc822-to-8bit
	(ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Thu, 9 Aug 2012 06:11:42 -0400
Original-Received: from beta.dmz-us.st.com ([167.4.1.35]) (using TLSv1) by eu1sys200aob115.postini.com ([207.126.147.11]) with SMTP
	ID DSNKUCOM1FnnBCGWvjykP8G9TRw5/1+ZU6RC@postini.com; Thu, 09 Aug 2012 10:11:41 UTC
Original-Received: from zeta.dmz-us.st.com (ns4.st.com [167.4.16.71])
	by beta.dmz-us.st.com (STMicroelectronics) with ESMTP id 7F0FA57;
	Thu,  9 Aug 2012 10:10:55 +0000 (GMT)
Original-Received: from relay2.stm.gmessaging.net (unknown [10.230.100.18])
	by zeta.dmz-us.st.com (STMicroelectronics) with ESMTP id BD00C45;
	Thu,  9 Aug 2012 06:38:17 +0000 (GMT)
Original-Received: from exdcvycastm022.EQ1STM.local (alteon-source-exch [10.230.100.61])
	(using TLSv1 with cipher RC4-MD5 (128/128 bits))
	(Client CN "exdcvycastm022", Issuer "exdcvycastm022" (not verified))
	by relay2.stm.gmessaging.net (Postfix) with ESMTPS id 22EBBA809C;
	Thu,  9 Aug 2012 12:11:16 +0200 (CEST)
Original-Received: from EXDCVYMBSTM006.EQ1STM.local ([10.6.6.68]) by
 exdcvycastm022.EQ1STM.local ([10.230.100.30]) with mapi; Thu, 9 Aug 2012
 12:11:20 +0200
Thread-Topic: [PATCHv2 3/4] modem_shm: u8500-shm: U8500 Shared Memory Driver
Thread-Index: Ac11UoyzEwrmbM5vRDy665DWYG6wGAAwl5+g
In-Reply-To: <20120808114606.2a1a3bd3@pyramind.ukuu.org.uk>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
acceptlanguage: en-US
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1340609 gmane.linux.network:239536 gmane.linux.documentation:6156
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1340609>

> > Basically it doesn't suit our protocol of having base addr, read/write
> > pointer, locking etc as the same set of structures and protocol will
> > be used on the modem side implementation.
> 
> Ok. What happens about endianness or is the modem always the same
> endianness as the host ?

Yes its always the same endianess, because the same phonet protocol is
used on APE and modem side.
The flow on APE is like user space->kernel network->phonet->shrm
And on modem side its shrm->phonet->modem stack

> 
> 
> > > > +   if (len <= 0)
> > > > +           return -EFAULT;
> > >
> > > How can this occur ?
> >
> > Check for error condition
> 
> So how can it occur ? The kernel char layer will never pass a negative length
> to a driver ?
> 

Ok, will remove this.

> > > What happens with two parallel reads - I don't see what prevents
> > > corruption if that occurs or one racing read freeing the message
> > > before another has finished processing it.
> >
> > Two parallel reads for different L2 headers can happen, but within the
> > same L2 header is out of the scope. Since the client using this in
> > user space will not know about the message. i.e which msg is for which
> > client. Hence so that scenario is not considered.
> 
> What stops a hostile application (or programmer error) from doing so
> deliberately ?
> 

Will add checks over here so as to not to do so.

> > > > +   if (len <= 0 || buf == NULL)
> > > > +           return -EFAULT;
> > >
> > > len < 0 cannot occur, buf == NULL is not an error
> >
> > Error handling is for what which is not expected.
> 
> Well buf = NULL is not an error (its weird but its not an error)
> 
> Also length < 0 is never passed from the char layer to a driver.
> 

Ok will remove.

> > > > +           dev_err(shrm->dev, "Device not opened yet\n");
> > > > +           mutex_unlock(&isa_lock);
> > > > +           return -ENODEV;
> > > > +   }
> > > > +   atomic_set(&isa_context->is_open[idx], 1);
> > >
> > > How do you know it will always be one. Also given it's within the
> > > mutex in all uses I can see why is it an atomic ?
> > >
> >
> > As per our assumptions/protocol only one client per L2 header.
> 
> So why use atomic. Also you can't make that assumption. If you need your
> device to have one user per channel and one write call at a time you must
> enforce it. There is nothing wrong with enforcing it but it needs to be done.
> 
> That means your open path probably wants to do something (locked) like
> 
> 	if (foo->users)
> 		return -EBUSY;
> 


Done, will add check to restrict open for only one process at a time.

> you still then need to use a mutex or similar in read and write because a
> single open can pass to multiple processes (or multiple writes/reads occur at
> once in a multi-threaded app).
> 
> User/Kernel is the security boundary so the kernel code must be robust
> against a hostile user rather than assuming a correctly functioning library.
> 
> I suspect you simply need to wrap the read/write logic (except for a wait for
> new message) with a mutex and all will be well
> 

That should be fine as far as the process is able to differentiate the messages.

> > > > +   if (get_boot_state() != BOOT_DONE) {
> > > > +           dev_err(shrm->dev, "Boot is not done\n");
> > > > +           return -EBUSY;
> > > > +   }
> > >
> > > Is it guaranteed that this is a one way path - ie a device never
> > > goes back into BOOT state ?
> >
> > No, on modem reset, everything happens from first.
> 
> So what occurs if this modem reset happens between that test and the next
> line. You have no locking on it so you've got no guarantee that it won't reset
> during the test. So it covers the initial set up case but not a reset.
> 
> It may not matter providing a reset wakes up things and it is handled later. It
> just looks suspicious.
> 

That always remain open, there is no end for that suspection. What we need to
is to secure is the access to registers. Before access of any register we need to
make sure that modem is awake and not reset.

> > > > +   isadev = &isa_context->isadev[idx];
> > > > +   if (filp != NULL)
> > > > +           filp->private_data = isadev;
> > >
> > > How can filp be NULL ?
> >
> > :-) just a error condition check
> 
> These tests are not useful, if anything they hide bugs. If you have a real
> reason to check (eg its a complicated internal path) then use
> 
> 	WARN_ON(condition)
> 
> or
> 
> 	BUG_ON(condition)
> 
> so it gets noticed. For core kernel things however there is no point checking.
> If the kernel ever passes you null as a file pointer the game is already over.
> 

Done.

> > > > +   for (no_dev = 0; no_dev < ISA_DEVICES; no_dev++) {
> > > > +           atomic_set(&isa_context->is_open[no_dev], 1);
> > > > +           device_create(isa_context->shm_class, NULL,
> > > > +                           MKDEV(MAJOR(dev_id),
> > > > +                           map_dev[no_dev].l2_header), NULL,
> > > > +                           map_dev[no_dev].name);
> > > > +   }
> > >
> > > What happens if I open the device right here... ?
> >
> > It can be opened, but nothing thereafter, since modem is not booted.
> 
> You've not yet set up the isa_context but yes.. looks like it is covered by the
> boot check.
> 
> (A good rule of thumb is btw to initialise everything, then register
> stuff)
> 

Sure will redo this.

Thanks and Regards,
Arun R Murthy
------------------
