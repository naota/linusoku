Path: news.gmane.org!not-for-mail
From: "J. Bruce Fields" <bfields@fieldses.org>
Newsgroups: gmane.linux.kernel,gmane.linux.nfs,gmane.linux.network,gmane.linux.openvz.devel
Subject: Re: [RFC PATCH 1/2] unix sockets: add ability for search for peer
 from passed root
Date: Fri, 10 Aug 2012 14:10:02 -0400
Lines: 125
Approved: news@gmane.org
Message-ID: <20120810181002.GB17404@fieldses.org>
References: <20120810125701.7115.71612.stgit@localhost.localdomain>
 <20120810125730.7115.96005.stgit@localhost.localdomain>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Trace: dough.gmane.org 1344622222 32122 80.91.229.3 (10 Aug 2012 18:10:22 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Fri, 10 Aug 2012 18:10:22 +0000 (UTC)
Cc: Trond.Myklebust@netapp.com, davem@davemloft.net,
	linux-nfs@vger.kernel.org, eric.dumazet@gmail.com,
	xemul@parallels.com, netdev@vger.kernel.org,
	linux-kernel@vger.kernel.org, viro@zeniv.linux.org.uk,
	tim.c.chen@linux.intel.com, devel@openvz.org
To: Stanislav Kinsbursky <skinsbursky@parallels.com>
Original-X-From: linux-kernel-owner@vger.kernel.org Fri Aug 10 20:10:21 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SztfA-0005cJ-ST
	for glk-linux-kernel-3@plane.gmane.org; Fri, 10 Aug 2012 20:10:21 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1759513Ab2HJSKQ (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Fri, 10 Aug 2012 14:10:16 -0400
Original-Received: from fieldses.org ([174.143.236.118]:46620 "EHLO fieldses.org"
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753369Ab2HJSKN (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Fri, 10 Aug 2012 14:10:13 -0400
Original-Received: from bfields by fieldses.org with local (Exim 4.72)
	(envelope-from <bfields@fieldses.org>)
	id 1Sztes-0004cc-TO; Fri, 10 Aug 2012 14:10:02 -0400
Content-Disposition: inline
In-Reply-To: <20120810125730.7115.96005.stgit@localhost.localdomain>
User-Agent: Mutt/1.5.20 (2009-06-14)
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1341376 gmane.linux.nfs:51491 gmane.linux.network:239742 gmane.linux.openvz.devel:1993
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1341376>

On Fri, Aug 10, 2012 at 04:57:30PM +0400, Stanislav Kinsbursky wrote:
> This helper is used stream sockets yet.
> All is simple: if non-NULL struct path was passed to unix_find_other(), then
> vfs_path_lookup() is called instead of kern_path().

I'm having some trouble parsing the changelog.  Maybe something like?:

	unix sockets: add ability to look up using passed-in root

	Export a unix_stream_connect_root() helper that allows a caller
	to optionally pass in a root path, in which case the lookup will
	be done relative to the given path instead of the current
	working directory.

I guess this is a question for the networking people, but: will it cause
problems to have sunrpc calling directly into the unix socket code?

(And if so, what would be the alternative: define some variant of
sockaddr_un that includes the root path?  Something better?)

--b.

> 
> Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
> ---
>  include/net/af_unix.h |    2 ++
>  net/unix/af_unix.c    |   25 ++++++++++++++++++-------
>  2 files changed, 20 insertions(+), 7 deletions(-)
> 
> diff --git a/include/net/af_unix.h b/include/net/af_unix.h
> index 2ee33da..559467e 100644
> --- a/include/net/af_unix.h
> +++ b/include/net/af_unix.h
> @@ -67,6 +67,8 @@ struct unix_sock {
>  
>  long unix_inq_len(struct sock *sk);
>  long unix_outq_len(struct sock *sk);
> +int unix_stream_connect_root(struct path *root, struct socket *sock,
> +			     struct sockaddr *uaddr, int addr_len, int flags);
>  
>  #ifdef CONFIG_SYSCTL
>  extern int unix_sysctl_register(struct net *net);
> diff --git a/net/unix/af_unix.c b/net/unix/af_unix.c
> index 641f2e4..a790ebc 100644
> --- a/net/unix/af_unix.c
> +++ b/net/unix/af_unix.c
> @@ -759,7 +759,7 @@ out:	mutex_unlock(&u->readlock);
>  	return err;
>  }
>  
> -static struct sock *unix_find_other(struct net *net,
> +static struct sock *unix_find_other(struct net *net, struct path *root,
>  				    struct sockaddr_un *sunname, int len,
>  				    int type, unsigned int hash, int *error)
>  {
> @@ -769,7 +769,11 @@ static struct sock *unix_find_other(struct net *net,
>  
>  	if (sunname->sun_path[0]) {
>  		struct inode *inode;
> -		err = kern_path(sunname->sun_path, LOOKUP_FOLLOW, &path);
> +
> +		if (root)
> +			err = vfs_path_lookup(root->dentry, root->mnt, sunname->sun_path, LOOKUP_FOLLOW, &path);
> +		else
> +			err = kern_path(sunname->sun_path, LOOKUP_FOLLOW, &path);
>  		if (err)
>  			goto fail;
>  		inode = path.dentry->d_inode;
> @@ -979,7 +983,7 @@ static int unix_dgram_connect(struct socket *sock, struct sockaddr *addr,
>  			goto out;
>  
>  restart:
> -		other = unix_find_other(net, sunaddr, alen, sock->type, hash, &err);
> +		other = unix_find_other(net, NULL, sunaddr, alen, sock->type, hash, &err);
>  		if (!other)
>  			goto out;
>  
> @@ -1053,8 +1057,8 @@ static long unix_wait_for_peer(struct sock *other, long timeo)
>  	return timeo;
>  }
>  
> -static int unix_stream_connect(struct socket *sock, struct sockaddr *uaddr,
> -			       int addr_len, int flags)
> +int unix_stream_connect_root(struct path *root, struct socket *sock,
> +			     struct sockaddr *uaddr, int addr_len, int flags)
>  {
>  	struct sockaddr_un *sunaddr = (struct sockaddr_un *)uaddr;
>  	struct sock *sk = sock->sk;
> @@ -1098,7 +1102,7 @@ static int unix_stream_connect(struct socket *sock, struct sockaddr *uaddr,
>  
>  restart:
>  	/*  Find listening sock. */
> -	other = unix_find_other(net, sunaddr, addr_len, sk->sk_type, hash, &err);
> +	other = unix_find_other(net, root, sunaddr, addr_len, sk->sk_type, hash, &err);
>  	if (!other)
>  		goto out;
>  
> @@ -1227,6 +1231,13 @@ out:
>  		sock_put(other);
>  	return err;
>  }
> +EXPORT_SYMBOL_GPL(unix_stream_connect_root);
> +
> +static int unix_stream_connect(struct socket *sock, struct sockaddr *uaddr,
> +				    int addr_len, int flags)
> +{
> +	return unix_stream_connect_root(NULL, sock, uaddr, addr_len, flags);
> +}
>  
>  static int unix_socketpair(struct socket *socka, struct socket *sockb)
>  {
> @@ -1508,7 +1519,7 @@ restart:
>  		if (sunaddr == NULL)
>  			goto out_free;
>  
> -		other = unix_find_other(net, sunaddr, namelen, sk->sk_type,
> +		other = unix_find_other(net, NULL, sunaddr, namelen, sk->sk_type,
>  					hash, &err);
>  		if (other == NULL)
>  			goto out_free;
> 
> --
> To unsubscribe from this list: send the line "unsubscribe linux-nfs" in
> the body of a message to majordomo@vger.kernel.org
> More majordomo info at  http://vger.kernel.org/majordomo-info.html
