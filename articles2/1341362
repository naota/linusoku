Path: news.gmane.org!not-for-mail
From: Greg Thelen <gthelen-hpIqsD4AKlfQT0dZR+AlfA@public.gmane.org>
Newsgroups: gmane.linux.kernel.cgroups,gmane.linux.kernel,gmane.linux.kernel.mm,gmane.linux.openvz.devel
Subject: Re: [PATCH v2 07/11] mm: Allocate kernel pages to the right memcg
Date: Fri, 10 Aug 2012 10:36:58 -0700
Lines: 113
Approved: news@gmane.org
Message-ID: <xr937gt6fy2t.fsf@gthelen.mtv.corp.google.com>
References: <1344517279-30646-1-git-send-email-glommer@parallels.com>
	<1344517279-30646-8-git-send-email-glommer@parallels.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Trace: dough.gmane.org 1344620231 16075 80.91.229.3 (10 Aug 2012 17:37:11 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Fri, 10 Aug 2012 17:37:11 +0000 (UTC)
Cc: <linux-kernel-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>, <linux-mm-Bw31MaZKKs3YtjvyW6yDsg@public.gmane.org>,
	<cgroups-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>, <devel-GEFAQzZX7r8dnm+yROfE0A@public.gmane.org>,
	Michal Hocko <mhocko-AlSwsSmVLrQ@public.gmane.org>,
	Johannes Weiner <hannes-druUgvl0LCNAfugRpC6u6w@public.gmane.org>,
	Andrew Morton <akpm-de/tnXTf+JLsfHDXvbKv3WD2FQJk+8+b@public.gmane.org>,
	<kamezawa.hiroyu-+CUm20s59erQFUHtdCDX3A@public.gmane.org>, Christoph Lameter <cl-vYTEC60ixJUAvxtiuMwx3w@public.gmane.org>,
	David Rientjes <rientjes-hpIqsD4AKlfQT0dZR+AlfA@public.gmane.org>,
	Pekka Enberg <penberg-DgEjT+Ai2ygdnm+yROfE0A@public.gmane.org>,
	Pekka Enberg <penberg-bbCR+/B0CizivPeTLB3BmA@public.gmane.org>,
	Suleiman Souhlal <suleiman-hpIqsD4AKlfQT0dZR+AlfA@public.gmane.org>
To: Glauber Costa <glommer-bzQdu9zFT3WakBO8gow8eQ@public.gmane.org>
Original-X-From: cgroups-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org Fri Aug 10 19:37:09 2012
Return-path: <cgroups-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>
Envelope-to: glkc-cgroups-wOFGN7rlS/M9smdsby/KFg@public.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <cgroups-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>)
	id 1Szt8z-0005PM-7T
	for glkc-cgroups-wOFGN7rlS/M9smdsby/KFg@public.gmane.org; Fri, 10 Aug 2012 19:37:05 +0200
Original-Received: (majordomo-u79uwXL29TY76Z2rM5mHXA@public.gmane.org) by vger.kernel.org via listexpand
	id S1758306Ab2HJRhD (ORCPT <rfc822;glkc-cgroups@m.gmane.org>);
	Fri, 10 Aug 2012 13:37:03 -0400
Original-Received: from mail-ob0-f202.google.com ([209.85.214.202]:41624 "EHLO
	mail-ob0-f202.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754746Ab2HJRhA (ORCPT
	<rfc822;cgroups-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>); Fri, 10 Aug 2012 13:37:00 -0400
Original-Received: by obbwc20 with SMTP id wc20so1318573obb.1
        for <cgroups-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>; Fri, 10 Aug 2012 10:37:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=from:to:cc:subject:references:date:message-id:user-agent
         :mime-version:content-type;
        bh=CAm0/JOhVEGa5dWCmwgvqyVstUtn1HmtE4NPaattVCY=;
        b=TwoOuwsp+/CE/L4CsC9XQZLs5BcYzdEdkw11ciHNGzdppbN7nuUPvEPnJloSuMJ+P5
         bGgkQ6v8bdi4T5ShIPOkCG9YHjQsvaz71h2a03/HWVlVNxT8NWN7My1zh/5eHFjtxYya
         gz6sVoJKvHPtkEFz0/5x6omiCDJkoCwAYL2G7c7uPV4fkZBlGqyUMuLeSaLMZmDVFbQz
         30q7cnr8kE8q2PMmhZyIqDPyksnKaRwHYLVTjNmckgu6Gv2k3Ytt4HnP30FR9LWQrpVt
         22C369I8vS8HhpYKWK6tpykhf4Ke4uxXmfySgNIJ6v7jkmb9NciDMsN9AKVx5u9RIk4N
         Egvw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=from:to:cc:subject:references:date:message-id:user-agent
         :mime-version:content-type:x-gm-message-state;
        bh=CAm0/JOhVEGa5dWCmwgvqyVstUtn1HmtE4NPaattVCY=;
        b=I8uQUgED+qb8/u+PgN61YMuqPCj5FYU2M7iEVJM9LLWjdGcE2gijP6xfO1MMJO9Jrj
         HinGiWCd9O4ArbD82iVerAxnvPjw2RLGGsWlgbQjugowIlhn6PPTc1Xf28rtqSEYl0oT
         p0Ba5iFWcirZzui5MktkG9kOP5SbAu87jHpcwoH6zFF4qw20pLTiMjCQCeQdDMKAd2XW
         Vs4P8BpElx2PEbDYEfScHy09mJWUBNmMIPxhmrQfampAqZfh/XL7O/auiUraedYXVNuA
         Y4raB2/78r0WjSpnPUeHWIfBse4eONdEou845dEbayctIoshvstCdNJNEvurqaSjziOP
         S6tQ==
Original-Received: by 10.43.64.134 with SMTP id xi6mr215201icb.12.1344620219904;
        Fri, 10 Aug 2012 10:36:59 -0700 (PDT)
Original-Received: by 10.43.64.134 with SMTP id xi6mr215177icb.12.1344620219831;
        Fri, 10 Aug 2012 10:36:59 -0700 (PDT)
Original-Received: from wpzn4.hot.corp.google.com (216-239-44-65.google.com [216.239.44.65])
        by gmr-mx.google.com with ESMTPS id os10si334116igc.1.2012.08.10.10.36.59
        (version=TLSv1/SSLv3 cipher=AES128-SHA);
        Fri, 10 Aug 2012 10:36:59 -0700 (PDT)
Original-Received: from gthelen.mtv.corp.google.com (gthelen.mtv.corp.google.com [172.18.96.19])
	by wpzn4.hot.corp.google.com (Postfix) with ESMTP id 4E4EF1E0043;
	Fri, 10 Aug 2012 10:36:59 -0700 (PDT)
Original-Received: by gthelen.mtv.corp.google.com (Postfix, from userid 104648)
	id DE8E2100B43; Fri, 10 Aug 2012 10:36:58 -0700 (PDT)
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/23.1 (gnu/linux)
X-Gm-Message-State: ALoCoQl8xkBVvLRwyK5bN9NPCucIP9BT2GBo3FsSsglow6EXhhHprFIEP8bXumBQ2GkNUoJlZ50RqRBi1cjfmZ5NX0Hbf9rVLqwLWn9obEaQn4RvK8aLU+TL8tGaLJ9itqumOb9o/uHfw/FiNqFON2iLiuhkj2bnEhpSnmnveNSkXl0Fd969KctbioGlx6/Luo/JgPN+csMo
Original-Sender: cgroups-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org
Precedence: bulk
List-ID: <cgroups.vger.kernel.org>
X-Mailing-List: cgroups-u79uwXL29TY76Z2rM5mHXA@public.gmane.org
Xref: news.gmane.org gmane.linux.kernel.cgroups:3576 gmane.linux.kernel:1341362 gmane.linux.kernel.mm:84017 gmane.linux.openvz.devel:1989
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1341362>

On Thu, Aug 09 2012, Glauber Costa wrote:

> When a process tries to allocate a page with the __GFP_KMEMCG flag, the
> page allocator will call the corresponding memcg functions to validate
> the allocation. Tasks in the root memcg can always proceed.
>
> To avoid adding markers to the page - and a kmem flag that would
> necessarily follow, as much as doing page_cgroup lookups for no reason,
> whoever is marking its allocations with __GFP_KMEMCG flag is responsible
> for telling the page allocator that this is such an allocation at
> free_pages() time. This is done by the invocation of
> __free_accounted_pages() and free_accounted_pages().
>
> Signed-off-by: Glauber Costa <glommer-bzQdu9zFT3WakBO8gow8eQ@public.gmane.org>
> CC: Christoph Lameter <cl-vYTEC60ixJUAvxtiuMwx3w@public.gmane.org>
> CC: Pekka Enberg <penberg-bbCR+/B0CizivPeTLB3BmA@public.gmane.org>
> CC: Michal Hocko <mhocko-AlSwsSmVLrQ@public.gmane.org>
> CC: Kamezawa Hiroyuki <kamezawa.hiroyu-+CUm20s59erQFUHtdCDX3A@public.gmane.org>
> CC: Johannes Weiner <hannes-druUgvl0LCNAfugRpC6u6w@public.gmane.org>
> CC: Suleiman Souhlal <suleiman-hpIqsD4AKlfQT0dZR+AlfA@public.gmane.org>
> ---
>  include/linux/gfp.h |  3 +++
>  mm/page_alloc.c     | 38 ++++++++++++++++++++++++++++++++++++++
>  2 files changed, 41 insertions(+)
>
> diff --git a/include/linux/gfp.h b/include/linux/gfp.h
> index d8eae4d..029570f 100644
> --- a/include/linux/gfp.h
> +++ b/include/linux/gfp.h
> @@ -370,6 +370,9 @@ extern void free_pages(unsigned long addr, unsigned int order);
>  extern void free_hot_cold_page(struct page *page, int cold);
>  extern void free_hot_cold_page_list(struct list_head *list, int cold);
>  
> +extern void __free_accounted_pages(struct page *page, unsigned int order);
> +extern void free_accounted_pages(unsigned long addr, unsigned int order);
> +
>  #define __free_page(page) __free_pages((page), 0)
>  #define free_page(addr) free_pages((addr), 0)
>  
> diff --git a/mm/page_alloc.c b/mm/page_alloc.c
> index b956cec..da341dc 100644
> --- a/mm/page_alloc.c
> +++ b/mm/page_alloc.c
> @@ -2532,6 +2532,7 @@ __alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order,
>  	struct page *page = NULL;
>  	int migratetype = allocflags_to_migratetype(gfp_mask);
>  	unsigned int cpuset_mems_cookie;
> +	void *handle = NULL;
>  
>  	gfp_mask &= gfp_allowed_mask;
>  
> @@ -2543,6 +2544,13 @@ __alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order,
>  		return NULL;
>  
>  	/*
> +	 * Will only have any effect when __GFP_KMEMCG is set.
> +	 * This is verified in the (always inline) callee
> +	 */
> +	if (!memcg_kmem_new_page(gfp_mask, &handle, order))
> +		return NULL;
> +
> +	/*
>  	 * Check the zones suitable for the gfp_mask contain at least one
>  	 * valid zone. It's possible to have an empty zonelist as a result
>  	 * of GFP_THISNODE and a memoryless node
> @@ -2583,6 +2591,8 @@ out:
>  	if (unlikely(!put_mems_allowed(cpuset_mems_cookie) && !page))
>  		goto retry_cpuset;
>  
> +	memcg_kmem_commit_page(page, handle, order);
> +
>  	return page;
>  }
>  EXPORT_SYMBOL(__alloc_pages_nodemask);
> @@ -2635,6 +2645,34 @@ void free_pages(unsigned long addr, unsigned int order)
>  
>  EXPORT_SYMBOL(free_pages);
>  
> +/*
> + * __free_accounted_pages and free_accounted_pages will free pages allocated
> + * with __GFP_KMEMCG.
> + *
> + * Those pages are accounted to a particular memcg, embedded in the
> + * corresponding page_cgroup. To avoid adding a hit in the allocator to search
> + * for that information only to find out that it is NULL for users who have no
> + * interest in that whatsoever, we provide these functions.
> + *
> + * The caller knows better which flags it relies on.
> + */
> +void __free_accounted_pages(struct page *page, unsigned int order)
> +{
> +	memcg_kmem_free_page(page, order);
> +	__free_pages(page, order);
> +}
> +EXPORT_SYMBOL(__free_accounted_pages);
> +
> +void free_accounted_pages(unsigned long addr, unsigned int order)
> +{
> +	if (addr != 0) {
> +		VM_BUG_ON(!virt_addr_valid((void *)addr));
> +		memcg_kmem_free_page(virt_to_page((void *)addr), order);
> +		__free_pages(virt_to_page((void *)addr), order);

Nit.  Is there any reason not to replace the above two lines with:
		__free_accounted_pages(virt_to_page((void *)addr), order);

> +	}
> +}
> +EXPORT_SYMBOL(free_accounted_pages);
> +
>  static void *make_alloc_exact(unsigned long addr, unsigned order, size_t size)
>  {
>  	if (addr) {
