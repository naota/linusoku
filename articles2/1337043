Path: news.gmane.org!not-for-mail
From: Silas Boyd-Wickizer <sbw@mit.edu>
Newsgroups: gmane.linux.kernel
Subject: [PATCH 1/3] Use get_online_cpus to avoid races involving
 for_each_online_cpu
Date: Thu, 2 Aug 2012 17:05:00 -0700
Lines: 74
Approved: news@gmane.org
Message-ID: <20120803000500.GB3443@mit.edu>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Trace: dough.gmane.org 1343952560 6012 80.91.229.3 (3 Aug 2012 00:09:20 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Fri, 3 Aug 2012 00:09:20 +0000 (UTC)
Cc: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>,
	"H. Peter Anvin" <hpa@zytor.com>,
	Thomas Gleixner <tglx@linutronix.de>, x86@kernel.org,
	Ingo Molnar <mingo@elte.hu>
To: linux-kernel@vger.kernel.org
Original-X-From: linux-kernel-owner@vger.kernel.org Fri Aug 03 02:09:19 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1Sx5S8-0007Vo-4o
	for glk-linux-kernel-3@plane.gmane.org; Fri, 03 Aug 2012 02:09:16 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752882Ab2HCAJH (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Thu, 2 Aug 2012 20:09:07 -0400
Original-Received: from mail-gg0-f174.google.com ([209.85.161.174]:50020 "EHLO
	mail-gg0-f174.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751790Ab2HCAJE (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Thu, 2 Aug 2012 20:09:04 -0400
Original-Received: by ggnl2 with SMTP id l2so155186ggn.19
        for <linux-kernel@vger.kernel.org>; Thu, 02 Aug 2012 17:09:04 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=sender:date:from:to:cc:subject:message-id:mime-version:content-type
         :content-disposition:user-agent;
        bh=vLA1shS85BJVf+KYkVXKCG5siiFkl/9Cczn7McfFZkE=;
        b=pxGlHFNxnDY/kIBj6JQoROeVxJlC/d3ddFDexT1HZSUANVwF4UdNhg/hF60ePItxOP
         TEjyys73bMwyOMfAt6lruYM9MnsGUDlT8jawa+tQC7Dtm09DnETz0UfEOGSKfY0cDCQg
         2tN5DtwA2xdFQ69FYtuegLyRHN0mw6CsUfurEo9znrN2/nlo0+ddvJjjjlbwhiNJ/d9l
         n6Ct8sG6Bh7/qA84IbJewC+3N54om06wn6dvFxY5i4pcoGzoSvxlJ6BoIRLHAo1JN0L3
         35zSnuibuJLf19pAA7enNbpFimQXZwSgVpkCIJ6RAz4amAw76U6vtOpNEuxbbJB6mSCN
         DvRQ==
Original-Received: by 10.50.10.201 with SMTP id k9mr6967311igb.28.1343952543576;
        Thu, 02 Aug 2012 17:09:03 -0700 (PDT)
Original-Received: from mit.edu (c-98-246-152-142.hsd1.or.comcast.net. [98.246.152.142])
        by mx.google.com with ESMTPS id y5sm16867266igb.11.2012.08.02.17.09.02
        (version=TLSv1/SSLv3 cipher=OTHER);
        Thu, 02 Aug 2012 17:09:02 -0700 (PDT)
Content-Disposition: inline
User-Agent: Mutt/1.5.21 (2010-09-15)
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1337043
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1337043>

If arch/x86/kernel/msr.c is a module, a CPU might offline or online
between the for_each_online_cpu(i) loop and the call to
register_hotcpu_notifier in msr_init or the call to
unregister_hotcpu_notifier in msr_exit. The potential races can lead
to leaks/duplicates, attempts to destroy non-existant devices, or
random pointer dereferences.

For example, in msr_init if:

        for_each_online_cpu(i) {
                err = msr_device_create(i);
                if (err != 0)
                        goto out_class;
        }
        <----- CPU offlines
        register_hotcpu_notifier(&msr_class_cpu_notifier);

and the CPU never onlines before msr_exit, then the module will never
call msr_device_destroy for the associated CPU.

This fix surrounds for_each_online_cpu and register_hotcpu_notifier or
unregister_hotcpu_notifier with get_online_cpus+put_online_cpus.

Tested on a VM.

Signed-off-by: Silas Boyd-Wickizer <sbw@mit.edu>
---
 arch/x86/kernel/msr.c |    5 +++++
 1 file changed, 5 insertions(+)

diff --git a/arch/x86/kernel/msr.c b/arch/x86/kernel/msr.c
index eb11369..a7c5661 100644
--- a/arch/x86/kernel/msr.c
+++ b/arch/x86/kernel/msr.c
@@ -257,12 +257,14 @@ static int __init msr_init(void)
 		goto out_chrdev;
 	}
 	msr_class->devnode = msr_devnode;
+	get_online_cpus();
 	for_each_online_cpu(i) {
 		err = msr_device_create(i);
 		if (err != 0)
 			goto out_class;
 	}
 	register_hotcpu_notifier(&msr_class_cpu_notifier);
+	put_online_cpus();
 
 	err = 0;
 	goto out;
@@ -271,6 +273,7 @@ out_class:
 	i = 0;
 	for_each_online_cpu(i)
 		msr_device_destroy(i);
+	put_online_cpus();
 	class_destroy(msr_class);
 out_chrdev:
 	__unregister_chrdev(MSR_MAJOR, 0, NR_CPUS, "cpu/msr");
@@ -281,11 +284,13 @@ out:
 static void __exit msr_exit(void)
 {
 	int cpu = 0;
+	get_online_cpus();
 	for_each_online_cpu(cpu)
 		msr_device_destroy(cpu);
 	class_destroy(msr_class);
 	__unregister_chrdev(MSR_MAJOR, 0, NR_CPUS, "cpu/msr");
 	unregister_hotcpu_notifier(&msr_class_cpu_notifier);
+	put_online_cpus();
 }
 
 module_init(msr_init);
-- 
1.7.10.4

