Path: news.gmane.org!not-for-mail
From: Nicolas Pitre <nicolas.pitre@linaro.org>
Newsgroups: gmane.linux.kernel,gmane.linux.ports.arm.kernel
Subject: Re: [PATCH 04/22] ARM: LPAE: support 64-bit virt/phys patching
Date: Sun, 5 Aug 2012 22:19:04 -0400 (EDT)
Lines: 68
Approved: news@gmane.org
Message-ID: <alpine.LFD.2.02.1208052207040.5231@xanadu.home>
References: <1343775898-28345-1-git-send-email-cyril@ti.com> <1343775898-28345-5-git-send-email-cyril@ti.com> <alpine.LFD.2.02.1208040226060.5231@xanadu.home> <501E815D.1050707@ti.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Trace: dough.gmane.org 1344219559 15754 80.91.229.3 (6 Aug 2012 02:19:19 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Mon, 6 Aug 2012 02:19:19 +0000 (UTC)
Cc: linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
	arnd@arndb.de, catalin.marinas@arm.com, linux@arm.linux.org.uk,
	will.deacon@arm.com
To: Cyril Chemparathy <cyril@ti.com>
Original-X-From: linux-kernel-owner@vger.kernel.org Mon Aug 06 04:19:18 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SyCub-0004nI-8y
	for glk-linux-kernel-3@plane.gmane.org; Mon, 06 Aug 2012 04:19:17 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755523Ab2HFCTJ (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Sun, 5 Aug 2012 22:19:09 -0400
Original-Received: from mail-qa0-f46.google.com ([209.85.216.46]:60064 "EHLO
	mail-qa0-f46.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1755457Ab2HFCTH (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Sun, 5 Aug 2012 22:19:07 -0400
Original-Received: by qadb17 with SMTP id b17so617218qad.19
        for <linux-kernel@vger.kernel.org>; Sun, 05 Aug 2012 19:19:06 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=date:from:to:cc:subject:in-reply-to:message-id:references
         :user-agent:mime-version:content-type:x-gm-message-state;
        bh=I+ErMf1h7MIJhJXXZ5/BBj0FptL87ywYT5K4dT+ghBA=;
        b=hneVAV5yDpw+bd53vEVhPICgNalfSfwgVkRF/06MoZEdAFTcnXq377A8Xuup2yd5Lf
         gQd0tU28tul9U4rMNNLG1nx3ztwPHyiuhUMBgRrvU3XmjyPkKTWvmJs0PSddDgLXm+Rj
         Vz6eSZMtxKcwGFsvJKGOypz/BFnj6MChOoskngPL7y/gO202T1jWWv32RMTIdsN4vOC7
         29qpIJAiLbA1kDeeV/RCkDrA7fU9wFwkXCAMV0RlBFnHWVqUunTulX4wtwdIrYqGJ9QJ
         itKfUhMk4Yj49rSwSPUXQSeACB58lqTq+imBnrKIxEcZcUdWQtTZ+HNNBUhIgyLwJCNH
         XQEQ==
Original-Received: by 10.229.122.220 with SMTP id m28mr4705083qcr.49.1344219546681;
        Sun, 05 Aug 2012 19:19:06 -0700 (PDT)
Original-Received: from xanadu.home (modemcable149.196-201-24.mc.videotron.ca. [24.201.196.149])
        by mx.google.com with ESMTPS id ea5sm13092797qab.2.2012.08.05.19.19.05
        (version=TLSv1/SSLv3 cipher=OTHER);
        Sun, 05 Aug 2012 19:19:05 -0700 (PDT)
In-Reply-To: <501E815D.1050707@ti.com>
User-Agent: Alpine 2.02 (LFD 1266 2009-07-14)
X-Gm-Message-State: ALoCoQkCxoOjatQCxElR/30zTAKY7QkuT9hClU161PTCjtu3huGsoZp3m0j6J6m2PXhGGNKWhr6l
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1337996 gmane.linux.ports.arm.kernel:180299
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1337996>

On Sun, 5 Aug 2012, Cyril Chemparathy wrote:

> Hi Nicolas,
> 
> On 8/4/2012 2:49 AM, Nicolas Pitre wrote:
> > On Tue, 31 Jul 2012, Cyril Chemparathy wrote:
> > 
> > > This patch adds support for 64-bit physical addresses in virt_to_phys
> > > patching.  This does not do real 64-bit add/sub, but instead patches in
> > > the
> > > upper 32-bits of the phys_offset directly into the output of virt_to_phys.
> > 
> > You should explain _why_ you do not a real aadd/sub.  I did deduce it
> > but that might not be obvious to everyone.  Also this subtlety should be
> > commented in the code as well.
> > 
> 
> We could not do an ADDS + ADC here because the carry is not guaranteed to be
> retained and passed into the ADC.  This is because the compiler is free to
> insert all kinds of stuff between the two non-volatile asm blocks.
> 
> Is there another subtlety here that I have missed out on entirely?

The high bits for the valid physical memory address range for which 
virt_to_phys and phys_to_virt can be used are always the same.  
Therefore no aadition at all is needed, fake or real.  Only providing 
those bits in the top word for the value returned by virt_to_phys is 
needed.

> > > In addition to adding 64-bit support, this patch also adds a
> > > set_phys_offset()
> > > helper that is needed on architectures that need to modify PHYS_OFFSET
> > > during
> > > initialization.
> > > 
> > > Signed-off-by: Cyril Chemparathy <cyril@ti.com>
> > > ---
> > >   arch/arm/include/asm/memory.h |   22 +++++++++++++++-------
> > >   arch/arm/kernel/head.S        |    6 ++++++
> > >   arch/arm/kernel/setup.c       |   14 ++++++++++++++
> > >   3 files changed, 35 insertions(+), 7 deletions(-)
> > > 
> > > diff --git a/arch/arm/include/asm/memory.h b/arch/arm/include/asm/memory.h
> > > index 4a0108f..110495c 100644
> > > --- a/arch/arm/include/asm/memory.h
> > > +++ b/arch/arm/include/asm/memory.h
> > > @@ -153,23 +153,31 @@
> > >   #ifdef CONFIG_ARM_PATCH_PHYS_VIRT
> > > 
> > >   extern unsigned long __pv_phys_offset;
> > > -#define PHYS_OFFSET __pv_phys_offset
> > > -
> > > +extern unsigned long __pv_phys_offset_high;
> > 
> > As mentioned previously, this is just too ugly.  Please make
> > __pv_phys_offset into a phys_addr_t instead and mask the low/high parts
> > as needed in __virt_to_phys().
> > 
> 
> Maybe u64 instead of phys_addr_t to keep the sizing non-variable?

No.  When not using LPAE, we don't have to pay the price of a u64 value.  
That's why the phys_addr_t type is conditionally defined.  You already 
do  extra processing in virt_to_phys when sizeof(phys_addr_t) > 4 which 
is perfect for dealing with this issue.


Nicolas
