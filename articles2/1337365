Path: news.gmane.org!not-for-mail
From: =?ISO-8859-15?Q?Ren=E9_B=FCrgel?= <rene.buergel-h7yWMHjYvuCzQB+pC5nmwQ@public.gmane.org>
Newsgroups: gmane.linux.usb.general,gmane.linux.kernel
Subject: Re: [PATCH 3/3]: ezusb cleanup, FX2 support, firmware downloading
 support
Date: Fri, 03 Aug 2012 17:18:04 +0200
Lines: 366
Approved: news@gmane.org
Message-ID: <501BEBAC.8070309@sohard.de>
References: <501BE8F3.6020608@sohard.de>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-15;
	format=flowed
Content-Transfer-Encoding: QUOTED-PRINTABLE
X-Trace: dough.gmane.org 1344006977 8388 80.91.229.3 (3 Aug 2012 15:16:17 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Fri, 3 Aug 2012 15:16:17 +0000 (UTC)
Cc: linux-kernel-u79uwXL29TY76Z2rM5mHXA@public.gmane.org
To: linux-usb-u79uwXL29TY76Z2rM5mHXA@public.gmane.org
Original-X-From: linux-usb-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org Fri Aug 03 17:16:17 2012
Return-path: <linux-usb-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>
Envelope-to: glug-linux-usb-wOFGN7rlS/M9smdsby/KFg@public.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-usb-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>)
	id 1SxJbr-0001UX-Cu
	for glug-linux-usb-wOFGN7rlS/M9smdsby/KFg@public.gmane.org; Fri, 03 Aug 2012 17:16:16 +0200
Original-Received: (majordomo-u79uwXL29TY76Z2rM5mHXA@public.gmane.org) by vger.kernel.org via listexpand
	id S1754136Ab2HCPQN convert rfc822-to-quoted-printable (ORCPT
	<rfc822;glug-linux-usb@m.gmane.org>); Fri, 3 Aug 2012 11:16:13 -0400
Original-Received: from shmail0.sohard.de ([212.114.139.117]:56177 "EHLO
	shmail0.sohard.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754165Ab2HCPQM (ORCPT
	<rfc822;linux-usb-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>); Fri, 3 Aug 2012 11:16:12 -0400
Original-Received: from localhost (localhost [127.0.0.1])
	by shmail0.sohard.de (Postfix) with ESMTP id 50E4E61E17D4;
	Fri,  3 Aug 2012 17:16:11 +0200 (CEST)
X-Virus-Scanned: amavisd-new at shmail0.sohard.de
Original-Received: from shmail0.sohard.de ([127.0.0.1])
	by localhost (shmail0.sohard.de [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id H4mQ92Kt7js2; Fri,  3 Aug 2012 17:16:10 +0200 (CEST)
Original-Received: from [192.168.144.245] (FUE-RBUERGEL.fue.sohard.de [192.168.144.245])
	by shmail0.sohard.de (Postfix) with ESMTPSA id F136C61E17B4;
	Fri,  3 Aug 2012 17:16:09 +0200 (CEST)
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:14.0) Gecko/20120713 Thunderbird/14.0
In-Reply-To: <501BE8F3.6020608-h7yWMHjYvuCzQB+pC5nmwQ@public.gmane.org>
Original-Sender: linux-usb-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org
Precedence: bulk
List-ID: <linux-usb.vger.kernel.org>
X-Mailing-List: linux-usb-u79uwXL29TY76Z2rM5mHXA@public.gmane.org
Xref: news.gmane.org gmane.linux.usb.general:68850 gmane.linux.kernel:1337365
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1337365>

This patch adds new functions to upload firmware to the controller. The=
=20
drivers currently using ezusb are adapted to use these new functions.

This also fixes a bug occuring during firmware loading in the=20
whiteheat-driver:
The driver iterates over an ihex-formatted firmware using ++ on a "cons=
t=20
struct ihex_binrec*" which leads to faulty results, because ihex data i=
s=20
read as length. The function "ihex_next_binrec(record)" has so be used=20
to work correctly

Signed-off-by: Ren=E9 B=FCrgel <rene.buergel-h7yWMHjYvuCzQB+pC5nmwQ@public.gmane.org>
--
diff --git a/drivers/usb/serial/ezusb.c b/drivers/usb/serial/ezusb.c
index 351988d..867a3e1 100644
--- a/drivers/usb/serial/ezusb.c
+++ b/drivers/usb/serial/ezusb.c
@@ -13,6 +13,8 @@
  #include <linux/slab.h>
  #include <linux/module.h>
  #include <linux/usb.h>
+#include <linux/firmware.h>
+#include <linux/ihex.h>

  struct ezusb_fx_type {
      /* EZ-USB Control and Status Register.  Bit 0 controls 8051 reset=
 */
@@ -82,3 +84,80 @@ int ezusb_fx2_set_reset(struct usb_device *dev,=20
unsigned char reset_bit)
      return ezusb_set_reset(dev, ezusb_fx2.cpucs_reg, reset_bit);
  }
  EXPORT_SYMBOL_GPL(ezusb_fx2_set_reset);
+
+static int ezusb_ihex_firmware_download(struct usb_device *dev,
+                    struct ezusb_fx_type fx,
+                    const char *firmware_path)
+{
+    int ret =3D -ENOENT;
+    const struct firmware *firmware =3D NULL;
+    const struct ihex_binrec *record;
+
+    if (request_ihex_firmware(&firmware, firmware_path,
+                  &dev->dev)) {
+        dev_err(&dev->dev,
+            "%s - request \"%s\" failed\n",
+            __func__, firmware_path);
+        goto out;
+    }
+
+    ret =3D ezusb_set_reset(dev, fx.cpucs_reg, 0);
+    if (ret < 0)
+        goto out;
+
+    record =3D (const struct ihex_binrec *)firmware->data;
+    for (; record; record =3D ihex_next_binrec(record)) {
+        if (be32_to_cpu(record->addr) > fx.max_internal_adress) {
+            ret =3D ezusb_writememory(dev, be32_to_cpu(record->addr),
+                        (unsigned char *)record->data,
+                        be16_to_cpu(record->len), WRITE_EXT_RAM);
+            if (ret < 0) {
+                dev_err(&dev->dev, "%s - ezusb_writememory "
+                    "failed writing internal memory "
+                    "(%d %04X %p %d)\n", __func__, ret,
+                    be32_to_cpu(record->addr), record->data,
+                    be16_to_cpu(record->len));
+                goto out;
+            }
+        }
+    }
+
+    ret =3D ezusb_set_reset(dev, fx.cpucs_reg, 1);
+    if (ret < 0)
+        goto out;
+    record =3D (const struct ihex_binrec *)firmware->data;
+    for (; record; record =3D ihex_next_binrec(record)) {
+        if (be32_to_cpu(record->addr) <=3D fx.max_internal_adress) {
+            ret =3D ezusb_writememory(dev, be32_to_cpu(record->addr),
+                        (unsigned char *)record->data,
+                        be16_to_cpu(record->len), WRITE_INT_RAM);
+            if (ret < 0) {
+                dev_err(&dev->dev, "%s - ezusb_writememory "
+                    "failed writing external memory "
+                    "(%d %04X %p %d)\n", __func__, ret,
+                    be32_to_cpu(record->addr), record->data,
+                    be16_to_cpu(record->len));
+                goto out;
+            }
+        }
+    }
+    ret =3D ezusb_set_reset(dev, fx.cpucs_reg, 0);
+out:
+    release_firmware(firmware);
+    return ret;
+}
+
+int ezusb_fx1_ihex_firmware_download(struct usb_device *dev,
+                     const char *firmware_path)
+{
+    return ezusb_ihex_firmware_download(dev, ezusb_fx1, firmware_path)=
;
+}
+EXPORT_SYMBOL_GPL(ezusb_fx1_ihex_firmware_download);
+
+int ezusb_fx2_ihex_firmware_download(struct usb_device *dev,
+                     const char *firmware_path)
+{
+    return ezusb_ihex_firmware_download(dev, ezusb_fx2, firmware_path)=
;
+}
+EXPORT_SYMBOL_GPL(ezusb_fx2_ihex_firmware_download);
+
diff --git a/drivers/usb/serial/keyspan.c b/drivers/usb/serial/keyspan.=
c
index 32bebde..523586d 100644
--- a/drivers/usb/serial/keyspan.c
+++ b/drivers/usb/serial/keyspan.c
@@ -38,8 +38,6 @@
  #include <linux/tty_flip.h>
  #include <linux/module.h>
  #include <linux/spinlock.h>
-#include <linux/firmware.h>
-#include <linux/ihex.h>
  #include <linux/uaccess.h>
  #include <linux/usb.h>
  #include <linux/usb/serial.h>
@@ -1163,10 +1161,7 @@ static void keyspan_close(struct usb_serial_port=
=20
*port)
  /* download the firmware to a pre-renumeration device */
  static int keyspan_fake_startup(struct usb_serial *serial)
  {
-    int                 response;
-    const struct ihex_binrec     *record;
-    char                *fw_name;
-    const struct firmware        *fw;
+    char    *fw_name;

      dbg("Keyspan startup version %04x product %04x",
          le16_to_cpu(serial->dev->descriptor.bcdDevice),
@@ -1234,34 +1229,16 @@ static int keyspan_fake_startup(struct=20
usb_serial *serial)
          return 1;
      }

-    if (request_ihex_firmware(&fw, fw_name, &serial->dev->dev)) {
-        dev_err(&serial->dev->dev, "Required keyspan firmware image=20
(%s) unavailable.\n", fw_name);
-        return 1;
-    }
-
      dbg("Uploading Keyspan %s firmware.", fw_name);

-        /* download the firmware image */
-    response =3D ezusb_fx1_set_reset(serial->dev, 1);
-
-    record =3D (const struct ihex_binrec *)fw->data;
-
-    while (record) {
-        response =3D ezusb_writememory(serial->dev,=20
be32_to_cpu(record->addr),
-                         (unsigned char *)record->data,
-                         be16_to_cpu(record->len), 0xa0);
-        if (response < 0) {
-            dev_err(&serial->dev->dev, "ezusb_writememory failed for=20
Keyspan firmware (%d %04X %p %d)\n",
-                response, be32_to_cpu(record->addr),
-                record->data, be16_to_cpu(record->len));
-            break;
-        }
-        record =3D ihex_next_binrec(record);
+    if (ezusb_fx1_ihex_firmware_download(serial->dev, fw_name) < 0) {
+        dev_err(&serial->dev->dev, "failed to load firmware \"%s\"\n",
+            fw_name);
+        return -ENOENT;
      }
-    release_firmware(fw);
-        /* bring device out of reset. Renumeration will occur in a
-           moment and the new device will bind to the real driver */
-    response =3D ezusb_fx1_set_reset(serial->dev, 0);
+
+    /* after downloading firmware Renumeration will occur in a
+      moment and the new device will bind to the real driver */

      /* we don't want this device to have a driver assigned to it. */
      return 1;
diff --git a/drivers/usb/serial/keyspan_pda.c=20
b/drivers/usb/serial/keyspan_pda.c
index 87c5812..bf0bb37 100644
--- a/drivers/usb/serial/keyspan_pda.c
+++ b/drivers/usb/serial/keyspan_pda.c
@@ -25,8 +25,6 @@
  #include <linux/module.h>
  #include <linux/spinlock.h>
  #include <linux/workqueue.h>
-#include <linux/firmware.h>
-#include <linux/ihex.h>
  #include <linux/uaccess.h>
  #include <linux/usb.h>
  #include <linux/usb/serial.h>
@@ -679,8 +677,6 @@ static int keyspan_pda_fake_startup(struct=20
usb_serial *serial)
  {
      int response;
      const char *fw_name;
-    const struct ihex_binrec *record;
-    const struct firmware *fw;

      /* download the firmware here ... */
      response =3D ezusb_fx1_set_reset(serial->dev, 1);
@@ -700,30 +696,15 @@ static int keyspan_pda_fake_startup(struct=20
usb_serial *serial)
              __func__);
          return -ENODEV;
      }
-    if (request_ihex_firmware(&fw, fw_name, &serial->dev->dev)) {
+
+    if (ezusb_fx1_ihex_firmware_download(serial->dev, fw_name) < 0) {
          dev_err(&serial->dev->dev, "failed to load firmware \"%s\"\n"=
,
              fw_name);
          return -ENOENT;
      }
-    record =3D (const struct ihex_binrec *)fw->data;
-
-    while (record) {
-        response =3D ezusb_writememory(serial->dev,=20
be32_to_cpu(record->addr),
-                         (unsigned char *)record->data,
-                         be16_to_cpu(record->len), 0xa0);
-        if (response < 0) {
-            dev_err(&serial->dev->dev, "ezusb_writememory failed "
-                "for Keyspan PDA firmware (%d %04X %p %d)\n",
-                response, be32_to_cpu(record->addr),
-                record->data, be16_to_cpu(record->len));
-            break;
-        }
-        record =3D ihex_next_binrec(record);
-    }
-    release_firmware(fw);
-    /* bring device out of reset. Renumeration will occur in a moment
-       and the new device will bind to the real driver */
-    response =3D ezusb_fx1_set_reset(serial->dev, 0);
+
+    /* after downloading firmware Renumeration will occur in a
+      moment and the new device will bind to the real driver */

      /* we want this device to fail to have a driver assigned to it. *=
/
      return 1;
diff --git a/drivers/usb/serial/whiteheat.c b/drivers/usb/serial/whiteh=
eat.c
index b34665c..a9ad0c5 100644
--- a/drivers/usb/serial/whiteheat.c
+++ b/drivers/usb/serial/whiteheat.c
@@ -33,8 +33,6 @@
  #include <linux/serial.h>
  #include <linux/usb/serial.h>
  #include <linux/usb/ezusb.h>
-#include <linux/firmware.h>
-#include <linux/ihex.h>
  #include "whiteheat.h"            /* WhiteHEAT specific commands */

  static bool debug;
@@ -196,84 +194,15 @@ static int firm_report_tx_done(struct=20
usb_serial_port *port);
  static int whiteheat_firmware_download(struct usb_serial *serial,
                      const struct usb_device_id *id)
  {
-    int response, ret =3D -ENOENT;
-    const struct firmware *loader_fw =3D NULL, *firmware_fw =3D NULL;
-    const struct ihex_binrec *record;
+    int response;

-    if (request_ihex_firmware(&firmware_fw, "whiteheat.fw",
-                  &serial->dev->dev)) {
-        dev_err(&serial->dev->dev,
-            "%s - request \"whiteheat.fw\" failed\n", __func__);
-        goto out;
-    }
-    if (request_ihex_firmware(&loader_fw, "whiteheat_loader.fw",
-                 &serial->dev->dev)) {
-        dev_err(&serial->dev->dev,
-            "%s - request \"whiteheat_loader.fw\" failed\n",
-            __func__);
-        goto out;
-    }
-    ret =3D 0;
-    response =3D ezusb_fx1_set_reset(serial->dev, 1);
-
-    record =3D (const struct ihex_binrec *)loader_fw->data;
-    while (record) {
-        response =3D ezusb_writememory(serial->dev,=20
be32_to_cpu(record->addr),
-                         (unsigned char *)record->data,
-                         be16_to_cpu(record->len), 0xa0);
-        if (response < 0) {
-            dev_err(&serial->dev->dev, "%s - ezusb_writememory "
-                "failed for loader (%d %04X %p %d)\n",
-                __func__, response, be32_to_cpu(record->addr),
-                record->data, be16_to_cpu(record->len));
-            break;
-        }
-        record =3D ihex_next_binrec(record);
-    }
-
-    response =3D ezusb_fx1_set_reset(serial->dev, 0);
-
-    record =3D (const struct ihex_binrec *)firmware_fw->data;
-    while (record && be32_to_cpu(record->addr) < 0x1b40)
-        record =3D ihex_next_binrec(record);
-    while (record) {
-        response =3D ezusb_writememory(serial->dev,=20
be32_to_cpu(record->addr),
-                         (unsigned char *)record->data,
-                         be16_to_cpu(record->len), 0xa3);
-        if (response < 0) {
-            dev_err(&serial->dev->dev, "%s - ezusb_writememory "
-                "failed for first firmware step "
-                "(%d %04X %p %d)\n", __func__, response,
-                be32_to_cpu(record->addr), record->data,
-                be16_to_cpu(record->len));
-            break;
-        }
-        ++record;
-    }
-
-    response =3D ezusb_fx1_set_reset(serial->dev, 1);
-
-    record =3D (const struct ihex_binrec *)firmware_fw->data;
-    while (record && be32_to_cpu(record->addr) < 0x1b40) {
-        response =3D ezusb_writememory(serial->dev,=20
be32_to_cpu(record->addr),
-                         (unsigned char *)record->data,
-                         be16_to_cpu(record->len), 0xa0);
-        if (response < 0) {
-            dev_err(&serial->dev->dev, "%s - ezusb_writememory "
-                "failed for second firmware step "
-                "(%d %04X %p %d)\n", __func__, response,
-                be32_to_cpu(record->addr), record->data,
-                be16_to_cpu(record->len));
-            break;
-        }
-        ++record;
+    response =3D ezusb_fx1_ihex_firmware_download(serial->dev,=20
"whiteheat_loader.fw");
+    if (response >=3D 0) {
+        response =3D ezusb_fx1_ihex_firmware_download(serial->dev,=20
"whiteheat.fw");
+        if (response >=3D 0)
+            return 0;
      }
-    ret =3D 0;
-    response =3D ezusb_fx1_set_reset(serial->dev, 0);
- out:
-    release_firmware(loader_fw);
-    release_firmware(firmware_fw);
-    return ret;
+    return -ENOENT;
  }
--
To unsubscribe from this list: send the line "unsubscribe linux-usb" in
the body of a message to majordomo-u79uwXL29TY76Z2rM5mHXA@public.gmane.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

