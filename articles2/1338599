Path: news.gmane.org!not-for-mail
From: Kent Overstreet <koverstreet@google.com>
Newsgroups: gmane.linux.kernel,gmane.linux.kernel.bcache.devel,gmane.linux.kernel.device-mapper.devel,gmane.linux.kernel.drbd.devel
Subject: [PATCH v5 03/12] block: Add bio_reset()
Date: Mon,  6 Aug 2012 15:08:32 -0700
Lines: 87
Approved: news@gmane.org
Message-ID: <1344290921-25154-4-git-send-email-koverstreet@google.com>
References: <1344290921-25154-1-git-send-email-koverstreet@google.com>
NNTP-Posting-Host: plane.gmane.org
X-Trace: dough.gmane.org 1344291020 14648 80.91.229.3 (6 Aug 2012 22:10:20 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Mon, 6 Aug 2012 22:10:20 +0000 (UTC)
Cc: Kent Overstreet <koverstreet@google.com>, tj@kernel.org,
	axboe@kernel.dk, agk@redhat.com, neilb@suse.de,
	drbd-dev@lists.linbit.com, vgoyal@redhat.com, mpatocka@redhat.com,
	sage@newdream.net, yehuda@hq.newdream.net
To: linux-bcache@vger.kernel.org, linux-kernel@vger.kernel.org,
	dm-devel@redhat.com
Original-X-From: linux-kernel-owner@vger.kernel.org Tue Aug 07 00:10:18 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SyVVB-0002nP-Of
	for glk-linux-kernel-3@plane.gmane.org; Tue, 07 Aug 2012 00:10:18 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756926Ab2HFWJV (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Mon, 6 Aug 2012 18:09:21 -0400
Original-Received: from mail-pb0-f46.google.com ([209.85.160.46]:61129 "EHLO
	mail-pb0-f46.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1756655Ab2HFWJK (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Mon, 6 Aug 2012 18:09:10 -0400
Original-Received: by mail-pb0-f46.google.com with SMTP id rr13so3188610pbb.19
        for <linux-kernel@vger.kernel.org>; Mon, 06 Aug 2012 15:09:10 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=from:to:cc:subject:date:message-id:x-mailer:in-reply-to:references;
        bh=8f3jl0NxTIXGRonXYG4r+RUmDubk4TLB1OAMIR7CdU0=;
        b=mdSbCvKILE8mU7U9cS/EP15W7HXJQxrWlRsqbogQKNBIa+UhLVQ+oGeMv2+/YdrZk/
         xb0MxGyog/j5Crnvq7fqNoLzK/ZUh+7TFiEH3lKvao4rgoL+xUndBtBz2vx6cGDUCAcj
         GLBl7pd3dKBpZKBh6U9Imsmj7rIgpkVIQ7cM8X6zGbHAy7kpBLfJ32ipHve/yH1C2F4R
         BS5a7UlaYQMShJMt158B7P2vLDcdtOojf9Ov0w2N4/kdDlnrnMvi/DRnjxN/pJPn10p1
         5MiZ2tLl12wFqxn0816AWm42XYvPen16XvkL+TKdVde12Sy1zd8fnHkNsJnuV76PUMPs
         iqqQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=from:to:cc:subject:date:message-id:x-mailer:in-reply-to:references
         :x-gm-message-state;
        bh=8f3jl0NxTIXGRonXYG4r+RUmDubk4TLB1OAMIR7CdU0=;
        b=bqjCZSsmeV48aLP2oZIi44/mHncW+CzLnIwqGEgoNWIY8V2UfLcurIERaARRB4ubDB
         sgEkfBfyoC9+WlP19hEx8BjEDX5dcUlFYHjCZ0SIHgT3/kpXJfXxmFQk99rwXG2S/2cE
         nrjXIPY680LaAS59Krur+o5gNY3adgxR0utkcsxJamjeNRDvfEcUmrBUlnsMt0EiIyFr
         r3nu1MGtB79ZeWlxSkhtlTHEdr08DaGMUonGAgBBcV1rYnVYUtS1pFEUVOWV1gQJBv1X
         8ypWwHDu4HZqtfdAQY3sboxkW0n84YzQVtKeniO4UPc9g26UWn03L/Fd4577qnuKR2NX
         i1uw==
Original-Received: by 10.68.236.102 with SMTP id ut6mr22214033pbc.113.1344290950169;
        Mon, 06 Aug 2012 15:09:10 -0700 (PDT)
Original-Received: by 10.68.236.102 with SMTP id ut6mr22214013pbc.113.1344290950030;
        Mon, 06 Aug 2012 15:09:10 -0700 (PDT)
Original-Received: from formenos.mtv.corp.google.com (formenos.mtv.corp.google.com [172.18.110.66])
        by mx.google.com with ESMTPS id iq1sm6145082pbc.37.2012.08.06.15.09.08
        (version=TLSv1/SSLv3 cipher=OTHER);
        Mon, 06 Aug 2012 15:09:09 -0700 (PDT)
X-Mailer: git-send-email 1.7.7.3
In-Reply-To: <1344290921-25154-1-git-send-email-koverstreet@google.com>
X-Gm-Message-State: ALoCoQkWIGS0MWMN08PoSVLmZ5nFfJw/XgS57bkHcK8aSfFe09oRfqno9kNbFQV7GkYIs7AfTgTowPRLYFnDUKVEAxqVWLxlPj15CbNC0ZgH+lFAQZldozGi5vIzNS0nMa68VsXeqnCVbjH42ATb4kDCXOXhVk+HdDB1PaUty9wSlFOnRqGr4Afov1FpG+bD6uenD8dwP21O9oPGFCgsp0tsiMWqiSnzTA==
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1338599 gmane.linux.kernel.bcache.devel:665 gmane.linux.kernel.device-mapper.devel:16473 gmane.linux.kernel.drbd.devel:2058
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1338599>

Reusing bios is something that's been highly frowned upon in the past,
but driver code keeps doing it anyways. If it's going to happen anyways,
we should provide a generic method.

This'll help with getting rid of bi_destructor - drivers/block/pktcdvd.c
was open coding it, by doing a bio_init() and resetting bi_destructor.

v5: Add a define BIO_RESET_BITS, to be very explicit about what parts of
bio->bi_flags are saved.

Signed-off-by: Kent Overstreet <koverstreet@google.com>
Change-Id: I4eb2975bd678d3be811d5423d0620b08020be9ff
---
 fs/bio.c                  |    9 +++++++++
 include/linux/bio.h       |    1 +
 include/linux/blk_types.h |    9 +++++++++
 3 files changed, 19 insertions(+), 0 deletions(-)

diff --git a/fs/bio.c b/fs/bio.c
index 1c6c8b7..c7f3442 100644
--- a/fs/bio.c
+++ b/fs/bio.c
@@ -261,6 +261,15 @@ void bio_init(struct bio *bio)
 }
 EXPORT_SYMBOL(bio_init);
 
+void bio_reset(struct bio *bio)
+{
+	unsigned long flags = bio->bi_flags & (~0UL << BIO_RESET_BITS);
+
+	memset(bio, 0, BIO_RESET_BYTES);
+	bio->bi_flags = flags|(1 << BIO_UPTODATE);
+}
+EXPORT_SYMBOL(bio_reset);
+
 /**
  * bio_alloc_bioset - allocate a bio for I/O
  * @gfp_mask:   the GFP_ mask given to the slab allocator
diff --git a/include/linux/bio.h b/include/linux/bio.h
index 2643589..ba60319 100644
--- a/include/linux/bio.h
+++ b/include/linux/bio.h
@@ -226,6 +226,7 @@ extern void __bio_clone(struct bio *, struct bio *);
 extern struct bio *bio_clone(struct bio *, gfp_t);
 
 extern void bio_init(struct bio *);
+extern void bio_reset(struct bio *);
 
 extern int bio_add_page(struct bio *, struct page *, unsigned int,unsigned int);
 extern int bio_add_pc_page(struct request_queue *, struct bio *, struct page *,
diff --git a/include/linux/blk_types.h b/include/linux/blk_types.h
index 293547e..401c573 100644
--- a/include/linux/blk_types.h
+++ b/include/linux/blk_types.h
@@ -59,6 +59,10 @@ struct bio {
 	unsigned int		bi_seg_front_size;
 	unsigned int		bi_seg_back_size;
 
+	/*
+	 * Everything starting with bi_max_vecs will be preserved by bio_reset()
+	 */
+
 	unsigned int		bi_max_vecs;	/* max bvl_vecs we can hold */
 
 	atomic_t		bi_cnt;		/* pin count */
@@ -93,6 +97,8 @@ struct bio {
 	struct bio_vec		bi_inline_vecs[0];
 };
 
+#define BIO_RESET_BYTES		offsetof(struct bio, bi_max_vecs)
+
 /*
  * bio flags
  */
@@ -108,6 +114,9 @@ struct bio {
 #define BIO_FS_INTEGRITY 9	/* fs owns integrity data, not block layer */
 #define BIO_QUIET	10	/* Make BIO Quiet */
 #define BIO_MAPPED_INTEGRITY 11/* integrity metadata has been remapped */
+
+#define BIO_RESET_BITS	12	/* Flags starting here get preserved by bio_reset() */
+
 #define bio_flagged(bio, flag)	((bio)->bi_flags & (1 << (flag)))
 
 /*
-- 
1.7.7.3

