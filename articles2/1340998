Path: news.gmane.org!not-for-mail
From: Jacob Shin <jacob.shin@amd.com>
Newsgroups: gmane.linux.kernel
Subject: [PATCH 1/5] x86: Only direct map addresses that are marked as E820_RAM
Date: Thu, 9 Aug 2012 16:23:05 -0500
Lines: 171
Approved: news@gmane.org
Message-ID: <1344547389-4599-2-git-send-email-jacob.shin@amd.com>
References: <1344547389-4599-1-git-send-email-jacob.shin@amd.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain
X-Trace: dough.gmane.org 1344547454 30227 80.91.229.3 (9 Aug 2012 21:24:14 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Thu, 9 Aug 2012 21:24:14 +0000 (UTC)
Cc: LKML <linux-kernel@vger.kernel.org>,
	Yinghai Lu <yinghai@kernel.org>,
	"H. Peter Anvin" <hpa@zytor.com>,
	Andreas Herrmann <andreas.herrmann3@amd.com>,
	Jacob Shin <jacob.shin@amd.com>
To: X86-ML <x86@kernel.org>
Original-X-From: linux-kernel-owner@vger.kernel.org Thu Aug 09 23:24:13 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SzaDC-0005ia-R6
	for glk-linux-kernel-3@plane.gmane.org; Thu, 09 Aug 2012 23:24:11 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1757185Ab2HIVYE (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Thu, 9 Aug 2012 17:24:04 -0400
Original-Received: from co1ehsobe006.messaging.microsoft.com ([216.32.180.189]:56822
	"EHLO co1outboundpool.messaging.microsoft.com" rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1753749Ab2HIVX2 (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Thu, 9 Aug 2012 17:23:28 -0400
Original-Received: from mail2-co1-R.bigfish.com (10.243.78.249) by
 CO1EHSOBE002.bigfish.com (10.243.66.65) with Microsoft SMTP Server id
 14.1.225.23; Thu, 9 Aug 2012 21:23:27 +0000
Original-Received: from mail2-co1 (localhost [127.0.0.1])	by mail2-co1-R.bigfish.com
 (Postfix) with ESMTP id E02414C0145;	Thu,  9 Aug 2012 21:23:27 +0000 (UTC)
X-Forefront-Antispam-Report: CIP:163.181.249.109;KIP:(null);UIP:(null);IPV:NLI;H:ausb3twp02.amd.com;RD:none;EFVD:NLI
X-SpamScore: 0
X-BigFish: VPS0(zzzz1202hzz8275bhz2dh668h839hd24he5bhf0ah107ah)
Original-Received: from mail2-co1 (localhost.localdomain [127.0.0.1]) by mail2-co1
 (MessageSwitch) id 1344547405841966_12792; Thu,  9 Aug 2012 21:23:25 +0000
 (UTC)
Original-Received: from CO1EHSMHS004.bigfish.com (unknown [10.243.78.245])	by
 mail2-co1.bigfish.com (Postfix) with ESMTP id C109374004A;	Thu,  9 Aug 2012
 21:23:25 +0000 (UTC)
Original-Received: from ausb3twp02.amd.com (163.181.249.109) by
 CO1EHSMHS004.bigfish.com (10.243.66.14) with Microsoft SMTP Server id
 14.1.225.23; Thu, 9 Aug 2012 21:23:24 +0000
X-WSS-ID: 0M8IBEX-02-FMG-02
X-M-MSG: 
Original-Received: from sausexedgep02.amd.com (sausexedgep02-ext.amd.com
 [163.181.249.73])	(using TLSv1 with cipher AES128-SHA (128/128 bits))	(No
 client certificate requested)	by ausb3twp02.amd.com (Axway MailGate 3.8.1)
 with ESMTP id 284F0C8103;	Thu,  9 Aug 2012 16:23:20 -0500 (CDT)
Original-Received: from sausexhtp02.amd.com (163.181.3.152) by sausexedgep02.amd.com
 (163.181.36.59) with Microsoft SMTP Server (TLS) id 8.3.192.1; Thu, 9 Aug
 2012 16:23:38 -0500
Original-Received: from jshin-Pike.amd.com (10.236.48.18) by sausexhtp02.amd.com
 (163.181.3.152) with Microsoft SMTP Server id 8.3.213.0; Thu, 9 Aug 2012
 16:23:21 -0500
X-Mailer: git-send-email 1.7.9.5
In-Reply-To: <1344547389-4599-1-git-send-email-jacob.shin@amd.com>
X-OriginatorOrg: amd.com
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1340998
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1340998>

Currently direct mappings are created for [ 0 to max_low_pfn<<PAGE_SHIFT )
and [ 4GB to max_pfn<<PAGE_SHIFT ), which may include regions that are not
backed by actual DRAM. This is fine for holes under 4GB which are covered
by fixed and variable range MTRRs to be UC. However, we run into trouble
on higher memory addresses which cannot be covered by MTRRs.

This patch iterates through e820 and only direct maps ranges that are
marked as E820_RAM, and keeps track of those pfn ranges.

Signed-off-by: Jacob Shin <jacob.shin@amd.com>
---
 arch/x86/include/asm/page_types.h |    9 ++++
 arch/x86/kernel/setup.c           |   87 +++++++++++++++++++++++++++++++++----
 2 files changed, 88 insertions(+), 8 deletions(-)

diff --git a/arch/x86/include/asm/page_types.h b/arch/x86/include/asm/page_types.h
index e21fdd1..0b8aa52 100644
--- a/arch/x86/include/asm/page_types.h
+++ b/arch/x86/include/asm/page_types.h
@@ -3,6 +3,7 @@
 
 #include <linux/const.h>
 #include <linux/types.h>
+#include <asm/e820.h>
 
 /* PAGE_SHIFT determines the page size */
 #define PAGE_SHIFT	12
@@ -40,12 +41,20 @@
 #endif	/* CONFIG_X86_64 */
 
 #ifndef __ASSEMBLY__
+#include <linux/range.h>
 
 extern int devmem_is_allowed(unsigned long pagenr);
 
 extern unsigned long max_low_pfn_mapped;
 extern unsigned long max_pfn_mapped;
 
+extern struct range pfn_mapped[E820_X_MAX];
+extern int nr_pfn_mapped;
+
+extern void add_pfn_range_mapped(unsigned long start_pfn, unsigned long end_pfn);
+extern int pfn_range_is_mapped(unsigned long start_pfn, unsigned long end_pfn);
+extern int pfn_is_mapped(unsigned long pfn);
+
 static inline phys_addr_t get_max_mapped(void)
 {
 	return (phys_addr_t)max_pfn_mapped << PAGE_SHIFT;
diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c
index f4b9b80..4f26944 100644
--- a/arch/x86/kernel/setup.c
+++ b/arch/x86/kernel/setup.c
@@ -115,13 +115,55 @@
 #include <asm/prom.h>
 
 /*
- * end_pfn only includes RAM, while max_pfn_mapped includes all e820 entries.
- * The direct mapping extends to max_pfn_mapped, so that we can directly access
- * apertures, ACPI and other tables without having to play with fixmaps.
+ * max_low_pfn_mapped: highest direct mapped pfn under 4GB
+ * max_pfn_mapped:     highest direct mapped pfn over 4GB
+ *
+ * The direct mapping only covers E820_RAM regions, so the ranges and gaps are
+ * represented by pfn_mapped
  */
 unsigned long max_low_pfn_mapped;
 unsigned long max_pfn_mapped;
 
+struct range pfn_mapped[E820_X_MAX];
+int nr_pfn_mapped;
+
+void add_pfn_range_mapped(unsigned long start_pfn, unsigned long end_pfn)
+{
+	nr_pfn_mapped = add_range_with_merge(pfn_mapped, E820_X_MAX,
+					     nr_pfn_mapped, start_pfn, end_pfn);
+
+	if (end_pfn > max_pfn_mapped)
+		max_pfn_mapped = end_pfn;
+
+	if ((end_pfn <= (1UL << (32 - PAGE_SHIFT))) &&
+	    (end_pfn > max_low_pfn_mapped))
+		max_low_pfn_mapped = end_pfn;
+}
+
+int pfn_range_is_mapped(unsigned long start_pfn, unsigned long end_pfn)
+{
+	int i;
+
+	for (i = 0; i < nr_pfn_mapped; i++)
+		if ((start_pfn >= pfn_mapped[i].start) &&
+		    (end_pfn <= pfn_mapped[i].end))
+			break;
+
+	return i < nr_pfn_mapped;
+}
+
+int pfn_is_mapped(unsigned long pfn)
+{
+	int i;
+
+	for (i = 0; i < nr_pfn_mapped; i++)
+		if ((pfn >= pfn_mapped[i].start) &&
+		    (pfn <  pfn_mapped[i].end))
+			break;
+
+	return i < nr_pfn_mapped;
+}
+
 #ifdef CONFIG_DMI
 RESERVE_BRK(dmi_alloc, 65536);
 #endif
@@ -673,6 +715,9 @@ early_param("reservelow", parse_reservelow);
 
 void __init setup_arch(char **cmdline_p)
 {
+	int i;
+	unsigned long init_pfn, pfn;
+
 #ifdef CONFIG_X86_32
 	memcpy(&boot_cpu_data, &new_cpu_data, sizeof(new_cpu_data));
 	visws_early_detect();
@@ -913,14 +958,40 @@ void __init setup_arch(char **cmdline_p)
 
 	init_gbpages();
 
-	/* max_pfn_mapped is updated here */
-	max_low_pfn_mapped = init_memory_mapping(0, max_low_pfn<<PAGE_SHIFT);
-	max_pfn_mapped = max_low_pfn_mapped;
+	init_pfn = max_pfn_mapped;
+
+	memset(pfn_mapped, 0, sizeof(pfn_mapped));
+	nr_pfn_mapped = 0;
+
+	add_pfn_range_mapped(0, max_pfn_mapped);
+
+	for (i = 0; i < e820.nr_map; i++) {
+		struct e820entry *ei = &e820.map[i];
+		u64 start = ei->addr;
+		u64 end = ei->addr + ei->size;
+
+		if (ei->type != E820_RAM)
+			continue;
+
+		if (end <= (init_pfn << PAGE_SHIFT))
+			continue;
+
+		if (start < (init_pfn << PAGE_SHIFT))
+			start = init_pfn << PAGE_SHIFT;
+
+#ifdef CONFIG_X86_32
+		if ((start >> PAGE_SHIFT) >= max_low_pfn)
+			continue;
+
+		if ((end >> PAGE_SHIFT) > max_low_pfn)
+			end = max_low_pfn << PAGE_SHIFT;
+#endif
+		pfn = init_memory_mapping(start, end);
+		add_pfn_range_mapped(start >> PAGE_SHIFT, pfn);
+	}
 
 #ifdef CONFIG_X86_64
 	if (max_pfn > max_low_pfn) {
-		max_pfn_mapped = init_memory_mapping(1UL<<32,
-						     max_pfn<<PAGE_SHIFT);
 		/* can we preseve max_low_pfn ?*/
 		max_low_pfn = max_pfn;
 	}
-- 
1.7.9.5


