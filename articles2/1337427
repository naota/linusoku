Path: news.gmane.org!not-for-mail
From: Tejun Heo <tj@kernel.org>
Newsgroups: gmane.linux.kernel.mm,gmane.linux.kernel,gmane.linux.network
Subject: Re: [RFC v2 1/7] hashtable: introduce a small and naive hashtable
Date: Fri, 3 Aug 2012 10:15:15 -0700
Lines: 79
Approved: news@gmane.org
Message-ID: <20120803171515.GH15477@google.com>
References: <1344003788-1417-1-git-send-email-levinsasha928@gmail.com>
 <1344003788-1417-2-git-send-email-levinsasha928@gmail.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Trace: dough.gmane.org 1344014126 7287 80.91.229.3 (3 Aug 2012 17:15:26 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Fri, 3 Aug 2012 17:15:26 +0000 (UTC)
Cc: torvalds@linux-foundation.org, akpm@linux-foundation.org,
	linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	paul.gortmaker@windriver.com, davem@davemloft.net,
	rostedt@goodmis.org, mingo@elte.hu, ebiederm@xmission.com,
	aarcange@redhat.com, ericvh@gmail.com, netdev@vger.kernel.org
To: Sasha Levin <levinsasha928@gmail.com>
Original-X-From: owner-linux-mm@kvack.org Fri Aug 03 19:15:24 2012
Return-path: <owner-linux-mm@kvack.org>
Envelope-to: glkm-linux-mm-2@m.gmane.org
Original-Received: from kanga.kvack.org ([205.233.56.17])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <owner-linux-mm@kvack.org>)
	id 1SxLTA-00058s-CZ
	for glkm-linux-mm-2@m.gmane.org; Fri, 03 Aug 2012 19:15:24 +0200
Original-Received: by kanga.kvack.org (Postfix)
	id DC0746B0044; Fri,  3 Aug 2012 13:15:22 -0400 (EDT)
Delivered-To: linux-mm-outgoing@kvack.org
Original-Received: by kanga.kvack.org (Postfix, from userid 40)
	id CD8D16B005A; Fri,  3 Aug 2012 13:15:22 -0400 (EDT)
X-Original-To: int-list-linux-mm@kvack.org
Delivered-To: int-list-linux-mm@kvack.org
Original-Received: by kanga.kvack.org (Postfix, from userid 63042)
	id D26606B005D; Fri,  3 Aug 2012 13:15:21 -0400 (EDT)
X-Original-To: linux-mm@kvack.org
Delivered-To: linux-mm@kvack.org
Original-Received: from psmtp.com (na3sys010amx129.postini.com [74.125.245.129])
	by kanga.kvack.org (Postfix) with SMTP id 2805D6B0044
	for <linux-mm@kvack.org>; Fri,  3 Aug 2012 13:15:21 -0400 (EDT)
Original-Received: from mail-yw0-f41.google.com ([209.85.213.41]) (using TLSv1) by na3sys010amx129.postini.com ([74.125.244.10]) with SMTP;
	Fri, 03 Aug 2012 17:15:21 GMT
Original-Received: by yhr47 with SMTP id 47so1324796yhr.14
        for <linux-mm@kvack.org>; Fri, 03 Aug 2012 10:15:20 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=sender:date:from:to:cc:subject:message-id:references:mime-version
         :content-type:content-disposition:in-reply-to:user-agent;
        bh=p29P3Q2MkpWEdv/J4bmYyq8gcOk55xplDssv+NyWmyo=;
        b=MXqMbiW1a4Molepo5ErWNo5PBBj8rQhqJPCMEyr9IYDF8j9uiXR83P2kA0cvWNwrbn
         tkFf0qgBEB4qHCs3pWNiIzkdCyKKsNMBFt7dEw9QyMnU5V6koE1CuRc7exAhrvd6cp1h
         PblKd9YXRVOoD+DXMJc4H1XKnE/51BA0QKKiOizgD3tIwWUM7S8w0W0Pe2XhCO28u483
         ylYPGEpgWMNESb/0t5jFbCBYirABJJh8kdJCq+pE5/UuRbhcMxAYfEMni/HF8voSdbi0
         6dlGgx4bJ6q0pzFRKShgBKjdqfUSUrAJsnm1KYwpl4qb510ruQswDxJJWEZggNJ7imHd
         SLzg==
Original-Received: by 10.50.149.200 with SMTP id uc8mr4794815igb.27.1344014119794;
        Fri, 03 Aug 2012 10:15:19 -0700 (PDT)
Original-Received: from google.com (wtj.mtv.corp.google.com [172.18.110.84])
        by mx.google.com with ESMTPS id iw1sm23193305igc.13.2012.08.03.10.15.17
        (version=SSLv3 cipher=OTHER);
        Fri, 03 Aug 2012 10:15:18 -0700 (PDT)
Content-Disposition: inline
In-Reply-To: <1344003788-1417-2-git-send-email-levinsasha928@gmail.com>
User-Agent: Mutt/1.5.20 (2009-06-14)
X-pstn-neptune: 0/0/0.00/0
X-pstn-levels: (S:99.90000/99.90000 CV:99.9000 FC:95.5390 LC:95.5390 R:95.9108 P:95.9108 M:97.0282 C:98.6951 )
X-pstn-dkim: 1 skipped:not-enabled
X-pstn-settings: 3 (1.0000:0.0100) s cv GT3 gt2 gt1 r p m c 
X-pstn-addresses: from <tj@kernel.org> [db-null] 
X-Bogosity: Ham, tests=bogofilter, spamicity=0.000000, version=1.2.2
Original-Sender: owner-linux-mm@kvack.org
Precedence: bulk
X-Loop: owner-majordomo@kvack.org
List-ID: <linux-mm.kvack.org>
Xref: news.gmane.org gmane.linux.kernel.mm:83564 gmane.linux.kernel:1337427 gmane.linux.network:239069
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1337427>

Hello, Sasha.

On Fri, Aug 03, 2012 at 04:23:02PM +0200, Sasha Levin wrote:
> +#define DEFINE_STATIC_HASHTABLE(n, b)					\
> +	static struct hash_table n = { .bits = (b),			\
> +		.buckets = { [0 ... ((1 << (b)) - 1)] = HLIST_HEAD_INIT } }

What does this "static" mean?

> +#define DEFINE_HASHTABLE(n, b)						\
> +	union {								\
> +		struct hash_table n;					\
> +		struct {						\
> +			size_t bits;					\
> +			struct hlist_head buckets[1 << (b)];		\
> +		} __##n ;						\
> +	};

Is this supposed to be embedded in struct definition?  If so, the name
is rather misleading as DEFINE_* is supposed to define and initialize
stand-alone constructs.  Also, for struct members, simply putting hash
entries after struct hash_table should work.

Wouldn't using DEFINE_HASHTABLE() for the first macro and
DEFINE_HASHTABLE_MEMBER() for the latter be better?

> +#define HASH_BITS(name) ((name)->bits)
> +#define HASH_SIZE(name) (1 << (HASH_BITS(name)))
> +
> +__attribute__ ((unused))

Are we using __attribute__((unused)) for functions defined in headers
instead of static inline now?  If so, why? 

> +static void hash_init(struct hash_table *ht, size_t bits)
> +{
> +	size_t i;

I would prefer int here but no biggie.

> +	ht->bits = bits;
> +	for (i = 0; i < (1 << bits); i++)
> +		INIT_HLIST_HEAD(&ht->buckets[i]);
> +}
> +
> +static void hash_add(struct hash_table *ht, struct hlist_node *node, long key)
> +{
> +	hlist_add_head(node,
> +		&ht->buckets[hash_long((unsigned long)key, HASH_BITS(ht))]);
> +}
> +
> +
> +#define hash_get(name, key, type, member, cmp_fn)			\
> +({									\
> +	struct hlist_node *__node;					\
> +	typeof(key) __key = key;					\
> +	type *__obj = NULL;						\
> +	hlist_for_each_entry(__obj, __node, &(name)->buckets[		\
> +			hash_long((unsigned long) __key,		\
> +			HASH_BITS(name))], member)			\
> +		if (cmp_fn(__obj, __key))				\
> +			break;						\
> +	__obj;								\
> +})

As opposed to using hash_for_each_possible(), how much difference does
this make?  Is it really worthwhile?

Thanks.

-- 
tejun

--
To unsubscribe, send a message with 'unsubscribe linux-mm' in
the body to majordomo@kvack.org.  For more info on Linux MM,
see: http://www.linux-mm.org/ .
Don't email: <a href=mailto:"dont@kvack.org"> email@kvack.org </a>

