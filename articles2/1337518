Path: news.gmane.org!not-for-mail
From: Sasha Levin <levinsasha928@gmail.com>
Newsgroups: gmane.linux.kernel.mm,gmane.linux.kernel,gmane.linux.network
Subject: Re: [RFC v2 1/7] hashtable: introduce a small and naive hashtable
Date: Fri, 03 Aug 2012 23:19:57 +0200
Lines: 89
Approved: news@gmane.org
Message-ID: <501C407D.9080900@gmail.com>
References: <1344003788-1417-1-git-send-email-levinsasha928@gmail.com> <1344003788-1417-2-git-send-email-levinsasha928@gmail.com> <20120803171515.GH15477@google.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1344028777 24316 80.91.229.3 (3 Aug 2012 21:19:37 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Fri, 3 Aug 2012 21:19:37 +0000 (UTC)
Cc: torvalds@linux-foundation.org, akpm@linux-foundation.org, 
 linux-kernel@vger.kernel.org, linux-mm@kvack.org, 
 paul.gortmaker@windriver.com, davem@davemloft.net, rostedt@goodmis.org, 
 mingo@elte.hu, ebiederm@xmission.com, aarcange@redhat.com, 
 ericvh@gmail.com, netdev@vger.kernel.org
To: Tejun Heo <tj@kernel.org>
Original-X-From: owner-linux-mm@kvack.org Fri Aug 03 23:19:35 2012
Return-path: <owner-linux-mm@kvack.org>
Envelope-to: glkm-linux-mm-2@m.gmane.org
Original-Received: from kanga.kvack.org ([205.233.56.17])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <owner-linux-mm@kvack.org>)
	id 1SxPHS-0005Ht-HJ
	for glkm-linux-mm-2@m.gmane.org; Fri, 03 Aug 2012 23:19:34 +0200
Original-Received: by kanga.kvack.org (Postfix)
	id 39C4E6B0062; Fri,  3 Aug 2012 17:19:33 -0400 (EDT)
Delivered-To: linux-mm-outgoing@kvack.org
Original-Received: by kanga.kvack.org (Postfix, from userid 40)
	id 251A06B0068; Fri,  3 Aug 2012 17:19:33 -0400 (EDT)
X-Original-To: int-list-linux-mm@kvack.org
Delivered-To: int-list-linux-mm@kvack.org
Original-Received: by kanga.kvack.org (Postfix, from userid 63042)
	id E9D376B0069; Fri,  3 Aug 2012 17:19:32 -0400 (EDT)
X-Original-To: linux-mm@kvack.org
Delivered-To: linux-mm@kvack.org
Original-Received: from psmtp.com (na3sys010amx128.postini.com [74.125.245.128])
	by kanga.kvack.org (Postfix) with SMTP id 192F96B0062
	for <linux-mm@kvack.org>; Fri,  3 Aug 2012 17:19:32 -0400 (EDT)
Original-Received: from mail-wi0-f179.google.com ([209.85.212.179]) (using TLSv1) by na3sys010amx128.postini.com ([74.125.244.10]) with SMTP;
	Fri, 03 Aug 2012 21:19:32 GMT
Original-Received: by wibhq4 with SMTP id hq4so850886wib.8
        for <linux-mm@kvack.org>; Fri, 03 Aug 2012 14:19:30 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=message-id:date:from:user-agent:mime-version:to:cc:subject
         :references:in-reply-to:content-type:content-transfer-encoding;
        bh=GAML7ZXwryjceiBbQD1gJYAPI24gUgfx+gUaXDFJ2NA=;
        b=E6+0wdcJdeOxxAqh+afBV7NLbx4M/gT1U0MoAe++ldIZxzGH8jgijDwDzekQSosaAH
         WgUM2fFb/4AwyuaxlT/Uhw9IgGXDBZhrXHkxnRDYgR76RAoFj//ltU5USuOvMifPcby3
         dye2SpSfufVbou8kG+2W16XF01g8STY7C1mrbp2+ezJbOdkd2mEaRSXqjpiu1ioj79k8
         jWC8CuR/lmjD6Re2quPqQx8+9Jx/1xw6MRFrw546AqS3FP350KRD4iDqkMcOotA+rZSa
         l+z+wn6AjPjYinFLs8ai85FTdWhkJY3qJV6bNqzmhSB3uyxt+ksBP2HJMwgHDm3i41bD
         XL/w==
Original-Received: by 10.180.97.33 with SMTP id dx1mr7228393wib.18.1344028770293;
        Fri, 03 Aug 2012 14:19:30 -0700 (PDT)
Original-Received: from [192.168.42.103] (95-89-78-76-dynip.superkabel.de. [95.89.78.76])
        by mx.google.com with ESMTPS id fr4sm29020460wib.8.2012.08.03.14.19.28
        (version=SSLv3 cipher=OTHER);
        Fri, 03 Aug 2012 14:19:29 -0700 (PDT)
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:14.0) Gecko/20120730 Thunderbird/14.0
In-Reply-To: <20120803171515.GH15477@google.com>
X-pstn-neptune: 0/0/0.00/0
X-pstn-levels: (S:99.90000/99.90000 CV:99.9000 FC:95.5390 LC:95.5390 R:95.9108 P:95.9108 M:97.0282 C:98.6951 )
X-pstn-dkim: 1 skipped:not-enabled
X-pstn-settings: 3 (1.0000:0.0100) s cv GT3 gt2 gt1 r p m c 
X-pstn-addresses: from <levinsasha928@gmail.com> [db-null] 
X-Bogosity: Ham, tests=bogofilter, spamicity=0.000000, version=1.2.2
Original-Sender: owner-linux-mm@kvack.org
Precedence: bulk
X-Loop: owner-majordomo@kvack.org
List-ID: <linux-mm.kvack.org>
Xref: news.gmane.org gmane.linux.kernel.mm:83593 gmane.linux.kernel:1337518 gmane.linux.network:239079
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1337518>

On 08/03/2012 07:15 PM, Tejun Heo wrote:
> Hello, Sasha.
> 
> On Fri, Aug 03, 2012 at 04:23:02PM +0200, Sasha Levin wrote:
>> +#define DEFINE_STATIC_HASHTABLE(n, b)					\
>> +	static struct hash_table n = { .bits = (b),			\
>> +		.buckets = { [0 ... ((1 << (b)) - 1)] = HLIST_HEAD_INIT } }
> 
> What does this "static" mean?
> 
>> +#define DEFINE_HASHTABLE(n, b)						\
>> +	union {								\
>> +		struct hash_table n;					\
>> +		struct {						\
>> +			size_t bits;					\
>> +			struct hlist_head buckets[1 << (b)];		\
>> +		} __##n ;						\
>> +	};
> 
> Is this supposed to be embedded in struct definition?  If so, the name
> is rather misleading as DEFINE_* is supposed to define and initialize
> stand-alone constructs.  Also, for struct members, simply putting hash
> entries after struct hash_table should work.

It would work, but I didn't want to just put them in the union since I feel it's safer to keep them in a separate struct so they won't be used by mistake,

> Wouldn't using DEFINE_HASHTABLE() for the first macro and
> DEFINE_HASHTABLE_MEMBER() for the latter be better?

Indeed that sounds better, will fix.

>> +#define HASH_BITS(name) ((name)->bits)
>> +#define HASH_SIZE(name) (1 << (HASH_BITS(name)))
>> +
>> +__attribute__ ((unused))
> 
> Are we using __attribute__((unused)) for functions defined in headers
> instead of static inline now?  If so, why? 
> 
>> +static void hash_init(struct hash_table *ht, size_t bits)
>> +{
>> +	size_t i;
> 
> I would prefer int here but no biggie.

Just wondering, is there a particular reason behind it?

>> +	ht->bits = bits;
>> +	for (i = 0; i < (1 << bits); i++)
>> +		INIT_HLIST_HEAD(&ht->buckets[i]);
>> +}
>> +
>> +static void hash_add(struct hash_table *ht, struct hlist_node *node, long key)
>> +{
>> +	hlist_add_head(node,
>> +		&ht->buckets[hash_long((unsigned long)key, HASH_BITS(ht))]);
>> +}
>> +
>> +
>> +#define hash_get(name, key, type, member, cmp_fn)			\
>> +({									\
>> +	struct hlist_node *__node;					\
>> +	typeof(key) __key = key;					\
>> +	type *__obj = NULL;						\
>> +	hlist_for_each_entry(__obj, __node, &(name)->buckets[		\
>> +			hash_long((unsigned long) __key,		\
>> +			HASH_BITS(name))], member)			\
>> +		if (cmp_fn(__obj, __key))				\
>> +			break;						\
>> +	__obj;								\
>> +})
> 
> As opposed to using hash_for_each_possible(), how much difference does
> this make?  Is it really worthwhile?

Most of the places I've switched to using this hashtable so far (4 out of 6) are using hash_get(). I think that the code looks cleaner when you an just provide a comparison function instead of implementing the iteration itself.

I think hash_for_for_each_possible() is useful if the comparison condition is more complex than a simple comparison of one of the object members with the key - there's no need to force it on all the users.

> 
> Thanks.
> 

--
To unsubscribe, send a message with 'unsubscribe linux-mm' in
the body to majordomo@kvack.org.  For more info on Linux MM,
see: http://www.linux-mm.org/ .
Don't email: <a href=mailto:"dont@kvack.org"> email@kvack.org </a>

