Path: news.gmane.org!not-for-mail
From: Eric Dumazet <eric.dumazet@gmail.com>
Newsgroups: gmane.linux.kernel,gmane.comp.security.selinux
Subject: Re: NULL pointer dereference in selinux_ip_postroute_compat
Date: Wed, 08 Aug 2012 22:09:38 +0200
Lines: 47
Approved: news@gmane.org
Message-ID: <1344456578.28967.244.camel@edumazet-glaptop>
References: <50215A7E.8000701@linaro.org> <502198B4.8040503@linaro.org>
	 <5022BAA2.90606@us.ibm.com> <17464273.DGOeQvDGIE@sifl>
	 <1344454701.28967.233.camel@edumazet-glaptop>
	 <CACLa4ptgoge0nnEuov5E9gc2bdR-wjCo+bpB6Auhwo8jSO99oA@mail.gmail.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1344456593 13689 80.91.229.3 (8 Aug 2012 20:09:53 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Wed, 8 Aug 2012 20:09:53 +0000 (UTC)
Cc: Paul Moore <paul@paul-moore.com>,
	John Stultz <johnstul@us.ibm.com>,
	"Serge E. Hallyn" <serge@hallyn.com>,
	lkml <linux-kernel@vger.kernel.org>,
	James Morris <james.l.morris@oracle.com>,
	selinux@tycho.nsa.gov, Eric Dumazet <edumazet@google.com>,
	john.johansen@canonical.com
To: Eric Paris <eparis@parisplace.org>
Original-X-From: linux-kernel-owner@vger.kernel.org Wed Aug 08 22:09:52 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SzCZj-000191-7H
	for glk-linux-kernel-3@plane.gmane.org; Wed, 08 Aug 2012 22:09:51 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1759215Ab2HHUJp (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Wed, 8 Aug 2012 16:09:45 -0400
Original-Received: from mail-bk0-f46.google.com ([209.85.214.46]:57185 "EHLO
	mail-bk0-f46.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1757337Ab2HHUJn (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Wed, 8 Aug 2012 16:09:43 -0400
Original-Received: by bkwj10 with SMTP id j10so439748bkw.19
        for <linux-kernel@vger.kernel.org>; Wed, 08 Aug 2012 13:09:42 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=subject:from:to:cc:in-reply-to:references:content-type:date
         :message-id:mime-version:x-mailer:content-transfer-encoding;
        bh=waSrNitAf1MUfK6ihgXiQ2TvbpyCHMqfYqoxlJP/uCI=;
        b=0R/mT3JMKNx2KH9WlnhCkKT7AJh7X+bC7M/LwHFp0EvBoN+Q+eaQQi+Mb6RkHBdU5v
         KMU8rCHv2W12XdMj+aQJLYcVXFe8GdVhLyt9P4e3ZuLDPyazI2acDJzi6MGqOL96gpkB
         V82YJc3K5C59XwWZCV48KFCDtLH9V7KC8yS0JKdfunr0XHrxe3cl5EOfjU2IrmrcHFvz
         8B9BdHzsARpvPn9vRMRPgMs1jOUpnfPNJNlsvdj6dOVzq0khAmCAaZPabjxZzcAh6nNG
         io+aJdQCRRctJOAbL+BYcR34Iv5AVt+YkDJh0KkSIrLDCT4X7Bp1rn5cjaN77TLPaAKV
         l5Ug==
Original-Received: by 10.204.154.66 with SMTP id n2mr8048320bkw.138.1344456582069;
        Wed, 08 Aug 2012 13:09:42 -0700 (PDT)
Original-Received: from [172.28.91.35] ([74.125.122.49])
        by mx.google.com with ESMTPS id fu8sm10851367bkc.5.2012.08.08.13.09.39
        (version=SSLv3 cipher=OTHER);
        Wed, 08 Aug 2012 13:09:40 -0700 (PDT)
In-Reply-To: <CACLa4ptgoge0nnEuov5E9gc2bdR-wjCo+bpB6Auhwo8jSO99oA@mail.gmail.com>
X-Mailer: Evolution 2.28.3 
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1340289 gmane.comp.security.selinux:17710
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1340289>

On Wed, 2012-08-08 at 15:59 -0400, Eric Paris wrote:

> Seems wrong.  We shouldn't ever need ifdef CONFIG_SECURITY in core
> code. 

Sure but it seems include file misses an accessor for this.

We could add it on a future cleanup patch, as Paul mentioned.

>  Ifndef CONF_SECURITY then security_sk_alloc() is a static
> inline return 0;   I guess the question is "Where did the sk come
> from"?  Why wasn't security_sk_alloc() called when it was allocated?
> Should it have been updated at some time and that wasn't done either?
> Seems wrong to be putting packets on the queue for a socket where the
> security data was never allocated and was never set to its proper
> state.
> 

IMHO it seems wrong to even care about security for internal sockets.

They are per cpu, shared for all users on the machine.

What kind of security do you envision exactly ?


These unicast_sock are percpu, and preallocated.

/*
 *      Generic function to send a packet as reply to another packet.
 *      Used to send some TCP resets/acks so far.
 *
 *      Use a fake percpu inet socket to avoid false sharing and contention.
 */
static DEFINE_PER_CPU(struct inet_sock, unicast_sock) = {
        .sk = {
                .__sk_common = {
                        .skc_refcnt = ATOMIC_INIT(1),
                },
                .sk_wmem_alloc  = ATOMIC_INIT(1),
                .sk_allocation  = GFP_ATOMIC,
                .sk_flags       = (1UL << SOCK_USE_WRITE_QUEUE),
        },
        .pmtudisc       = IP_PMTUDISC_WANT,
        .uc_ttl         = -1,
};


