Path: news.gmane.org!not-for-mail
From: Tejun Heo <tj@kernel.org>
Newsgroups: gmane.linux.kernel
Subject: (unknown)
Date: Wed,  8 Aug 2012 11:10:24 -0700
Lines: 65
Approved: news@gmane.org
Message-ID: <1344449428-24962-1-git-send-email-tj@kernel.org>
NNTP-Posting-Host: plane.gmane.org
X-Trace: dough.gmane.org 1344449458 20783 80.91.229.3 (8 Aug 2012 18:10:58 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Wed, 8 Aug 2012 18:10:58 +0000 (UTC)
Cc: torvalds@linux-foundation.org, mingo@redhat.com,
	akpm@linux-foundation.org, tglx@linutronix.de, peterz@infradead.org
To: linux-kernel@vger.kernel.org
Original-X-From: linux-kernel-owner@vger.kernel.org Wed Aug 08 20:10:57 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SzAiW-0007QJ-St
	for glk-linux-kernel-3@plane.gmane.org; Wed, 08 Aug 2012 20:10:49 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1758467Ab2HHSKm (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Wed, 8 Aug 2012 14:10:42 -0400
Original-Received: from mail-yx0-f174.google.com ([209.85.213.174]:35859 "EHLO
	mail-yx0-f174.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754543Ab2HHSKl (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Wed, 8 Aug 2012 14:10:41 -0400
Original-Received: by yenl2 with SMTP id l2so1085016yen.19
        for <linux-kernel@vger.kernel.org>; Wed, 08 Aug 2012 11:10:40 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=sender:from:to:cc:subject:date:message-id:x-mailer;
        bh=oK6eFcb/n3XODLXKBlI/w7Y/2zHyrfP6DEUE4W9H90s=;
        b=FPdFud0gA6qRJnXtydA+aMbHvAoSd+4ThU3mIoA/yB16taynILtgbHcBFHnZpBSMxB
         GguWhtAYaj7eOf/FqLDT+sLNhY3XMcjHrkrFXrPwHcbflhb69wrQGcjsy58RovVJA50s
         S1mFZvQhvu36zAYwTd8ZNCIPv0Vt2JwgG0mkhBhkOEupVZ/rI41WgDC58RFhObeb8Em0
         FKR67zT+WQ8hGiTpMyo+dIRPkw47yPBEyreb3Y91ld4KoFRGHxH3iKRMJpIpbtu0TVOF
         j2n/miriJENWjYg2thttrh5bxkNDhZvVXUqkR8CVlLKga4dlb0HiWrR7/vJ1CY9AN6zp
         GRXw==
Original-Received: by 10.66.86.71 with SMTP id n7mr35665703paz.7.1344449440331;
        Wed, 08 Aug 2012 11:10:40 -0700 (PDT)
Original-Received: from wtj.mtv.corp.google.com (wtj.mtv.corp.google.com [172.18.110.84])
        by mx.google.com with ESMTPS id nv6sm13819745pbc.42.2012.08.08.11.10.37
        (version=TLSv1/SSLv3 cipher=OTHER);
        Wed, 08 Aug 2012 11:10:38 -0700 (PDT)
Original-Subject: 
X-Mailer: git-send-email 1.7.7.3
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1340224
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1340224>

Timer internals are protected by irqsafe lock but the lock is
naturally dropped and irq enabled while a timer is executed.  This
makes dequeueing timer for execution and the actual execution
non-atomic against IRQs.  No matter what the timer function does, IRQs
can occur between timer dispatch and execution.  This means that an
IRQ handler could interrupt any timer in progress and it's impossible
for an IRQ handler to cancel and drain a timer.

This restriction manifests as ugly convolutions in workqueue
delayed_work interface.  A !idle delayed_work is either on timer,
being transferred from timer to worklist, on worklist, or executing.
There are interfaces which need to cancel a pending delayed_work -
cancel_delayed_work() and friends and mod_delayed_work().  They want
to cancel a work item in the first three states but it's impossible to
drain the second state from IRQ handlers which lead to the following
oddities.

* mod_delayed_work() can't be used from IRQ handlers.

* __cancel_delayed_work() can't use the usual try_to_grab_pending()
  which handles all three states but instead only deals with the first
  state using a separate implementation.  There's no way to make a
  delayed_work not pending from IRQ handlers.

* The context / behavior differences among cancel_delayed_work(),
  __cancel_delayed_work(), cancel_delayed_work_sync() are subtle and
  confusing (the first two are mostly historical tho).

This patchset implements irqsafe timers.  For an irqsafe timer, IRQ is
not enabled from dispatch till the end of its execution making it safe
to drain the timer regardless of context.  This will enable cleaning
up delayed_work interface.

This patchset contains the following four patches.

 0001-timer-generalize-timer-base-flags-handling.patch
 0002-timer-relocate-declarations-of-init_timer_on_stack_k.patch
 0003-timer-clean-up-timer-initializers.patch
 0004-timer-implement-TIMER_IRQSAFE.patch

0001 generalizes timer->base flags handling so that TIMER_IRQSAFE can
be added easily.

0002-0003 clean up initializers so that adding TIMER_IRQSAFE doesn't
need to duplicate init code multiple times.

0004 implements TIMER_IRQSAFE.

This patchset is also available in the following git branch.

 git://git.kernel.org/pub/scm/linux/kernel/git/tj/wq.git review-timer-irqsafe

Will soon post workqueue patchset which makes use of this.  If this
goes in, it would be great if this either goes through wq/for-3.7 or
gets its own branch somewhere so that it can be pulled into
wq/for-3.7.

Thanks.

 include/linux/timer.h |  161 ++++++++++++++++++--------------------------------
 kernel/timer.c        |  108 +++++++++++++++------------------
 2 files changed, 110 insertions(+), 159 deletions(-)

--
tejun
