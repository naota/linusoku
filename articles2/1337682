Path: news.gmane.org!not-for-mail
From: Hillf Danton <dhillf@gmail.com>
Newsgroups: gmane.linux.kernel.mm,gmane.linux.kernel
Subject: Re: [RFC PATCH 08/23 V2] hugetlb: use N_MEMORY instead N_HIGH_MEMORY
Date: Sat, 4 Aug 2012 22:02:45 +0800
Lines: 137
Approved: news@gmane.org
Message-ID: <CAJd=RBBVVXj99zxSpCA_wz6Md371TTrJbDjCzJMntYHrrVOaYw@mail.gmail.com>
References: <1343887288-8866-1-git-send-email-laijs@cn.fujitsu.com>
	<1343887288-8866-9-git-send-email-laijs@cn.fujitsu.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Trace: dough.gmane.org 1344088972 4755 80.91.229.3 (4 Aug 2012 14:02:52 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Sat, 4 Aug 2012 14:02:52 +0000 (UTC)
Cc: Mel Gorman <mel@csn.ul.ie>, linux-kernel@vger.kernel.org, 
	Greg Kroah-Hartman <gregkh@linuxfoundation.org>, Andrew Morton <akpm@linux-foundation.org>, 
	Michal Hocko <mhocko@suse.cz>, KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>, linux-mm@kvack.org
To: Lai Jiangshan <laijs@cn.fujitsu.com>
Original-X-From: owner-linux-mm@kvack.org Sat Aug 04 16:02:51 2012
Return-path: <owner-linux-mm@kvack.org>
Envelope-to: glkm-linux-mm-2@m.gmane.org
Original-Received: from kanga.kvack.org ([205.233.56.17])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <owner-linux-mm@kvack.org>)
	id 1SxewL-0007bR-GW
	for glkm-linux-mm-2@m.gmane.org; Sat, 04 Aug 2012 16:02:49 +0200
Original-Received: by kanga.kvack.org (Postfix)
	id F06796B0044; Sat,  4 Aug 2012 10:02:47 -0400 (EDT)
Delivered-To: linux-mm-outgoing@kvack.org
Original-Received: by kanga.kvack.org (Postfix, from userid 40)
	id DFCBF6B005A; Sat,  4 Aug 2012 10:02:47 -0400 (EDT)
X-Original-To: int-list-linux-mm@kvack.org
Delivered-To: int-list-linux-mm@kvack.org
Original-Received: by kanga.kvack.org (Postfix, from userid 63042)
	id 9878D6B005D; Sat,  4 Aug 2012 10:02:47 -0400 (EDT)
X-Original-To: linux-mm@kvack.org
Delivered-To: linux-mm@kvack.org
Original-Received: from psmtp.com (na3sys010amx126.postini.com [74.125.245.126])
	by kanga.kvack.org (Postfix) with SMTP id CDAD26B0044
	for <linux-mm@kvack.org>; Sat,  4 Aug 2012 10:02:46 -0400 (EDT)
Original-Received: from mail-vc0-f169.google.com ([209.85.220.169]) (using TLSv1) by na3sys010amx126.postini.com ([74.125.244.10]) with SMTP;
	Sat, 04 Aug 2012 14:02:46 GMT
Original-Received: by vcbfl10 with SMTP id fl10so1849034vcb.14
        for <linux-mm@kvack.org>; Sat, 04 Aug 2012 07:02:45 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=JBdWJGRXSbuQ2vzq4qG4b/an3EfVAt0PMX+kr8lM6T4=;
        b=E92tvbFoa7+3eR2c/WEis8NWt8SwwBzgVUsnlfrMXIkAi5vgtMpmN3oKALHDCWJfd5
         2+f48ObwZ8VEd+BuhF6Syvs+vNO6wAdlUJ4/0oiBJ/wHluhApgBIi6k67vniuYNJJUb+
         4USDxPfcKoowmMAzHMiFevoFbl360JK367hExtA74uBlAwZNX2zTNnAAQf2AQLTApYim
         cX4kZODgTsFbXUtOoIhlq3aQjgkjMIRhmEFkR6T68YtmvS8XrsUGm9JMb2kCCNjiI1iN
         5USvSRLdSx9+Zd9Zm6uPDHc2H0h8MUqG8ECvjy4IJhxxCN2wK3RUEtzEBwZ/ivmJ8Zds
         iABw==
Original-Received: by 10.52.66.10 with SMTP id b10mr3413696vdt.84.1344088965874; Sat,
 04 Aug 2012 07:02:45 -0700 (PDT)
Original-Received: by 10.220.1.210 with HTTP; Sat, 4 Aug 2012 07:02:45 -0700 (PDT)
In-Reply-To: <1343887288-8866-9-git-send-email-laijs@cn.fujitsu.com>
X-pstn-neptune: 0/0/0.00/0
X-pstn-levels: (S:99.90000/99.90000 CV:99.9000 FC:95.5390 LC:95.5390 R:95.9108 P:95.9108 M:97.0282 C:98.6951 )
X-pstn-dkim: 1 skipped:not-enabled
X-pstn-settings: 3 (1.0000:0.0100) s cv GT3 gt2 gt1 r p m c 
X-pstn-addresses: from <dhillf@gmail.com> [db-null] 
X-Bogosity: Ham, tests=bogofilter, spamicity=0.000000, version=1.2.2
Original-Sender: owner-linux-mm@kvack.org
Precedence: bulk
X-Loop: owner-majordomo@kvack.org
List-ID: <linux-mm.kvack.org>
Xref: news.gmane.org gmane.linux.kernel.mm:83617 gmane.linux.kernel:1337682
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1337682>

On Thu, Aug 2, 2012 at 2:01 PM, Lai Jiangshan <laijs@cn.fujitsu.com> wrote:
> N_HIGH_MEMORY stands for the nodes that has normal or high memory.
> N_MEMORY stands for the nodes that has any memory.
>
> The code here need to handle with the nodes which have memory, we should
> use N_MEMORY instead.
>
> Signed-off-by: Lai Jiangshan <laijs@cn.fujitsu.com>
> ---
>  drivers/base/node.c |    2 +-
>  mm/hugetlb.c        |   24 ++++++++++++------------
>  2 files changed, 13 insertions(+), 13 deletions(-)
>

Better if the patch is split for hugetlb and node respectively.

Acked-by: Hillf Danton <dhillf@gmail.com>

> diff --git a/drivers/base/node.c b/drivers/base/node.c
> index af1a177..31f4805 100644
> --- a/drivers/base/node.c
> +++ b/drivers/base/node.c
> @@ -227,7 +227,7 @@ static node_registration_func_t __hugetlb_unregister_node;
>  static inline bool hugetlb_register_node(struct node *node)
>  {
>         if (__hugetlb_register_node &&
> -                       node_state(node->dev.id, N_HIGH_MEMORY)) {
> +                       node_state(node->dev.id, N_MEMORY)) {
>                 __hugetlb_register_node(node);
>                 return true;
>         }
> diff --git a/mm/hugetlb.c b/mm/hugetlb.c
> index e198831..661db47 100644
> --- a/mm/hugetlb.c
> +++ b/mm/hugetlb.c
> @@ -1046,7 +1046,7 @@ static void return_unused_surplus_pages(struct hstate *h,
>          * on-line nodes with memory and will handle the hstate accounting.
>          */
>         while (nr_pages--) {
> -               if (!free_pool_huge_page(h, &node_states[N_HIGH_MEMORY], 1))
> +               if (!free_pool_huge_page(h, &node_states[N_MEMORY], 1))
>                         break;
>         }
>  }
> @@ -1150,14 +1150,14 @@ static struct page *alloc_huge_page(struct vm_area_struct *vma,
>  int __weak alloc_bootmem_huge_page(struct hstate *h)
>  {
>         struct huge_bootmem_page *m;
> -       int nr_nodes = nodes_weight(node_states[N_HIGH_MEMORY]);
> +       int nr_nodes = nodes_weight(node_states[N_MEMORY]);
>
>         while (nr_nodes) {
>                 void *addr;
>
>                 addr = __alloc_bootmem_node_nopanic(
>                                 NODE_DATA(hstate_next_node_to_alloc(h,
> -                                               &node_states[N_HIGH_MEMORY])),
> +                                               &node_states[N_MEMORY])),
>                                 huge_page_size(h), huge_page_size(h), 0);
>
>                 if (addr) {
> @@ -1229,7 +1229,7 @@ static void __init hugetlb_hstate_alloc_pages(struct hstate *h)
>                         if (!alloc_bootmem_huge_page(h))
>                                 break;
>                 } else if (!alloc_fresh_huge_page(h,
> -                                        &node_states[N_HIGH_MEMORY]))
> +                                        &node_states[N_MEMORY]))
>                         break;
>         }
>         h->max_huge_pages = i;
> @@ -1497,7 +1497,7 @@ static ssize_t nr_hugepages_store_common(bool obey_mempolicy,
>                 if (!(obey_mempolicy &&
>                                 init_nodemask_of_mempolicy(nodes_allowed))) {
>                         NODEMASK_FREE(nodes_allowed);
> -                       nodes_allowed = &node_states[N_HIGH_MEMORY];
> +                       nodes_allowed = &node_states[N_MEMORY];
>                 }
>         } else if (nodes_allowed) {
>                 /*
> @@ -1507,11 +1507,11 @@ static ssize_t nr_hugepages_store_common(bool obey_mempolicy,
>                 count += h->nr_huge_pages - h->nr_huge_pages_node[nid];
>                 init_nodemask_of_node(nodes_allowed, nid);
>         } else
> -               nodes_allowed = &node_states[N_HIGH_MEMORY];
> +               nodes_allowed = &node_states[N_MEMORY];
>
>         h->max_huge_pages = set_max_huge_pages(h, count, nodes_allowed);
>
> -       if (nodes_allowed != &node_states[N_HIGH_MEMORY])
> +       if (nodes_allowed != &node_states[N_MEMORY])
>                 NODEMASK_FREE(nodes_allowed);
>
>         return len;
> @@ -1812,7 +1812,7 @@ static void hugetlb_register_all_nodes(void)
>  {
>         int nid;
>
> -       for_each_node_state(nid, N_HIGH_MEMORY) {
> +       for_each_node_state(nid, N_MEMORY) {
>                 struct node *node = &node_devices[nid];
>                 if (node->dev.id == nid)
>                         hugetlb_register_node(node);
> @@ -1906,8 +1906,8 @@ void __init hugetlb_add_hstate(unsigned order)
>         h->free_huge_pages = 0;
>         for (i = 0; i < MAX_NUMNODES; ++i)
>                 INIT_LIST_HEAD(&h->hugepage_freelists[i]);
> -       h->next_nid_to_alloc = first_node(node_states[N_HIGH_MEMORY]);
> -       h->next_nid_to_free = first_node(node_states[N_HIGH_MEMORY]);
> +       h->next_nid_to_alloc = first_node(node_states[N_MEMORY]);
> +       h->next_nid_to_free = first_node(node_states[N_MEMORY]);
>         snprintf(h->name, HSTATE_NAME_LEN, "hugepages-%lukB",
>                                         huge_page_size(h)/1024);
>
> @@ -1995,11 +1995,11 @@ static int hugetlb_sysctl_handler_common(bool obey_mempolicy,
>                 if (!(obey_mempolicy &&
>                                init_nodemask_of_mempolicy(nodes_allowed))) {
>                         NODEMASK_FREE(nodes_allowed);
> -                       nodes_allowed = &node_states[N_HIGH_MEMORY];
> +                       nodes_allowed = &node_states[N_MEMORY];
>                 }
>                 h->max_huge_pages = set_max_huge_pages(h, tmp, nodes_allowed);
>
> -               if (nodes_allowed != &node_states[N_HIGH_MEMORY])
> +               if (nodes_allowed != &node_states[N_MEMORY])
>                         NODEMASK_FREE(nodes_allowed);
>         }
>  out:
> --
> 1.7.1
>

--
To unsubscribe, send a message with 'unsubscribe linux-mm' in
the body to majordomo@kvack.org.  For more info on Linux MM,
see: http://www.linux-mm.org/ .
Don't email: <a href=mailto:"dont@kvack.org"> email@kvack.org </a>

