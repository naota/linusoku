Path: news.gmane.org!not-for-mail
From: Namhyung Kim <namhyung@kernel.org>
Newsgroups: gmane.linux.kernel
Subject: Re: [PATCH v5 4/5] perf script: Add a python library EventClass.py
Date: Thu, 09 Aug 2012 10:10:14 +0900
Lines: 125
Approved: news@gmane.org
Message-ID: <87mx24yio9.fsf@sejong.aot.lge.com>
References: <1344419875-21665-1-git-send-email-feng.tang@intel.com>
	<1344419875-21665-5-git-send-email-feng.tang@intel.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain
X-Trace: dough.gmane.org 1344474980 17641 80.91.229.3 (9 Aug 2012 01:16:20 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Thu, 9 Aug 2012 01:16:20 +0000 (UTC)
Cc: Arnaldo Carvalho de Melo <acme@redhat.com>,
	David Ahern <dsahern@gmail.com>,
	Peter Zijlstra <peterz@infradead.org>,
	Ingo Molnar <mingo@elte.hu>, linux-kernel@vger.kernel.org,
	Robert Richter <robert.richter@amd.com>,
	Andi Kleen <andi@firstfloor.org>,
	Stephane Eranian <eranian@google.com>
To: Feng Tang <feng.tang@intel.com>
Original-X-From: linux-kernel-owner@vger.kernel.org Thu Aug 09 03:16:19 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SzHMH-0006WW-JX
	for glk-linux-kernel-3@plane.gmane.org; Thu, 09 Aug 2012 03:16:18 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1757695Ab2HIBQL (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Wed, 8 Aug 2012 21:16:11 -0400
Original-Received: from LGEMRELSE6Q.lge.com ([156.147.1.121]:45673 "EHLO
	LGEMRELSE6Q.lge.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754816Ab2HIBQJ (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Wed, 8 Aug 2012 21:16:09 -0400
X-AuditID: 9c930179-b7bdcae000003d91-f4-50230f57491b
Original-Received: from sejong.aot.lge.com.lge.com ( [10.177.220.181])
	by LGEMRELSE6Q.lge.com (Symantec Brightmail Gateway) with SMTP id 03.A1.15761.75F03205; Thu,  9 Aug 2012 10:16:07 +0900 (KST)
In-Reply-To: <1344419875-21665-5-git-send-email-feng.tang@intel.com> (Feng
	Tang's message of "Wed, 8 Aug 2012 17:57:54 +0800")
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/24.1 (gnu/linux)
X-Brightmail-Tracker: AAAAAA==
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1340403
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1340403>

On Wed,  8 Aug 2012 17:57:54 +0800, Feng Tang wrote:
> This library defines several class types for perf events which could
> help to better analyze the event samples. Currently there are just a
> few classes, PerfEvent is the base class for all perf events,  PebsEvent
> is a HW base Intel x86 PEBS event, and user could add more SW/HW event
> classes based on requriements.
>
> Signed-off-by: Feng Tang <feng.tang@intel.com>
> ---
>  .../Perf-Trace-Util/lib/Perf/Trace/EventClass.py   |   95 ++++++++++++++++++++
>  1 files changed, 95 insertions(+), 0 deletions(-)
>  create mode 100755 tools/perf/scripts/python/Perf-Trace-Util/lib/Perf/Trace/EventClass.py
>
> diff --git a/tools/perf/scripts/python/Perf-Trace-Util/lib/Perf/Trace/EventClass.py b/tools/perf/scripts/python/Perf-Trace-Util/lib/Perf/Trace/EventClass.py
> new file mode 100755
> index 0000000..12cd773
> --- /dev/null
> +++ b/tools/perf/scripts/python/Perf-Trace-Util/lib/Perf/Trace/EventClass.py
> @@ -0,0 +1,95 @@
> +# EventClass.py
> +#
> +# This is a libray defining some events typs classes, which could

s/typs/type/


> +# be used by other scripts to analyzing the perf samples.
> +#
> +# Currently there are just a few classes defined for examples,
> +# PerfEvent is the base class for all perf event sample, PebsEvent
> +# is a HW base Intel x86 PEBS event, and user could add more SW/HW
> +# event classes based on requriements.

s/requriements/requirements/

Thanks,
Namhyung


> +
> +import struct
> +
> +# Event types, user could add more here
> +EVTYPE_GENERIC  = 0
> +EVTYPE_PEBS     = 1     # Basic PEBS event
> +EVTYPE_PEBS_LL  = 2     # PEBS event with load latency info
> +EVTYPE_IBS      = 3
> +
> +#
> +# Currently we don't have good way to tell the event type, but by
> +# the size of raw buffer, raw PEBS event with load latency data's
> +# size is 176 bytes, while the pure PEBS event's size is 144 bytes.
> +#
> +def create_event(name, comm, dso, symbol, raw_buf):
> +        if (len(raw_buf) == 144):
> +                event = PebsEvent(name, comm, dso, symbol, raw_buf)
> +        elif (len(raw_buf) == 176):
> +                event = PebsNHM(name, comm, dso, symbol, raw_buf)
> +        else:
> +                event = PerfEvent(name, comm, dso, symbol, raw_buf)
> +
> +        return event
> +
> +class PerfEvent(object):
> +        event_num = 0
> +        def __init__(self, name, comm, dso, symbol, raw_buf, ev_type=EVTYPE_GENERIC):
> +                self.name       = name
> +                self.comm       = comm
> +                self.dso        = dso
> +                self.symbol     = symbol
> +                self.raw_buf    = raw_buf
> +                self.ev_type    = ev_type
> +                PerfEvent.event_num += 1
> +
> +        def show(self):
> +                print "PMU event: name=%12s, symbol=%24s, comm=%8s, dso=%12s" % (self.name, self.symbol, self.comm, self.dso)
> +
> +#
> +# Basic Intel PEBS (Precise Event-based Sampling) event, whose raw buffer
> +# contains the context info when that event happened: the EFLAGS and
> +# linear IP info, as well as all the registers.
> +#
> +class PebsEvent(PerfEvent):
> +        pebs_num = 0
> +        def __init__(self, name, comm, dso, symbol, raw_buf, ev_type=EVTYPE_PEBS):
> +                tmp_buf=raw_buf[0:80]
> +                flags, ip, ax, bx, cx, dx, si, di, bp, sp = struct.unpack('QQQQQQQQQQ', tmp_buf)
> +                self.flags = flags
> +                self.ip    = ip
> +                self.ax    = ax
> +                self.bx    = bx
> +                self.cx    = cx
> +                self.dx    = dx
> +                self.si    = si
> +                self.di    = di
> +                self.bp    = bp
> +                self.sp    = sp
> +
> +                PerfEvent.__init__(self, name, comm, dso, symbol, raw_buf, ev_type)
> +                PebsEvent.pebs_num += 1
> +                del tmp_buf
> +
> +#
> +# Intel Nehalem and Westmere support PEBS plus Load Latency info which lie
> +# in the four 64 bit words write after the PEBS data:
> +#       Status: records the IA32_PERF_GLOBAL_STATUS register value
> +#       DLA:    Data Linear Address (EIP)
> +#       DSE:    Data Source Encoding, where the latency happens, hit or miss
> +#               in L1/L2/L3 or IO operations
> +#       LAT:    the actual latency in cycles
> +#
> +class PebsNHM(PebsEvent):
> +        pebs_nhm_num = 0
> +        def __init__(self, name, comm, dso, symbol, raw_buf, ev_type=EVTYPE_PEBS_LL):
> +                tmp_buf=raw_buf[144:176]
> +                status, dla, dse, lat = struct.unpack('QQQQ', tmp_buf)
> +                self.status = status
> +                self.dla = dla
> +                self.dse = dse
> +                self.lat = lat
> +
> +                PebsEvent.__init__(self, name, comm, dso, symbol, raw_buf, ev_type)
> +                PebsNHM.pebs_nhm_num += 1
> +                del tmp_buf
> +
