Path: news.gmane.org!not-for-mail
From: Russell King - ARM Linux <linux@arm.linux.org.uk>
Newsgroups: gmane.linux.kernel,gmane.linux.ports.arm.kernel
Subject: Re: [PATCH 01/22] ARM: add mechanism for late code patching
Date: Mon, 6 Aug 2012 14:26:42 +0100
Lines: 32
Approved: news@gmane.org
Message-ID: <20120806132642.GC18957@n2100.arm.linux.org.uk>
References: <1343775898-28345-1-git-send-email-cyril@ti.com> <1343775898-28345-2-git-send-email-cyril@ti.com> <20120806111224.GA18957@n2100.arm.linux.org.uk> <501FC44E.1040806@ti.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Trace: dough.gmane.org 1344259626 6344 80.91.229.3 (6 Aug 2012 13:27:06 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Mon, 6 Aug 2012 13:27:06 +0000 (UTC)
Cc: linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
	arnd@arndb.de, catalin.marinas@arm.com, nico@linaro.org,
	will.deacon@arm.com
To: Cyril Chemparathy <cyril@ti.com>
Original-X-From: linux-kernel-owner@vger.kernel.org Mon Aug 06 15:27:05 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SyNKp-0008Cu-OJ
	for glk-linux-kernel-3@plane.gmane.org; Mon, 06 Aug 2012 15:27:04 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755738Ab2HFN0z (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Mon, 6 Aug 2012 09:26:55 -0400
Original-Received: from caramon.arm.linux.org.uk ([78.32.30.218]:55320 "EHLO
	caramon.arm.linux.org.uk" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753844Ab2HFN0y (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Mon, 6 Aug 2012 09:26:54 -0400
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; d=arm.linux.org.uk; s=caramon;
	h=Sender:In-Reply-To:Content-Type:MIME-Version:References:Message-ID:Subject:Cc:To:From:Date; bh=rF4nPBzUmKTlmCMeSwq0jNt6wvFS7OnZQPREp0IiP0Y=;
	b=LbkGb80sArrdY3+DXyZ9sJwCLQ0MRUc39bja/GNWN1iEml3Z0LO59sX8ZjMOeLD0KwoSJvlWPvvPiymTle9cswf30ig7AVlk5Du56Izj0VrSYHKhPqPr8xJcrQMuwMf4h+hh7v1POaAU17obsnNmPTJHZE7ZKgK8DF62KMvj/yY=;
Original-Received: from n2100.arm.linux.org.uk ([2002:4e20:1eda:1:214:fdff:fe10:4f86]:49064)
	by caramon.arm.linux.org.uk with esmtpsa (TLSv1:AES256-SHA:256)
	(Exim 4.76)
	(envelope-from <linux@arm.linux.org.uk>)
	id 1SyNKV-0003S5-Tl; Mon, 06 Aug 2012 14:26:44 +0100
Original-Received: from linux by n2100.arm.linux.org.uk with local (Exim 4.76)
	(envelope-from <linux@n2100.arm.linux.org.uk>)
	id 1SyNKU-0008CI-RW; Mon, 06 Aug 2012 14:26:42 +0100
Content-Disposition: inline
In-Reply-To: <501FC44E.1040806@ti.com>
User-Agent: Mutt/1.5.19 (2009-01-05)
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1338278 gmane.linux.ports.arm.kernel:180428
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1338278>

On Mon, Aug 06, 2012 at 09:19:10AM -0400, Cyril Chemparathy wrote:
> With a flush_cache_all(), we could avoid having to operate a cacheline  
> at a time, but that clobbers way more than necessary.

You can't do that, because flush_cache_all() on some CPUs requires the
proper MMU mappings to be in place, and you can't get those mappings
in place because you don't have the V:P offsets fixed up in the kernel.
Welcome to the chicken and egg problem.

> Sure, flushing caches is expensive.  But then, so is running the  
> patching code with caches disabled.  I guess memory access latencies  
> drive the performance trade off here.

There we disagree on a few orders of magnitude.  There are relatively
few places that need updating.  According to the kernel I have here:

   text    data     bss     dec     hex filename
7644346  454320  212984 8311650  7ed362 vmlinux

Idx Name          Size      VMA       LMA       File off  Algn
  1 .text         004cd170  c00081c0  c00081c0  000081c0  2**5
 16 .init.pv_table 00000300  c0753a24  c0753a24  00753a24  2**0

That's about 7MB of text, and only 192 points in that code which need
patching.  Even if we did this with caches on, that's still 192 places,
and only 192 places we'd need to flush a cache line.

Alternatively, with your approach and 7MB of text, you need to flush
238885 cache lines to cover the entire kernel.

It would be far _cheaper_ with your approach to flush the individual
cache lines as you go.
