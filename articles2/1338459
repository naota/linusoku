Path: news.gmane.org!not-for-mail
From: Bart Van Assche <bvanassche@acm.org>
Newsgroups: gmane.linux.kernel,gmane.linux.scsi
Subject: Re: [PATCH] fix NULL-pointer dereference on scsi_run_queue
Date: Mon, 06 Aug 2012 17:56:49 +0000
Lines: 80
Approved: news@gmane.org
Message-ID: <50200561.4020100@acm.org>
References: <CAOAMb1D+g0zzKGKjMPPp7V-XEwKB5AYGMDvUUbXNaHaz8ieTVg@mail.gmail.com> <501CE4E5.20604@acm.org> <501D51D1.2010806@cs.wisc.edu> <501D83A1.7040900@acm.org> <501DA3F0.4090009@cs.wisc.edu>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1344275830 22584 80.91.229.3 (6 Aug 2012 17:57:10 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Mon, 6 Aug 2012 17:57:10 +0000 (UTC)
Cc: Chanho Min <chanho0207@gmail.com>,
	James Bottomley <JBottomley@parallels.com>,
	linux-scsi@vger.kernel.org, linux-kernel@vger.kernel.org,
	Jens Axboe <axboe@kernel.dk>, Tejun Heo <tj@kernel.org>
To: Mike Christie <michaelc@cs.wisc.edu>
Original-X-From: linux-kernel-owner@vger.kernel.org Mon Aug 06 19:57:10 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SyRYA-000705-D0
	for glk-linux-kernel-3@plane.gmane.org; Mon, 06 Aug 2012 19:57:06 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756843Ab2HFR45 (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Mon, 6 Aug 2012 13:56:57 -0400
Original-Received: from relay02ant.iops.be ([212.53.4.35]:44700 "EHLO
	relay02ant.iops.be" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1756800Ab2HFR4z (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Mon, 6 Aug 2012 13:56:55 -0400
Original-Received: from localhost (localhost.localdomain [127.0.0.1])
	by relay02ant.iops.be (Postfix) with ESMTP id AECAA4020095;
	Mon,  6 Aug 2012 19:56:53 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=iops.be; h=
	content-transfer-encoding:content-type:content-type:in-reply-to
	:references:subject:subject:mime-version:user-agent:from:from
	:date:date:message-id:received:received; s=scooby; i=
	postadmin@iops.be; t=1344275811; bh=pzVR1pC8GkP/xOep2aXM8EJ5bD9z
	HTc9FlF2OhizTs0=; b=jtS2A8MO5/erNhb8vpxG14xcBEU3L4e8kfbBOJkx/ss5
	gtSKXmM9sJY19ESmcDOKstz/NoIEJsVAmWlozs9d+Ax95B1z5Qynq1wvggN/fqhW
	YlirNH61gGewXVtnb0XYS+x6u5Ma+i2zJBg2p2CXBAptnib5GtX0kT333ARHaaM=
X-Virus-Scanned: amavisd-new at iops.be
Original-Received: from relay02ant.iops.be ([127.0.0.1])
	by localhost (bdell035.dcn.iops.be [127.0.0.1]) (amavisd-new, port 10026)
	with LMTP id qlfa6M23isZg; Mon,  6 Aug 2012 19:56:51 +0200 (CEST)
Original-Received: from [192.168.1.65] (cust-103-5-110-94.dyn.as47377.net [94.110.5.103])
	by relay02ant.iops.be (Postfix) with ESMTP id E568840200E3;
	Mon,  6 Aug 2012 19:56:49 +0200 (CEST)
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:14.0) Gecko/20120713 Thunderbird/14.0
In-Reply-To: <501DA3F0.4090009@cs.wisc.edu>
X-Enigmail-Version: 1.5a1pre
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1338459 gmane.linux.scsi:76781
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1338459>

On 08/04/12 22:36, Mike Christie wrote:
> On 08/04/2012 03:18 PM, Bart Van Assche wrote:
>> On 08/04/12 16:46, Mike Christie wrote:
>>> I think we have to have scsi-ml do a get_device when a sdev is added to
>>> the starved entry and then do a put_device when it is removed (must do
>>> these under the host lock for the starved entry case too). I am not sure
>>> if that is just a hack/papering-over of the problem and there are more
>>> issues like this.
>>
>> That would result in a more complex patch than the patch at the start of
>> this thread, isn't it ?
> 
> Yaah, but the original patch in this thread is still racey isn't it?

Indeed. How about the patch below ? Scsi devices are removed from
starved_list after blk_cleanup_queue() and before put_device(). That
guarantees that inside scsi_run_queue() get_device() under host lock
will succeed.

---
 drivers/scsi/scsi_lib.c   |    5 +++++
 drivers/scsi/scsi_sysfs.c |    7 ++++++-
 2 files changed, 11 insertions(+), 1 deletions(-)

diff --git a/drivers/scsi/scsi_lib.c b/drivers/scsi/scsi_lib.c
index ffd7773..bd7daec 100644
--- a/drivers/scsi/scsi_lib.c
+++ b/drivers/scsi/scsi_lib.c
@@ -452,10 +452,15 @@ static void scsi_run_queue(struct request_queue *q)
 			continue;
 		}
 
+		get_device(&sdev->sdev_gendev);
 		spin_unlock(shost->host_lock);
+
 		spin_lock(sdev->request_queue->queue_lock);
 		__blk_run_queue(sdev->request_queue);
 		spin_unlock(sdev->request_queue->queue_lock);
+
+		put_device(&sdev->sdev_gendev);
+
 		spin_lock(shost->host_lock);
 	}
 	/* put any unprocessed entries back */
diff --git a/drivers/scsi/scsi_sysfs.c b/drivers/scsi/scsi_sysfs.c
index 093d4f6..44f232e 100644
--- a/drivers/scsi/scsi_sysfs.c
+++ b/drivers/scsi/scsi_sysfs.c
@@ -348,7 +348,6 @@ static void scsi_device_dev_release_usercontext(struct work_struct *work)
 	starget->reap_ref++;
 	list_del(&sdev->siblings);
 	list_del(&sdev->same_target_siblings);
-	list_del(&sdev->starved_entry);
 	spin_unlock_irqrestore(sdev->host->host_lock, flags);
 
 	cancel_work_sync(&sdev->event_work);
@@ -956,6 +955,8 @@ int scsi_sysfs_add_sdev(struct scsi_device *sdev)
 void __scsi_remove_device(struct scsi_device *sdev)
 {
 	struct device *dev = &sdev->sdev_gendev;
+	struct Scsi_Host *shost = sdev->host;
+	unsigned long flags;
 
 	if (sdev->is_visible) {
 		if (scsi_device_set_state(sdev, SDEV_CANCEL) != 0)
@@ -977,6 +978,10 @@ void __scsi_remove_device(struct scsi_device *sdev)
 	blk_cleanup_queue(sdev->request_queue);
 	cancel_work_sync(&sdev->requeue_work);
 
+	spin_lock_irqsave(shost->host_lock, flags);
+	list_del(&sdev->starved_entry);
+	spin_unlock_irqrestore(shost->host_lock, flags);
+
 	if (sdev->host->hostt->slave_destroy)
 		sdev->host->hostt->slave_destroy(sdev);
 	transport_destroy_device(dev);
-- 
1.7.7


