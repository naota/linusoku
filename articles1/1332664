Path: news.gmane.org!not-for-mail
From: Colin Cross <ccross@android.com>
Newsgroups: gmane.linux.kernel,gmane.linux.ports.arm.kernel
Subject: [RFC v2] ARM: sched_clock: update epoch_cyc on resume
Date: Tue, 24 Jul 2012 19:49:44 -0700
Lines: 98
Approved: news@gmane.org
Message-ID: <1343184588-20239-1-git-send-email-ccross@android.com>
NNTP-Posting-Host: plane.gmane.org
X-Trace: dough.gmane.org 1343184602 9813 80.91.229.3 (25 Jul 2012 02:50:02 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Wed, 25 Jul 2012 02:50:02 +0000 (UTC)
Cc: Barry Song <21cnbao@gmail.com>,
	Vaibhav Bedia <vaibhav.bedia@ti.com>,
	Colin Cross <ccross@android.com>,
	Russell King <linux@arm.linux.org.uk>,
	Krzysztof Halasa <khc@pm.waw.pl>,
	Nicolas Pitre <nico@linaro.org>,
	Marc Zyngier <marc.zyngier@arm.com>,
	Linus Walleij <linus.walleij@linaro.org>,
	linux-kernel@vger.kernel.org
To: linux-arm-kernel@lists.infradead.org
Original-X-From: linux-kernel-owner@vger.kernel.org Wed Jul 25 04:50:00 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1Strfk-0004vk-D5
	for glk-linux-kernel-3@plane.gmane.org; Wed, 25 Jul 2012 04:50:00 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756124Ab2GYCtw (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Tue, 24 Jul 2012 22:49:52 -0400
Original-Received: from mail-qc0-f202.google.com ([209.85.216.202]:57485 "EHLO
	mail-qc0-f202.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754480Ab2GYCtv (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Tue, 24 Jul 2012 22:49:51 -0400
Original-Received: by qcqs25 with SMTP id s25so31757qcq.1
        for <linux-kernel@vger.kernel.org>; Tue, 24 Jul 2012 19:49:50 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=from:to:cc:subject:date:message-id:x-mailer:x-gm-message-state;
        bh=Ba/VuTwJPUYnOe5im93YQrJKa6ihCTNNhajcENbPZxk=;
        b=ZIir8WKcjqhYlnWAZKEkOJEjW5yenmPJsOGblfsxjeLKTH9a3ZRy0T5Gz5xbrb2EEY
         MnWpYJt3R3+98tjxWcaalIPdwg8Y++zqUxs/y+ljPF8PC84vX3Ya2t6+aBCmb0XP1MQD
         Qtpz1z8jp2BVYYkdFzw1JDZPyV1VmzWjuxXQJgKnp2qRfdvbuCp4ASiVHJ0CtOLXoT7G
         PFSzZbUAv5pgGoaFqPVAHH9xPWRVC8vJzwO0c1GugNDA0JsCXZHWOM3PWdUI/Z8yzhP9
         nOmUJGDzGwmCxHoulcmFGGwyk4qgLB8veWq8DQ18Cm1IN4W6xWso1HntrfUVulxRodtG
         J5+A==
Original-Received: by 10.236.133.146 with SMTP id q18mr11978245yhi.12.1343184590415;
        Tue, 24 Jul 2012 19:49:50 -0700 (PDT)
Original-Received: by 10.236.133.146 with SMTP id q18mr11978226yhi.12.1343184590342;
        Tue, 24 Jul 2012 19:49:50 -0700 (PDT)
Original-Received: from wpzn3.hot.corp.google.com (216-239-44-65.google.com [216.239.44.65])
        by gmr-mx.google.com with ESMTPS id i24si1768819anh.2.2012.07.24.19.49.50
        (version=TLSv1/SSLv3 cipher=AES128-SHA);
        Tue, 24 Jul 2012 19:49:50 -0700 (PDT)
Original-Received: from walnut.mtv.corp.google.com (walnut.mtv.corp.google.com [172.18.104.116])
	by wpzn3.hot.corp.google.com (Postfix) with ESMTP id 3C906100047;
	Tue, 24 Jul 2012 19:49:50 -0700 (PDT)
Original-Received: by walnut.mtv.corp.google.com (Postfix, from userid 99897)
	id DC28E257A40; Tue, 24 Jul 2012 19:49:49 -0700 (PDT)
X-Mailer: git-send-email 1.7.7.3
X-Gm-Message-State: ALoCoQmxso2kVC//REjYMZrkmXWidDcmHBLxi28M4Uu5ufYCir3/jQEJSTcjXt0jTO1hMEXhCZuy21ikJjZDdoNNdkreoq56OeCQQJAxDhMwEXJyZVUshhFTSFGQfqw+JUd4jU5y4iaiwInFegcwU4q31o9YkTPsLhLUZwEobl7r8Bwz9jGcmpmjFK2Vscxbw1L93WGuAhPx
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1332664 gmane.linux.ports.arm.kernel:178636
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1332664>

Many clocks that are used to provide sched_clock will reset during
suspend.  If read_sched_clock returns 0 after suspend, sched_clock will
appear to jump forward.  This patch resets cd.epoch_cyc to the current
value of read_sched_clock during resume, which causes sched_clock() just
after suspend to return the same value as sched_clock() just before
suspend.

In addition, during the window where epoch_ns has been updated before
suspend, but epoch_cyc has not been updated after suspend, it is unknown
whether the clock has reset or not, and sched_clock() could return a
bogus value.  Add a suspended flag, and return the pre-suspend epoch_ns
value during this period.

The new behavior is triggered by calling setup_sched_clock_needs_suspend
instead of setup_sched_clock.

Signed-off-by: Colin Cross <ccross@android.com>
---
 arch/arm/include/asm/sched_clock.h |    2 ++
 arch/arm/kernel/sched_clock.c      |   24 ++++++++++++++++++++++++
 2 files changed, 26 insertions(+), 0 deletions(-)

diff --git a/arch/arm/include/asm/sched_clock.h b/arch/arm/include/asm/sched_clock.h
index e3f7572..05b8e82 100644
--- a/arch/arm/include/asm/sched_clock.h
+++ b/arch/arm/include/asm/sched_clock.h
@@ -10,5 +10,7 @@
 
 extern void sched_clock_postinit(void);
 extern void setup_sched_clock(u32 (*read)(void), int bits, unsigned long rate);
+extern void setup_sched_clock_needs_suspend(u32 (*read)(void), int bits,
+		unsigned long rate);
 
 #endif
diff --git a/arch/arm/kernel/sched_clock.c b/arch/arm/kernel/sched_clock.c
index 27d186a..f451539 100644
--- a/arch/arm/kernel/sched_clock.c
+++ b/arch/arm/kernel/sched_clock.c
@@ -21,6 +21,8 @@ struct clock_data {
 	u32 epoch_cyc_copy;
 	u32 mult;
 	u32 shift;
+	bool suspended;
+	bool needs_suspend;
 };
 
 static void sched_clock_poll(unsigned long wrap_ticks);
@@ -49,6 +51,9 @@ static unsigned long long cyc_to_sched_clock(u32 cyc, u32 mask)
 	u64 epoch_ns;
 	u32 epoch_cyc;
 
+	if (cd.suspended)
+		return cd.epoch_ns;
+
 	/*
 	 * Load the epoch_cyc and epoch_ns atomically.  We do this by
 	 * ensuring that we always write epoch_cyc, epoch_ns and
@@ -98,6 +103,13 @@ static void sched_clock_poll(unsigned long wrap_ticks)
 	update_sched_clock();
 }
 
+void __init setup_sched_clock_needs_suspend(u32 (*read)(void), int bits,
+		unsigned long rate)
+{
+	setup_sched_clock(read, bits, rate);
+	cd.needs_suspend = true;
+}
+
 void __init setup_sched_clock(u32 (*read)(void), int bits, unsigned long rate)
 {
 	unsigned long r, w;
@@ -169,11 +181,23 @@ void __init sched_clock_postinit(void)
 static int sched_clock_suspend(void)
 {
 	sched_clock_poll(sched_clock_timer.data);
+	if (cd.needs_suspend)
+		cd.suspended = true;
 	return 0;
 }
 
+static void sched_clock_resume(void)
+{
+	if (cd.needs_suspend) {
+		cd.epoch_cyc = read_sched_clock();
+		cd.epoch_cyc_copy = cd.epoch_cyc;
+		cd.suspended = false;
+	}
+}
+
 static struct syscore_ops sched_clock_ops = {
 	.suspend = sched_clock_suspend,
+	.resume = sched_clock_resume,
 };
 
 static int __init sched_clock_syscore_init(void)
-- 
1.7.7.3

