Path: news.gmane.org!not-for-mail
From: Ludwig Nussel <ludwig.nussel@suse.de>
Newsgroups: gmane.linux.documentation,gmane.linux.kernel,gmane.linux.file-systems,gmane.comp.file-systems.ext4
Subject: =?UTF-8?q?=5BPATCH=202/3=5D=20implement=20uid=20and=20gid=20mount=20options=20for=20ext3?=
Date: Thu,  2 Aug 2012 13:54:02 +0200
Lines: 310
Approved: news@gmane.org
Message-ID: <1343908443-17369-3-git-send-email-ludwig.nussel@suse.de>
References: <1343908443-17369-1-git-send-email-ludwig.nussel@suse.de>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: QUOTED-PRINTABLE
X-Trace: dough.gmane.org 1343908456 31910 80.91.229.3 (2 Aug 2012 11:54:16 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Thu, 2 Aug 2012 11:54:16 +0000 (UTC)
Cc: Ludwig Nussel <ludwig.nussel@suse.de>,
	linux-fsdevel@vger.kernel.org,
	Jan Kara <jack@suse.cz> (maintainer:EXT2 FILE SYSTEM),
	Rob Landley <rob@landley.net> (maintainer:DOCUMENTATION),
	Andrew Morton <akpm@linux-foundation.org> (maintainer:EXT3 FILE
	SYSTEM),
	Andreas Dilger <adilger.kernel@dilger.ca> (maintainer:EXT3 FILE
	SYSTEM),
	"Theodore Ts'o" <tytso@mit.edu> (maintainer:EXT4 FILE SYSTEM),
	linux-ext4@vger.kernel.org (open list:EXT2 FILE SYSTEM),
	linux-doc@vger.kernel.org (open list:DOCUMENTATION)
To: linux-kernel@vger.kernel.org
Original-X-From: linux-doc-owner@vger.kernel.org Thu Aug 02 13:54:14 2012
Return-path: <linux-doc-owner@vger.kernel.org>
Envelope-to: lnx-linux-doc@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-doc-owner@vger.kernel.org>)
	id 1Swtym-0002qH-U9
	for lnx-linux-doc@plane.gmane.org; Thu, 02 Aug 2012 13:54:13 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754122Ab2HBLyL convert rfc822-to-quoted-printable (ORCPT
	<rfc822;lnx-linux-doc@m.gmane.org>); Thu, 2 Aug 2012 07:54:11 -0400
Original-Received: from cantor2.suse.de ([195.135.220.15]:59503 "EHLO mx2.suse.de"
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753328Ab2HBLyI (ORCPT <rfc822;linux-doc@vger.kernel.org>);
	Thu, 2 Aug 2012 07:54:08 -0400
Original-Received: from relay1.suse.de (unknown [195.135.220.254])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx2.suse.de (Postfix) with ESMTP id 38D819FB23;
	Thu,  2 Aug 2012 13:54:07 +0200 (CEST)
X-Mailer: git-send-email 1.7.10.4
In-Reply-To: <1343908443-17369-1-git-send-email-ludwig.nussel@suse.de>
Original-Sender: linux-doc-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-doc.vger.kernel.org>
X-Mailing-List: linux-doc@vger.kernel.org
Xref: news.gmane.org gmane.linux.documentation:5979 gmane.linux.kernel:1336803 gmane.linux.file-systems:66386 gmane.comp.file-systems.ext4:33658
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1336803>

Signed-off-by: Ludwig Nussel <ludwig.nussel@suse.de>
---
 Documentation/filesystems/ext3.txt |    9 ++++
 fs/ext3/ext3.h                     |    8 +++
 fs/ext3/inode.c                    |   54 ++++++++++++++------
 fs/ext3/super.c                    |   95 ++++++++++++++++++++++++++++=
+++++++-
 4 Dateien ge=C3=A4ndert, 149 Zeilen hinzugef=C3=BCgt(+), 17 Zeilen ent=
fernt(-)

diff --git a/Documentation/filesystems/ext3.txt b/Documentation/filesys=
tems/ext3.txt
index 293855e..bd586d9 100644
--- a/Documentation/filesystems/ext3.txt
+++ b/Documentation/filesystems/ext3.txt
@@ -124,6 +124,15 @@ resgid=3Dn		The group ID which may use the reserve=
d blocks.
=20
 resuid=3Dn		The user ID which may use the reserved blocks.
=20
+uid=3Dn[:m]		Make all files appear to belong to uid n.
+			Useful for e.g. removable media with fstab
+			options 'user,uid=3Duseruid'. The optional second
+			uid m is actually written to the file system.
+
+gid=3Dn[:m]		Make all files appear to belong to gid n.
+			The optional second gid m is actually written to
+			the file system.
+
 sb=3Dn			Use alternate superblock at this location.
=20
 quota			These options are ignored by the filesystem. They
diff --git a/fs/ext3/ext3.h b/fs/ext3/ext3.h
index e85ff15..401114d 100644
--- a/fs/ext3/ext3.h
+++ b/fs/ext3/ext3.h
@@ -245,6 +245,10 @@ struct ext3_mount_options {
 	unsigned long s_mount_opt;
 	kuid_t s_resuid;
 	kgid_t s_resgid;
+	kuid_t s_uid;
+	kuid_t s_diskuid;
+	kgid_t s_gid;
+	kgid_t s_diskgid;
 	unsigned long s_commit_interval;
 #ifdef CONFIG_QUOTA
 	int s_jquota_fmt;
@@ -639,6 +643,10 @@ struct ext3_sb_info {
 	ext3_fsblk_t s_sb_block;
 	kuid_t s_resuid;
 	kgid_t s_resgid;
+	kuid_t s_uid;          /* make all files appear to belong to this uid=
 */
+	kuid_t s_diskuid;      /* write this uid to disk (if s_uid !=3D 0) */
+	kgid_t s_gid;          /* make all files appear to belong to this gid=
 */
+	kgid_t s_diskgid;      /* write this gid to disk (if s_gid !=3D 0) */
 	unsigned short s_mount_state;
 	unsigned short s_pad;
 	int s_addr_per_block_bits;
diff --git a/fs/ext3/inode.c b/fs/ext3/inode.c
index 9a4a5c4..c1176ae 100644
--- a/fs/ext3/inode.c
+++ b/fs/ext3/inode.c
@@ -2915,8 +2915,14 @@ struct inode *ext3_iget(struct super_block *sb, =
unsigned long ino)
 		i_uid |=3D le16_to_cpu(raw_inode->i_uid_high) << 16;
 		i_gid |=3D le16_to_cpu(raw_inode->i_gid_high) << 16;
 	}
-	i_uid_write(inode, i_uid);
-	i_gid_write(inode, i_gid);
+	if (uid_valid(EXT3_SB(sb)->s_uid))
+		inode->i_uid =3D EXT3_SB(sb)->s_uid;
+	else
+		i_uid_write(inode, i_uid);
+	if (gid_valid(EXT3_SB(sb)->s_gid))
+		inode->i_gid =3D EXT3_SB(sb)->s_gid;
+	else
+		i_gid_write(inode, i_gid);
 	set_nlink(inode, le16_to_cpu(raw_inode->i_links_count));
 	inode->i_size =3D le32_to_cpu(raw_inode->i_size);
 	inode->i_atime.tv_sec =3D (signed)le32_to_cpu(raw_inode->i_atime);
@@ -3074,6 +3080,10 @@ static int ext3_do_update_inode(handle_t *handle=
,
 	int err =3D 0, rc, block;
 	uid_t i_uid;
 	gid_t i_gid;
+	__le16 uid_low;
+	__le16 gid_low;
+	__le16 uid_high;
+	__le16 gid_high;
=20
 again:
 	/* we can't allow multiple procs in here at once, its a bit racey */
@@ -3088,30 +3098,42 @@ again:
 	raw_inode->i_mode =3D cpu_to_le16(inode->i_mode);
 	i_uid =3D i_uid_read(inode);
 	i_gid =3D i_gid_read(inode);
+	if (uid_valid(EXT3_SB(inode->i_sb)->s_uid))
+		i_uid =3D from_kuid(&init_user_ns, EXT3_SB(inode->i_sb)->s_diskuid);
+	if (gid_valid(EXT3_SB(inode->i_sb)->s_gid))
+		i_gid =3D from_kgid(&init_user_ns, EXT3_SB(inode->i_sb)->s_diskgid);
 	if(!(test_opt(inode->i_sb, NO_UID32))) {
-		raw_inode->i_uid_low =3D cpu_to_le16(low_16_bits(i_uid));
-		raw_inode->i_gid_low =3D cpu_to_le16(low_16_bits(i_gid));
+		uid_low =3D cpu_to_le16(low_16_bits(i_uid));
+		gid_low =3D cpu_to_le16(low_16_bits(i_gid));
 /*
  * Fix up interoperability with old kernels. Otherwise, old inodes get
  * re-used with the upper 16 bits of the uid/gid intact
  */
 		if(!ei->i_dtime) {
-			raw_inode->i_uid_high =3D
-				cpu_to_le16(high_16_bits(i_uid));
-			raw_inode->i_gid_high =3D
-				cpu_to_le16(high_16_bits(i_gid));
+			uid_high =3D cpu_to_le16(high_16_bits(i_uid));
+			gid_high =3D cpu_to_le16(high_16_bits(i_gid));
 		} else {
-			raw_inode->i_uid_high =3D 0;
-			raw_inode->i_gid_high =3D 0;
+			uid_high =3D 0;
+			gid_high =3D 0;
 		}
 	} else {
-		raw_inode->i_uid_low =3D
-			cpu_to_le16(fs_high2lowuid(i_uid));
-		raw_inode->i_gid_low =3D
-			cpu_to_le16(fs_high2lowgid(i_gid));
-		raw_inode->i_uid_high =3D 0;
-		raw_inode->i_gid_high =3D 0;
+		uid_low =3D cpu_to_le16(fs_high2lowuid(i_uid));
+		gid_low =3D cpu_to_le16(fs_high2lowgid(i_gid));
+		uid_high =3D 0;
+		gid_high =3D 0;
+	}
+	/* don't mangle uid/gid of existing files if override is active */
+	if (!uid_valid(EXT3_SB(inode->i_sb)->s_uid) ||
+			ext3_test_inode_state(inode, EXT3_STATE_NEW)) {
+		raw_inode->i_uid_high =3D uid_high;
+		raw_inode->i_uid_low =3D uid_low;
 	}
+	if (!gid_valid(EXT3_SB(inode->i_sb)->s_gid) ||
+			ext3_test_inode_state(inode, EXT3_STATE_NEW)) {
+		raw_inode->i_gid_high =3D gid_high;
+		raw_inode->i_gid_low =3D gid_low;
+	}
+
 	raw_inode->i_links_count =3D cpu_to_le16(inode->i_nlink);
 	raw_inode->i_size =3D cpu_to_le32(ei->i_disksize);
 	raw_inode->i_atime =3D cpu_to_le32(inode->i_atime.tv_sec);
diff --git a/fs/ext3/super.c b/fs/ext3/super.c
index ff9bcdc..730c532 100644
--- a/fs/ext3/super.c
+++ b/fs/ext3/super.c
@@ -627,6 +627,24 @@ static int ext3_show_options(struct seq_file *seq,=
 struct dentry *root)
 		seq_printf(seq, ",resgid=3D%u",
 				from_kgid_munged(&init_user_ns, sbi->s_resgid));
 	}
+	if (uid_valid(sbi->s_uid)) {
+		if (!uid_eq(sbi->s_uid, sbi->s_diskuid))
+			seq_printf(seq, ",uid=3D%u:%u",
+				from_kuid_munged(&init_user_ns, sbi->s_uid),
+				from_kuid_munged(&init_user_ns, sbi->s_diskuid));
+		else
+			seq_printf(seq, ",uid=3D%u",
+				from_kuid_munged(&init_user_ns, sbi->s_uid));
+	}
+	if (gid_valid(sbi->s_gid)) {
+		if (!gid_eq(sbi->s_gid, sbi->s_diskgid))
+			seq_printf(seq, ",gid=3D%u:%u",
+				from_kgid_munged(&init_user_ns, sbi->s_gid),
+				from_kgid_munged(&init_user_ns, sbi->s_diskgid));
+		else
+			seq_printf(seq, ",gid=3D%u",
+				from_kgid_munged(&init_user_ns, sbi->s_gid));
+	}
 	if (test_opt(sb, ERRORS_RO)) {
 		int def_errors =3D le16_to_cpu(es->s_errors);
=20
@@ -822,7 +840,8 @@ enum {
 	Opt_usrjquota, Opt_grpjquota, Opt_offusrjquota, Opt_offgrpjquota,
 	Opt_jqfmt_vfsold, Opt_jqfmt_vfsv0, Opt_jqfmt_vfsv1, Opt_quota,
 	Opt_noquota, Opt_ignore, Opt_barrier, Opt_nobarrier, Opt_err,
-	Opt_resize, Opt_usrquota, Opt_grpquota
+	Opt_resize, Opt_usrquota, Opt_grpquota,
+	Opt_uid, Opt_diskuid, Opt_gid, Opt_diskgid
 };
=20
 static const match_table_t tokens =3D {
@@ -879,6 +898,10 @@ static const match_table_t tokens =3D {
 	{Opt_barrier, "barrier"},
 	{Opt_nobarrier, "nobarrier"},
 	{Opt_resize, "resize"},
+	{Opt_uid, "uid=3D%u"},
+	{Opt_diskuid, "uid=3D%u:%u"},
+	{Opt_gid, "gid=3D%u"},
+	{Opt_diskgid, "gid=3D%u:%u"},
 	{Opt_err, NULL},
 };
=20
@@ -1282,6 +1305,64 @@ set_qf_format:
 			ext3_msg(sb, KERN_WARNING,
 				"warning: ignoring deprecated bh option");
 			break;
+		case Opt_uid:
+			if (match_int(&args[0], &option))
+				return 0;
+			uid =3D make_kuid(current_user_ns(), option);
+			if (!uid_valid(uid)) {
+				ext3_msg(sb, KERN_ERR, "Invalid uid value %d", option);
+				return -1;
+			}
+			sbi->s_uid =3D sbi->s_diskuid =3D uid;
+			break;
+		case Opt_diskuid:
+			if (match_int(&args[0], &option))
+				return 0;
+			uid =3D make_kuid(current_user_ns(), option);
+			if (!uid_valid(uid)) {
+				ext3_msg(sb, KERN_ERR, "Invalid uid value %d", option);
+				return -1;
+			}
+			sbi->s_uid =3D uid;
+
+			if (match_int(&args[1], &option))
+				return 0;
+			uid =3D make_kuid(current_user_ns(), option);
+			if (!uid_valid(uid)) {
+				ext3_msg(sb, KERN_ERR, "Invalid uid value %d", option);
+				return -1;
+			}
+			sbi->s_diskuid =3D uid;
+			break;
+		case Opt_gid:
+			if (match_int(&args[0], &option))
+				return 0;
+			gid =3D make_kgid(current_user_ns(), option);
+			if (!gid_valid(gid)) {
+				ext3_msg(sb, KERN_ERR, "Invalid gid value %d", option);
+				return -1;
+			}
+			sbi->s_gid =3D sbi->s_diskgid =3D gid;
+			break;
+		case Opt_diskgid:
+			if (match_int(&args[0], &option))
+				return 0;
+			gid =3D make_kgid(current_user_ns(), option);
+			if (!gid_valid(gid)) {
+				ext3_msg(sb, KERN_ERR, "Invalid gid value %d", option);
+				return -1;
+			}
+			sbi->s_gid =3D gid;
+
+			if (match_int(&args[1], &option))
+				return 0;
+			gid =3D make_kgid(current_user_ns(), option);
+			if (!gid_valid(gid)) {
+				ext3_msg(sb, KERN_ERR, "Invalid gid value %d", option);
+				return -1;
+			}
+			sbi->s_diskgid =3D gid;
+			break;
 		default:
 			ext3_msg(sb, KERN_ERR,
 				"error: unrecognized mount option \"%s\" "
@@ -1668,6 +1749,10 @@ static int ext3_fill_super (struct super_block *=
sb, void *data, int silent)
 	sbi->s_mount_opt =3D 0;
 	sbi->s_resuid =3D make_kuid(&init_user_ns, EXT3_DEF_RESUID);
 	sbi->s_resgid =3D make_kgid(&init_user_ns, EXT3_DEF_RESGID);
+	sbi->s_uid =3D INVALID_UID;
+	sbi->s_gid =3D INVALID_GID;
+	sbi->s_diskuid =3D INVALID_UID;
+	sbi->s_diskgid =3D INVALID_GID;
 	sbi->s_sb_block =3D sb_block;
=20
 	blocksize =3D sb_min_blocksize(sb, EXT3_MIN_BLOCK_SIZE);
@@ -2611,6 +2696,10 @@ static int ext3_remount (struct super_block * sb=
, int * flags, char * data)
 	old_opts.s_mount_opt =3D sbi->s_mount_opt;
 	old_opts.s_resuid =3D sbi->s_resuid;
 	old_opts.s_resgid =3D sbi->s_resgid;
+	old_opts.s_uid =3D sbi->s_uid;
+	old_opts.s_diskuid =3D sbi->s_diskuid;
+	old_opts.s_gid =3D sbi->s_gid;
+	old_opts.s_diskgid =3D sbi->s_diskgid;
 	old_opts.s_commit_interval =3D sbi->s_commit_interval;
 #ifdef CONFIG_QUOTA
 	old_opts.s_jquota_fmt =3D sbi->s_jquota_fmt;
@@ -2722,6 +2811,10 @@ restore_opts:
 	sbi->s_mount_opt =3D old_opts.s_mount_opt;
 	sbi->s_resuid =3D old_opts.s_resuid;
 	sbi->s_resgid =3D old_opts.s_resgid;
+	sbi->s_uid =3D old_opts.s_uid;
+	sbi->s_diskuid =3D old_opts.s_diskuid;
+	sbi->s_gid =3D old_opts.s_gid;
+	sbi->s_diskgid =3D old_opts.s_diskgid;
 	sbi->s_commit_interval =3D old_opts.s_commit_interval;
 #ifdef CONFIG_QUOTA
 	sbi->s_jquota_fmt =3D old_opts.s_jquota_fmt;
--=20
1.7.10.4

--
To unsubscribe from this list: send the line "unsubscribe linux-doc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

