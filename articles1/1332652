Path: news.gmane.org!not-for-mail
From: Frank Rowand <frank.rowand@am.sony.com>
Newsgroups: gmane.linux.kernel,gmane.linux.rt.user
Subject: [PATCH RT] cpu unplug with PREEMPT_LL
Date: Tue, 24 Jul 2012 17:58:50 -0700
Lines: 165
Approved: news@gmane.org
Message-ID: <500F44CA.40302@am.sony.com>
Reply-To: <frank.rowand@am.sony.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset="ISO-8859-1"
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1343177977 1762 80.91.229.3 (25 Jul 2012 00:59:37 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Wed, 25 Jul 2012 00:59:37 +0000 (UTC)
To: <tglx@linutronix.de>, <linux-kernel@vger.kernel.org>,
	<linux-rt-users@vger.kernel.org>
Original-X-From: linux-kernel-owner@vger.kernel.org Wed Jul 25 02:59:37 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1Stpwu-0001rd-JX
	for glk-linux-kernel-3@plane.gmane.org; Wed, 25 Jul 2012 02:59:37 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756117Ab2GYA72 (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Tue, 24 Jul 2012 20:59:28 -0400
Original-Received: from db3ehsobe004.messaging.microsoft.com ([213.199.154.142]:21224
	"EHLO db3outboundpool.messaging.microsoft.com" rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1754409Ab2GYA70 (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Tue, 24 Jul 2012 20:59:26 -0400
Original-Received: from mail96-db3-R.bigfish.com (10.3.81.226) by
 DB3EHSOBE004.bigfish.com (10.3.84.24) with Microsoft SMTP Server id
 14.1.225.23; Wed, 25 Jul 2012 00:59:24 +0000
Original-Received: from mail96-db3 (localhost [127.0.0.1])	by mail96-db3-R.bigfish.com
 (Postfix) with ESMTP id 9EA0AA00E4;	Wed, 25 Jul 2012 00:59:24 +0000 (UTC)
X-Forefront-Antispam-Report: CIP:160.33.194.230;KIP:(null);UIP:(null);IPV:NLI;H:usculsndmail03v.am.sony.com;RD:mail03.sonyusa.com;EFVD:NLI
X-SpamScore: 0
X-BigFish: VPS0(zzzz1202hzz8275bhz2fh2a8h668h839hd25hf0ah107ah10d2h)
Received-SPF: pass (mail96-db3: domain of am.sony.com designates 160.33.194.230 as permitted sender) client-ip=160.33.194.230; envelope-from=frank.rowand@am.sony.com; helo=usculsndmail03v.am.sony.com ;.am.sony.com ;
Original-Received: from mail96-db3 (localhost.localdomain [127.0.0.1]) by mail96-db3
 (MessageSwitch) id 1343177962770493_11233; Wed, 25 Jul 2012 00:59:22 +0000
 (UTC)
Original-Received: from DB3EHSMHS006.bigfish.com (unknown [10.3.81.244])	by
 mail96-db3.bigfish.com (Postfix) with ESMTP id B03EDE0046;	Wed, 25 Jul 2012
 00:59:22 +0000 (UTC)
Original-Received: from usculsndmail03v.am.sony.com (160.33.194.230) by
 DB3EHSMHS006.bigfish.com (10.3.87.106) with Microsoft SMTP Server (TLS) id
 14.1.225.23; Wed, 25 Jul 2012 00:59:22 +0000
Original-Received: from usculsndmail11v.am.sony.com (usculsndmail11v.am.sony.com
 [146.215.230.102])	by usculsndmail03v.am.sony.com
 (Sentrion-MTA-4.2.2/Sentrion-MTA-4.2.2) with ESMTP id q6P0xKej000834
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL);	Wed, 25
 Jul 2012 00:59:21 GMT
Original-Received: from mail1x.sjc.in.sel.sony.com (mailx.sgo.in.sel.sony.com
 [43.134.1.112])	by usculsndmail11v.am.sony.com
 (Sentrion-MTA-4.2.2/Sentrion-MTA-4.2.2) with ESMTP id q6P0xJxW013445
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL);	Wed, 25
 Jul 2012 00:59:20 GMT
Original-Received: from [43.135.148.176] (z137gx.am.sony.com [43.135.148.176])	by
 mail1x.sjc.in.sel.sony.com (Switch-3.4.2/Switch-3.4.2) with ESMTP id
 q6P0wpS9018574;	Wed, 25 Jul 2012 00:58:51 GMT
User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.17) Gecko/20110428 Fedora/3.1.10-1.fc14 Thunderbird/3.1.10
X-OriginatorOrg: am.sony.com
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1332652 gmane.linux.rt.user:8610
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1332652>


With CONFIG_PREEMPT_LL, cpu unplug generates a bunch of
  BUG: sleeping function called from invalid context
  BUG: scheduling while atomic

To reproduce the problem:
  echo 0 > /sys/devices/system/cpu/cpu1/online

This patch is:

  - UGLY
  - lightly tested
  - should maybe not be included in the RT patch set

but it may be useful to anyone determined to use cpu hotplug with PREEMPT_LL.

This patch was tested on 3.0.36-rt58 since that release has the latest
hotplug patches.  I will re-test this on 3.5-rtX when that is available.

Signed-off-by: Frank Rowand <frank.rowand@am.sony.com>
---
 include/linux/preempt.h |    4 	4 +	0 -	0 !
 include/linux/sched.h   |    6 	3 +	3 -	0 !
 kernel/cpu.c            |   12 	12 +	0 -	0 !
 kernel/sched.c          |   18 	17 +	1 -	0 !
 4 files changed, 36 insertions(+), 4 deletions(-)

Index: b/include/linux/preempt.h
===================================================================
--- a/include/linux/preempt.h
+++ b/include/linux/preempt.h
@@ -122,6 +122,10 @@ do { \
 # define preempt_enable_nort()		preempt_enable()
 # define migrate_disable()		preempt_disable()
 # define migrate_enable()		preempt_enable()
+#ifdef CONFIG_PREEMPT_LL
+   extern void __migrate_disable(void);
+   extern void __migrate_enable(void);
+#endif
 #endif
 
 #ifdef CONFIG_PREEMPT_NOTIFIERS
Index: b/kernel/cpu.c
===================================================================
--- a/kernel/cpu.c
+++ b/kernel/cpu.c
@@ -500,11 +500,19 @@ static int __ref _cpu_down(unsigned int 
 	cpumask_andnot(cpumask, cpu_online_mask, cpumask_of(cpu));
 	set_cpus_allowed_ptr(current, cpumask);
 	free_cpumask_var(cpumask);
+#ifdef CONFIG_PREEMPT_LL
+	__migrate_disable();
+#else
 	migrate_disable();
+#endif
 	mycpu = smp_processor_id();
 	if (mycpu == cpu) {
 		printk(KERN_ERR "Yuck! Still on unplug CPU\n!");
+#ifdef CONFIG_PREEMPT_LL
+		__migrate_enable();
+#else
 		migrate_enable();
+#endif
 		return -EBUSY;
 	}
 
@@ -557,7 +565,11 @@ static int __ref _cpu_down(unsigned int 
 out_release:
 	cpu_unplug_done(cpu);
 out_cancel:
+#ifdef CONFIG_PREEMPT_LL
+	__migrate_enable();
+#else
 	migrate_enable();
+#endif
 	cpu_hotplug_done();
 	if (!err)
 		cpu_notify_nofail(CPU_POST_DEAD | mod, hcpu);
Index: b/kernel/sched.c
===================================================================
--- a/kernel/sched.c
+++ b/kernel/sched.c
@@ -4192,7 +4192,7 @@ static inline void schedule_debug(struct
 	schedstat_inc(this_rq(), sched_count);
 }
 
-#if defined(CONFIG_PREEMPT_RT_FULL) && defined(CONFIG_SMP)
+#if (defined(CONFIG_PREEMPT_RT_FULL) || defined(CONFIG_PREEMPT_LL)) && defined(CONFIG_SMP)
 #define MIGRATE_DISABLE_SET_AFFIN	(1<<30) /* Can't make a negative */
 #define migrate_disabled_updated(p)	((p)->migrate_disable & MIGRATE_DISABLE_SET_AFFIN)
 #define migrate_disable_count(p)	((p)->migrate_disable & ~MIGRATE_DISABLE_SET_AFFIN)
@@ -4228,7 +4228,11 @@ static inline void update_migrate_disabl
 	p->migrate_disable |= MIGRATE_DISABLE_SET_AFFIN;
 }
 
+#ifdef CONFIG_PREEMPT_LL
+void __migrate_disable(void)
+#else
 void migrate_disable(void)
+#endif
 {
 	struct task_struct *p = current;
 
@@ -4254,9 +4258,17 @@ void migrate_disable(void)
 	p->migrate_disable = 1;
 	preempt_enable();
 }
+#ifdef CONFIG_PREEMPT_LL
+EXPORT_SYMBOL(__migrate_disable);
+#else
 EXPORT_SYMBOL(migrate_disable);
+#endif
 
+#ifdef CONFIG_PREEMPT_LL
+void __migrate_enable(void)
+#else
 void migrate_enable(void)
+#endif
 {
 	struct task_struct *p = current;
 	const struct cpumask *mask;
@@ -4306,7 +4318,11 @@ void migrate_enable(void)
 	unpin_current_cpu();
 	preempt_enable();
 }
+#ifdef CONFIG_PREEMPT_LL
+EXPORT_SYMBOL(__migrate_enable);
+#else
 EXPORT_SYMBOL(migrate_enable);
+#endif
 #else
 static inline void update_migrate_disable(struct task_struct *p) { }
 #define migrate_disabled_updated(p)		0
Index: b/include/linux/sched.h
===================================================================
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1260,7 +1260,7 @@ struct task_struct {
 #endif
 
 	unsigned int policy;
-#ifdef CONFIG_PREEMPT_RT_FULL
+#if defined(CONFIG_PREEMPT_RT_FULL) || defined(CONFIG_PREEMPT_LL)
 	int migrate_disable;
 #ifdef CONFIG_SCHED_DEBUG
 	int migrate_disable_atomic;
@@ -2678,7 +2678,7 @@ static inline void set_task_cpu(struct t
 
 static inline int __migrate_disabled(struct task_struct *p)
 {
-#ifdef CONFIG_PREEMPT_RT_FULL
+#if defined(CONFIG_PREEMPT_RT_FULL) || defined(CONFIG_PREEMPT_LL)
 	return p->migrate_disable;
 #else
 	return 0;
@@ -2688,7 +2688,7 @@ static inline int __migrate_disabled(str
 /* Future-safe accessor for struct task_struct's cpus_allowed. */
 static inline const struct cpumask *tsk_cpus_allowed(struct task_struct *p)
 {
-#ifdef CONFIG_PREEMPT_RT_FULL
+#if defined(CONFIG_PREEMPT_RT_FULL) || defined(CONFIG_PREEMPT_LL)
 	if (p->migrate_disable)
 		return cpumask_of(task_cpu(p));
 #endif

