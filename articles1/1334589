Path: news.gmane.org!not-for-mail
From: Colin Cross <ccross@android.com>
Newsgroups: gmane.linux.kernel,gmane.linux.ports.arm.kernel
Subject: Re: [RFC v2] ARM: sched_clock: update epoch_cyc on resume
Date: Fri, 27 Jul 2012 20:30:31 -0700
Lines: 99
Approved: news@gmane.org
Message-ID: <CAMbhsRQg4pETrM7cx+aSBzGn3S1LV_x7vo8X3A300vCWTjkFng@mail.gmail.com>
References: <1343184588-20239-1-git-send-email-ccross@android.com>
	<CACRpkdZv4p+QT3Y+=-xh5iJ=sr1_aahroxQ535QpzVD9e_ESJA@mail.gmail.com>
	<20120727233829.GB14835@n2100.arm.linux.org.uk>
	<CAMbhsRSGYmu=eyqik23cECsJPfpo6rUqZUa853nkY35XRo4Q_w@mail.gmail.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
X-Trace: dough.gmane.org 1343446256 31468 80.91.229.3 (28 Jul 2012 03:30:56 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Sat, 28 Jul 2012 03:30:56 +0000 (UTC)
Cc: Linus Walleij <linus.walleij@linaro.org>,
	linux-arm-kernel@lists.infradead.org,
	Barry Song <21cnbao@gmail.com>,
	Vaibhav Bedia <vaibhav.bedia@ti.com>,
	Krzysztof Halasa <khc@pm.waw.pl>,
	Nicolas Pitre <nico@linaro.org>,
	Marc Zyngier <marc.zyngier@arm.com>,
	linux-kernel@vger.kernel.org
To: Russell King - ARM Linux <linux@arm.linux.org.uk>
Original-X-From: linux-kernel-owner@vger.kernel.org Sat Jul 28 05:30:55 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1Suxjy-0003pD-7t
	for glk-linux-kernel-3@plane.gmane.org; Sat, 28 Jul 2012 05:30:54 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752997Ab2G1Dae (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Fri, 27 Jul 2012 23:30:34 -0400
Original-Received: from mail-ob0-f174.google.com ([209.85.214.174]:40911 "EHLO
	mail-ob0-f174.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752934Ab2G1Dac (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Fri, 27 Jul 2012 23:30:32 -0400
Original-Received: by obbuo13 with SMTP id uo13so5242007obb.19
        for <linux-kernel@vger.kernel.org>; Fri, 27 Jul 2012 20:30:32 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=mime-version:sender:in-reply-to:references:date
         :x-google-sender-auth:message-id:subject:from:to:cc:content-type
         :x-system-of-record;
        bh=Po1jQ/KLCc3mwmaZOvInDe727O3P+NBAVhYeCcoF4TM=;
        b=hoYoGabRDEt0z7C/zqlmoc48LGUDkMWt0hHYu0DHhenODYguVYAHU9ToUW1NrzylHd
         /JH6weRF0zMiIxH1f/ADKXZHBe4bU6l2uWGsQjlpQVFlTi/y2RqOOD0QQRu+l9KniYE7
         ZKWCFvTXK3GojZTg70rkm4BlUVneJvUisexIwVVOuOYWiqWNlarzCEJMMbzrIWjNAVoX
         +70e+AuXxGQZQx8TFBEij/4ekaDi2PKWyrFmOqHgRsn4z/knHwZ69KEWpm4p6KEaMwsv
         6b6qGoFKULc1tLZtE+hKcscjsfn+VhlvviKWeUI4GdrYK9vQtkJI7l5/8x9WzirzhU+p
         egow==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=mime-version:sender:in-reply-to:references:date
         :x-google-sender-auth:message-id:subject:from:to:cc:content-type
         :x-system-of-record:x-gm-message-state;
        bh=Po1jQ/KLCc3mwmaZOvInDe727O3P+NBAVhYeCcoF4TM=;
        b=Z6cHkU43+e1RBkXDn+S0sNthmuyadDhwuU+gtYgHjjPtxZuvj4kKWagEauIovPhn87
         KIB6GIi8vM4LBWxANFJKyrdh6PNaesV5CF4Lk5UnrBgvxi8t2q8TkgJ94A+kzvAYK67r
         MecTq+3hn3Yp/a1DJMdHI/Pqk9ZEJob4hk0B9h7suxKKc0J7R1789i+/IySa0OMdUno0
         iYzAMqnVhEwLS4IDgLKAngkU5QvZvDwPzofkEExuZTiBL2byUdPEPyYxxDIFfDMVA2Yh
         ech2TU7z/9ay40F3HTTHRNwTIDKzziPRp2qPIE8c1BIVXWrVq3TXdc+DcFwF6XpgcHB8
         Tpww==
Original-Received: by 10.50.149.137 with SMTP id ua9mr3627640igb.65.1343446231856;
        Fri, 27 Jul 2012 20:30:31 -0700 (PDT)
Original-Received: by 10.50.149.137 with SMTP id ua9mr3627623igb.65.1343446231485; Fri,
 27 Jul 2012 20:30:31 -0700 (PDT)
Original-Received: by 10.231.184.211 with HTTP; Fri, 27 Jul 2012 20:30:31 -0700 (PDT)
In-Reply-To: <CAMbhsRSGYmu=eyqik23cECsJPfpo6rUqZUa853nkY35XRo4Q_w@mail.gmail.com>
X-Google-Sender-Auth: teu5iK13rZBM6cCbL8znSHig9Ck
X-System-Of-Record: true
X-Gm-Message-State: ALoCoQk+qIUSXH0vtQUOXevM58dwWZDVm90onN7FNN9ka2pFuuyjAEcZlss9W1gcPD9/LmnNtcCXhO1gxPsG758KwdGjYSNYzlM0kwUCggOBrI9H+RVtSSyI4TOEYwigSap2JFLeVg7HKC/OjdQiagvU7sWadEy0mfA2Lv7nTIKanawkYunzsZ/9sgig/UQbiDiw7atA8+JV
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1334589 gmane.linux.ports.arm.kernel:179153
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1334589>

On Fri, Jul 27, 2012 at 6:15 PM, Colin Cross <ccross@android.com> wrote:
> On Fri, Jul 27, 2012 at 4:38 PM, Russell King - ARM Linux
> <linux@arm.linux.org.uk> wrote:
>> On Sat, Jul 28, 2012 at 01:32:50AM +0200, Linus Walleij wrote:
>>> On Wed, Jul 25, 2012 at 4:49 AM, Colin Cross <ccross@android.com> wrote:
>>>
>>> > Many clocks that are used to provide sched_clock will reset during
>>> > suspend.  If read_sched_clock returns 0 after suspend, sched_clock will
>>> > appear to jump forward.  This patch resets cd.epoch_cyc to the current
>>> > value of read_sched_clock during resume, which causes sched_clock() just
>>> > after suspend to return the same value as sched_clock() just before
>>> > suspend.
>>> >
>>> > In addition, during the window where epoch_ns has been updated before
>>> > suspend, but epoch_cyc has not been updated after suspend, it is unknown
>>> > whether the clock has reset or not, and sched_clock() could return a
>>> > bogus value.  Add a suspended flag, and return the pre-suspend epoch_ns
>>> > value during this period.
>>> >
>>> > The new behavior is triggered by calling setup_sched_clock_needs_suspend
>>> > instead of setup_sched_clock.
>>> >
>>> > Signed-off-by: Colin Cross <ccross@android.com>
>>>
>>> Sweet!
>>> Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
>>
>> Have any of you looked at the patch I originally posted for doing this?
>> It needs updating but shows the overall principle - which is to ensure
>> that the epoch is up to date before suspending.
>>
>> It doesn't deal with resume, because different timers behave differently,
>> and there's no real way to deal with that properly.  The important thing
>> that this patch does is to ensure sched_clock() doesn't ever go backwards.
>>
>>  arch/arm/kernel/sched_clock.c |   18 ++++++++++++++++++
>>  1 files changed, 18 insertions(+), 0 deletions(-)
>>
>> diff --git a/arch/arm/kernel/sched_clock.c b/arch/arm/kernel/sched_clock.c
>> index 9a46370..4be4019 100644
>> --- a/arch/arm/kernel/sched_clock.c
>> +++ b/arch/arm/kernel/sched_clock.c
>> @@ -10,6 +10,7 @@
>>  #include <linux/jiffies.h>
>>  #include <linux/kernel.h>
>>  #include <linux/sched.h>
>> +#include <linux/syscore_ops.h>
>>  #include <linux/timer.h>
>>
>>  #include <asm/sched_clock.h>
>> @@ -72,3 +73,20 @@ void __init sched_clock_postinit(void)
>>  {
>>         sched_clock_poll(sched_clock_timer.data);
>>  }
>> +
>> +static int sched_clock_suspend(void)
>> +{
>> +       sched_clock_poll(sched_clock_timer.data);
>> +       return 0;
>> +}
>> +
>> +static struct syscore_ops sched_clock_ops = {
>> +       .suspend        = sched_clock_suspend,
>> +};
>> +
>> +static int __init sched_clock_syscore_init(void)
>> +{
>> +       register_syscore_ops(&sched_clock_ops);
>> +       return 0;
>> +}
>> +device_initcall(sched_clock_syscore_init);
>>
>
> That patch was merged in 3.4, and my patch is on top of it.  Your
> patch updates epoch_cyc and epoch_ns in suspend, but if the first call
> to cyc_to_sched_clock after resume gets cyc = 0, cyc - epoch_cyc can
> be negative, although it will be cast back to a large positive number.
>
> With my patch, epoch_cyc is updated in resume to whatever
> read_sched_clock() returns, and epoch_ns is still set to the suspend
> value, so it appears that sched_clock has not changed between
> sched_clock_suspend and sched_clock_resume.  It will work with any
> timer behavior (reset to 0, reset to random value, or continuing
> counting).  The old setup_sched_clock function maintains the old
> behavior to appease those who like their 32kHz sched clock to continue
> ticking in suspend, although I think it is more correct for all sched
> clocks to be faster than 32 kHz (when possible) and stop in suspend.

I think the existing code can cause sched_clock to go backwards if the
register read by the read function resets to 0 in suspend:

In sched_clock_suspend epoch_cyc is updated to 0x00002000.

The first sched_clock call after resume gets cyc = 0, returning
epoch_ns + cyc_to_ns(0xffffe000)

Later, sched_clock gets cyc = 0x5000, returning epoch_ns +
cyc_to_ns(0x3000), which will be much smaller than the previous
sched_clock value.
