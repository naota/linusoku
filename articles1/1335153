Path: news.gmane.org!not-for-mail
From: Frederic Weisbecker <fweisbec@gmail.com>
Newsgroups: gmane.linux.kernel
Subject: Re: [PATCH 1/5] user_hooks: New user hooks subsystem
Date: Mon, 30 Jul 2012 17:51:02 +0200
Lines: 95
Approved: news@gmane.org
Message-ID: <20120730155059.GB17078@somewhere.redhat.com>
References: <1343403634-31555-1-git-send-email-fweisbec@gmail.com>
 <1343403634-31555-2-git-send-email-fweisbec@gmail.com>
 <1343660892.20897.3.camel@twins>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Trace: dough.gmane.org 1343663489 3178 80.91.229.3 (30 Jul 2012 15:51:29 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Mon, 30 Jul 2012 15:51:29 +0000 (UTC)
Cc: LKML <linux-kernel@vger.kernel.org>,
	Alessio Igor Bogani <abogani@kernel.org>,
	Andrew Morton <akpm@linux-foundation.org>,
	Avi Kivity <avi@redhat.com>,
	Chris Metcalf <cmetcalf@tilera.com>,
	Christoph Lameter <cl@linux.com>,
	Geoff Levand <geoff@infradead.org>,
	Gilad Ben Yossef <gilad@benyossef.com>,
	Hakan Akkan <hakanakkan@gmail.com>,
	"H. Peter Anvin" <hpa@zytor.com>, Ingo Molnar <mingo@kernel.org>,
	Kevin Hilman <khilman@ti.com>,
	Max Krasnyansky <maxk@qualcomm.com>,
	"Paul E. McKenney" <paulmck@linux.vnet.ibm.com>,
	Stephen Hemminger <shemminger@vyatta.com>,
	Steven Rostedt <rostedt@goodmis.org>,
	Sven-Thorsten Dietrich <thebigcorporation@gmail.com>,
	Thomas Gleixner <tglx@linutronix.de>
To: Peter Zijlstra <peterz@infradead.org>
Original-X-From: linux-kernel-owner@vger.kernel.org Mon Jul 30 17:51:24 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SvsFc-0004ZI-5o
	for glk-linux-kernel-3@plane.gmane.org; Mon, 30 Jul 2012 17:51:20 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753922Ab2G3PvL (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Mon, 30 Jul 2012 11:51:11 -0400
Original-Received: from mail-yw0-f46.google.com ([209.85.213.46]:37320 "EHLO
	mail-yw0-f46.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752781Ab2G3PvK (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Mon, 30 Jul 2012 11:51:10 -0400
Original-Received: by yhmm54 with SMTP id m54so4956459yhm.19
        for <linux-kernel@vger.kernel.org>; Mon, 30 Jul 2012 08:51:10 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-type:content-disposition:in-reply-to:user-agent;
        bh=L7Hs1MKwxkjoGMD9fX9kw7ZUjU0oIR5vlMFWSAvoQH4=;
        b=F2gEWfymhfeJP+1mqAphvhtu1JYl8uH61/pjyRUtkQMhlrXBtXiGr8/hoBuZ06dq3b
         HMg0HhzRpEZzYG28LCGEDauw4v3PUlC1Tz+XPX8RgG273laS21ZDHRLRoCQjQrXwOe4/
         vgmDZO4RZjL9QA+c018DkoQxpSuB20PHiBA0mAf5fFOqwIVWanGTEAbBbckZCH+Gsz8x
         Ydd15kudaB8u+IKm5fPLzJumXg0Tb52e62ZQL3DtMgC4z7UJRU+GRwcudGtyHB6wSb/F
         DzEVeoqth+eTfP6iwUOsLbNYGYyqQ+Sa71ZUVulWis/zfoESpKrv1Atx3b/JX6EsrV27
         1A6w==
Original-Received: by 10.50.216.167 with SMTP id or7mr8713282igc.32.1343663469793;
        Mon, 30 Jul 2012 08:51:09 -0700 (PDT)
Original-Received: from localhost (71.20.196.77.rev.sfr.net. [77.196.20.71])
        by mx.google.com with ESMTPS id z8sm6765087igi.5.2012.07.30.08.51.04
        (version=TLSv1/SSLv3 cipher=OTHER);
        Mon, 30 Jul 2012 08:51:08 -0700 (PDT)
Content-Disposition: inline
In-Reply-To: <1343660892.20897.3.camel@twins>
User-Agent: Mutt/1.5.21 (2010-09-15)
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1335153
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1335153>

On Mon, Jul 30, 2012 at 05:08:12PM +0200, Peter Zijlstra wrote:
> On Fri, 2012-07-27 at 17:40 +0200, Frederic Weisbecker wrote:
> > +++ b/kernel/user_hooks.c
> > @@ -0,0 +1,56 @@
> > +#include <linux/user_hooks.h>
> > +#include <linux/rcupdate.h>
> > +#include <linux/sched.h>
> > +#include <linux/percpu.h>
> > +
> > +struct user_hooks {
> > +       bool hooking;
> > +       bool in_user;
> > +};
> 
> I really detest using bool in structures.. but that's just me. Also this
> really wants a comment as to wtf 'hooking' means. in_user I can just
> about guess.

I really don't mind changing that to int. I just like them as bool because
they better describe the purpose of the field.

hooking means that the hooks are set (the TIF flag is set on the current task
and we also handle the exception hooks).

I can call that is_hooking instead? And/or add a comment to explain the
purpose of this.

> 
> > +DEFINE_PER_CPU(struct user_hooks, user_hooks) = {
> > +#ifdef CONFIG_USER_HOOKS_FORCE
> > +       .hooking = true,
> > +#endif
> > +};
> > +
> > +void user_enter(void)
> > +{
> > +       unsigned long flags;
> > +       struct user_hooks *uh;
> > +
> > +       WARN_ON_ONCE(!current->mm);
> > +       local_irq_save(flags);
> > +       uh = &__get_cpu_var(user_hooks);
> > +       if (uh->hooking && !uh->in_user) {
> > +               uh->in_user = true;
> > +               rcu_user_enter();
> > +       }
> 
> By not using __get_cpu_var() but __this_cpu_*() you generate much better
> code (esp. on x86).
> 
> IOW. something like:
> 
>   if (__this_cpu_read(uh.hooking) && !__this_cpu_read(uh.in_user)) {
> 	__this_cpu_write(uh.in_user, true);
> 	rcu_user_enter();
>   }

Ok, I'll replace.

> 
> > +       local_irq_restore(flags);
> > +}
> > +
> > +void user_exit(void)
> > +{
> > +       unsigned long flags;
> > +       struct user_hooks *uh;
> > +
> > +       local_irq_save(flags);
> > +       uh = &__get_cpu_var(user_hooks);
> > +       if (uh->in_user) {
> > +               uh->in_user = false;
> > +               rcu_user_exit();
> > +       }
> > +       local_irq_restore(flags);
> > +}
> > +
> > +void user_hooks_switch(struct task_struct *prev,
> > +                      struct task_struct *next)
> > +{
> > +       struct user_hooks *uh;
> > +
> > +       uh = &__get_cpu_var(user_hooks);
> > +       if (uh->hooking) {
> > +               clear_tsk_thread_flag(prev, TIF_NOHZ);
> > +               set_tsk_thread_flag(next, TIF_NOHZ);
> > +       }
> 
> This seems pointless to me.. why are we flipping that flag on context
> switch instead of keeping it enabled at all times? This are two atomic
> ops in the context switch path, why?

Because the hooks are per cpu. If we activate the hooks on CPU 1 but not
on CPU 2 and prev was running on CPU 1 and migrates on CPU 2, it's going
to keep the hook on that CPU 2 if we don't clear the flag.
