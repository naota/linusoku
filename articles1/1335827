Path: news.gmane.org!not-for-mail
From: Mel Gorman <mgorman@suse.de>
Newsgroups: gmane.linux.kernel.next,gmane.linux.kernel
Subject: Re: linux-next: manual merge of the akpm tree with the nfs tree
Date: Tue, 31 Jul 2012 16:19:36 +0100
Lines: 56
Approved: news@gmane.org
Message-ID: <20120731151936.GR612@suse.de>
References: <20120731142441.0d01100f9d050ec6e479c923@canb.auug.org.au>
 <20120731103336.GN612@suse.de>
 <1343745442.519.20.camel@lade.trondhjem.org>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=iso-8859-15
X-Trace: dough.gmane.org 1343747985 25798 80.91.229.3 (31 Jul 2012 15:19:45 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Tue, 31 Jul 2012 15:19:45 +0000 (UTC)
Cc: Stephen Rothwell <sfr@canb.auug.org.au>,
	Andrew Morton <akpm@linux-foundation.org>,
	"linux-next@vger.kernel.org" <linux-next@vger.kernel.org>,
	"linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
	Jeff Layton <jlayton@redhat.com>
To: "Myklebust, Trond" <Trond.Myklebust@netapp.com>
Original-X-From: linux-next-owner@vger.kernel.org Tue Jul 31 17:19:44 2012
Return-path: <linux-next-owner@vger.kernel.org>
Envelope-to: glkn-linux-next@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-next-owner@vger.kernel.org>)
	id 1SwEEZ-0000sh-Gj
	for glkn-linux-next@plane.gmane.org; Tue, 31 Jul 2012 17:19:43 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755088Ab2GaPTl (ORCPT <rfc822;glkn-linux-next@m.gmane.org>);
	Tue, 31 Jul 2012 11:19:41 -0400
Original-Received: from cantor2.suse.de ([195.135.220.15]:59658 "EHLO mx2.suse.de"
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754955Ab2GaPTl (ORCPT <rfc822;linux-next@vger.kernel.org>);
	Tue, 31 Jul 2012 11:19:41 -0400
Original-Received: from relay2.suse.de (unknown [195.135.220.254])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx2.suse.de (Postfix) with ESMTP id D2CB1A38EA;
	Tue, 31 Jul 2012 17:19:39 +0200 (CEST)
Content-Disposition: inline
In-Reply-To: <1343745442.519.20.camel@lade.trondhjem.org>
User-Agent: Mutt/1.5.21 (2010-09-15)
Original-Sender: linux-next-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-next.vger.kernel.org>
X-Mailing-List: linux-next@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel.next:23556 gmane.linux.kernel:1335827
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1335827>

On Tue, Jul 31, 2012 at 02:37:24PM +0000, Myklebust, Trond wrote:
> On Tue, 2012-07-31 at 11:33 +0100, Mel Gorman wrote:
> > On Tue, Jul 31, 2012 at 02:24:41PM +1000, Stephen Rothwell wrote:
> > > Hi Andrew,
> > > 
> > > Today's linux-next merge of the akpm tree got a conflict in
> > > net/sunrpc/xprtsock.c between commit 5cf02d09b50b ("nfs: skip commit in
> > > releasepage if we're freeing memory for fs-related reasons") from the nfs
> > > tree and commit "nfs: enable swap on NFS" from the akpm tree.
> > > 
> > > Just context changes?  I fixed it up (I think - see below) and can carry
> > > the fix as necessary.
> > 
> > Functionally it looks fine. As you say, it all looks like context
> > changes. Arguably code like this
> > 
> > current->flags &= ~PF_FSTRANS
> > 
> > could use tsk_restore_flags instead() even though it should never be
> > necessary as PF_FSTRANS would not be set on function entry. However,
> > it would set up a depedency between the patch sets that is undesirable.
> > If both sets get merged then it might make sense as a cleanup to use
> > tsk_restore_flags() but not until then.
> > 
> > Thanks Stephen.
> > 
> 
> Do we really need to set both PF_FSTRANS and PF_MEMALLOC here? The
> reason why I merged the PF_FSTRANS patch is that we have the deadlock
> problem when allocating a new socket even before we add swap-over-nfs.
> Adding PF_FSTRANS to disallow entry into the NFS layer by the memory
> allocator fixes that issue.

PF_FSTRANS is to prevent recursion into NFS and is set whether swap-over-NFS
is used or not and for all requests.

> What value does PF_MEMALLOC add? Is that in order to prevent recursion
> into other areas of the swap code (say, if you mix swap-over-nfs with
> ordinary swap-to-disk)?
> 

PF_MEMALLOC is normally to prevent the page reclaim recursing into
itself. Page reclaim can call the page allocator and that cannot re-enter
page reclaim.

In the case of swap-over-NFS, PF_MEMALLOC is set only if the socket is
being used for swapping. In softirq context, the allocation request is
allowed to use PFMEMALLOC reserves to avoid deadlock.

I do not see an obvious way to collapse the two flags together.
PF_FSTRANS should not mean the PFMEMALLOC reserves can be used and
PFMEMALLOC is not set for all requests.

-- 
Mel Gorman
SUSE Labs
