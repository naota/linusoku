Path: news.gmane.org!not-for-mail
From: Anton Vorontsov <anton.vorontsov@linaro.org>
Newsgroups: gmane.linux.kernel,gmane.linux.ports.arm.kernel,gmane.linux.kernel.debugging.kgdb.bugs
Subject: Re: [PATCH 07/11] ARM: Add KGDB/KDB FIQ debugger generic code
Date: Wed, 1 Aug 2012 13:52:18 -0700
Lines: 368
Approved: news@gmane.org
Message-ID: <20120801205218.GA20714@lizard>
References: <20120730115719.GA5742@lizard>
 <1343649500-18491-7-git-send-email-anton.vorontsov@linaro.org>
 <20120730140724.GI6802@n2100.arm.linux.org.uk>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: QUOTED-PRINTABLE
X-Trace: dough.gmane.org 1343854490 8207 80.91.229.3 (1 Aug 2012 20:54:50 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Wed, 1 Aug 2012 20:54:50 +0000 (UTC)
Cc: Jason Wessel <jason.wessel@windriver.com>,
	Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
	Alan Cox <alan@linux.intel.com>,
	Arve =?utf-8?B?SGrDuG5uZXbDpWc=?= <arve@android.com>,
	Colin Cross <ccross@android.com>,
	John Stultz <john.stultz@linaro.org>,
	linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
	linaro-kernel@lists.linaro.org, patches@linaro.org,
	kernel-team@android.com, kgdb-bugreport@lists.sourceforge.net
To: Russell King - ARM Linux <linux@arm.linux.org.uk>
Original-X-From: linux-kernel-owner@vger.kernel.org Wed Aug 01 22:54:45 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SwfwK-0000w1-Cp
	for glk-linux-kernel-3@plane.gmane.org; Wed, 01 Aug 2012 22:54:44 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753966Ab2HAUyg convert rfc822-to-quoted-printable (ORCPT
	<rfc822;glk-linux-kernel-3@m.gmane.org>);
	Wed, 1 Aug 2012 16:54:36 -0400
Original-Received: from mail-ob0-f174.google.com ([209.85.214.174]:55326 "EHLO
	mail-ob0-f174.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752815Ab2HAUye (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Wed, 1 Aug 2012 16:54:34 -0400
Original-Received: by obbuo13 with SMTP id uo13so12727801obb.19
        for <linux-kernel@vger.kernel.org>; Wed, 01 Aug 2012 13:54:33 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-type:content-disposition:content-transfer-encoding
         :in-reply-to:user-agent:x-gm-message-state;
        bh=WYYOvgOEAH2cm8gW+O3ik362J9iiUxNrfYTWrq4eQ5U=;
        b=nl/5f44A43jpwpxuR+IskeQDgEEn+6qlpaXrpEZXe+RQiFmtCd/MROvOYVutR6+Fe2
         zW+UsvchV37Oh50YrvXG8AvQ8tmGR5ct1+r/X4Xoci/jJA94fPfhCQaqV5BhDB3DokjC
         SFmImicl0ul2fH/HzLEk9xsucONxe45vf1EOAmYtkPQKeB4aRZ+WNgCa4qyQnWxZNQul
         v2zAFY5dBFp9lDAUf54XIqxdA+XQO0wnE9p0HtZuhIzMfouS1qECYey+hilpEz/O7/mK
         r4iIZ5PXAIwfBQNjQswOOsglunA++3q5dgBzyQvm7Wnmqhq+fXlnWvK0iFyEXI1VXCb7
         nHyA==
Original-Received: by 10.182.50.103 with SMTP id b7mr31054772obo.15.1343854473294;
        Wed, 01 Aug 2012 13:54:33 -0700 (PDT)
Original-Received: from localhost (ip-64-134-231-11.public.wayport.net. [64.134.231.11])
        by mx.google.com with ESMTPS id c6sm3448182obn.13.2012.08.01.13.54.29
        (version=TLSv1/SSLv3 cipher=OTHER);
        Wed, 01 Aug 2012 13:54:32 -0700 (PDT)
Content-Disposition: inline
In-Reply-To: <20120730140724.GI6802@n2100.arm.linux.org.uk>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-Gm-Message-State: ALoCoQlW4nci8s213q1vLCxmdw+BzUz2luaxH11OIGsKzmNsLeLfW2uiRaX7RXIcDQpQ10MVrwOl
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1336547 gmane.linux.ports.arm.kernel:179884 gmane.linux.kernel.debugging.kgdb.bugs:5739
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1336547>

On Mon, Jul 30, 2012 at 03:07:24PM +0100, Russell King - ARM Linux wrot=
e:
[....]
> Now the thing here is that even if we did preserve SPSR_svc, with the
> above exit sequence, there is _no_ way to preserve the value of SPSR_=
svc.
> Normally, this doesn't matter because we know that the regions we car=
e
> about this have IRQs disabled.

Wow, that is quite subtle. Indeed, now I clearly see that we do mangle
SVC's SPSR.

Thanks!

[...]
> So, maybe something like this for the svc return path:
>=20
> 	cpsid	f
> 	ldr	r1, [saved_spsr_svc]
> 	mov	r0, sp
> 	mrs	spsr_cxsf, r1
> 	ldmib	r0, {r1 - r14}
> 	msr	cpsr_c, #FIQ_MODE | PSR_I_BIT | PSR_F_BIT
=2E..
>       ldmia   r7, {pc}^

Yup, I got the idea: we have to restore the SPSR in SVC mode, but
then we switch to FIQ mode and exit the exception while being in
the FIQ mode, that way CPU won't change our restored SPSR_svc.

As for "saved_spsr_svc", I think the easiest way to get it, is to
switch to FIQ mode temporary, and read it from the stack.

(Plus, cpsid is not available for older CPUs, but the thing is that
we don't touch global enable/disable FIQs/IRQs flags, so I guess
I don't actually need it.)

So, that's what I've applied on top:

@@ -33,7 +33,20 @@
 __fiq_svc:
 	svc_entry
 	fiq_handler
-	svc_exit r5				@ return from exception
+	mrs	r4, cpsr
+	msr	cpsr_c, #FIQ_MODE | PSR_I_BIT | PSR_F_BIT
+	ldr	r1, [sp, #8]
+	msr	cpsr_c, r4
+	msr	spsr_cxsf, r1
+	mov	r0, sp
+	ldmib	r0, {r1 - r14}
+	msr	cpsr_c, #FIQ_MODE | PSR_I_BIT | PSR_F_BIT
+	add	r8, r0, #S_PC
+	ldr	r9, [r0, #S_PSR]
+	msr	spsr_cxsf, r9
+	ldr	r0, [r0, #S_R0]
+	ldmia	r8, {pc}^


And the whole fixed up patch is down below:

- - - -
=46rom: Anton Vorontsov <anton.vorontsov@linaro.org>
Subject: ARM: Add KGDB/KDB FIQ debugger generic code

The FIQ debugger may be used to debug situations when the kernel stuck
in uninterruptable sections, e.g. the kernel infinitely loops or
deadlocked in an interrupt or with interrupts disabled.

By default KGDB FIQ is disabled in runtime, but can be enabled with
kgdb_fiq.enable=3D1 kernel command line option.

Signed-off-by: Anton Vorontsov <anton.vorontsov@linaro.org>
---
 arch/arm/Kconfig                 |   18 +++++++
 arch/arm/include/asm/kgdb.h      |    8 +++
 arch/arm/kernel/Makefile         |    1 +
 arch/arm/kernel/kgdb_fiq.c       |  101 ++++++++++++++++++++++++++++++=
++++++++
 arch/arm/kernel/kgdb_fiq_entry.S |   92 ++++++++++++++++++++++++++++++=
++++
 5 files changed, 220 insertions(+)
 create mode 100644 arch/arm/kernel/kgdb_fiq.c
 create mode 100644 arch/arm/kernel/kgdb_fiq_entry.S

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index a91009c..ae6ddf1 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -172,6 +172,24 @@ config GENERIC_ISA_DMA
 config FIQ
 	bool
=20
+config ARCH_MIGHT_HAVE_FIQ
+	bool
+
+config KGDB_FIQ
+	bool "KGDB/KDB FIQ debugger"
+	depends on KGDB_KDB && ARCH_MIGHT_HAVE_FIQ && !THUMB2_KERNEL
+	select FIQ
+	help
+	  The FIQ debugger may be used to debug situations when the
+	  kernel stuck in uninterruptable sections, e.g. the kernel
+	  infinitely loops or deadlocked in an interrupt or with
+	  interrupts disabled.
+
+	  By default KGDB FIQ is disabled in runtime, but can be
+	  enabled with kgdb_fiq.enable=3D1 kernel command line option.
+
+	  If unsure, say N.
+
 config NEED_RET_TO_USER
 	bool
=20
diff --git a/arch/arm/include/asm/kgdb.h b/arch/arm/include/asm/kgdb.h
index 48066ce..807e547 100644
--- a/arch/arm/include/asm/kgdb.h
+++ b/arch/arm/include/asm/kgdb.h
@@ -11,6 +11,8 @@
 #define __ARM_KGDB_H__
=20
 #include <linux/ptrace.h>
+#include <linux/linkage.h>
+#include <asm/exception.h>
=20
 /*
  * GDB assumes that we're a user process being debugged, so
@@ -47,6 +49,12 @@ static inline void arch_kgdb_breakpoint(void)
 extern void kgdb_handle_bus_error(void);
 extern int kgdb_fault_expected;
=20
+extern char kgdb_fiq_handler;
+extern char kgdb_fiq_handler_end;
+asmlinkage void __exception_irq_entry kgdb_fiq_do_handle(struct pt_reg=
s *regs);
+extern int __init kgdb_register_fiq(unsigned int mach_kgdb_fiq,
+		     void (*mach_kgdb_enable_fiq)(unsigned int irq, bool on),
+		     bool (*mach_is_kgdb_fiq)(unsigned int irq));
 #endif /* !__ASSEMBLY__ */
=20
 /*
diff --git a/arch/arm/kernel/Makefile b/arch/arm/kernel/Makefile
index 7ad2d5c..5aa079b 100644
--- a/arch/arm/kernel/Makefile
+++ b/arch/arm/kernel/Makefile
@@ -56,6 +56,7 @@ obj-$(CONFIG_ATAGS_PROC)	+=3D atags.o
 obj-$(CONFIG_OABI_COMPAT)	+=3D sys_oabi-compat.o
 obj-$(CONFIG_ARM_THUMBEE)	+=3D thumbee.o
 obj-$(CONFIG_KGDB)		+=3D kgdb.o
+obj-$(CONFIG_KGDB_FIQ)		+=3D kgdb_fiq_entry.o kgdb_fiq.o
 obj-$(CONFIG_ARM_UNWIND)	+=3D unwind.o
 obj-$(CONFIG_HAVE_TCM)		+=3D tcm.o
 obj-$(CONFIG_OF)		+=3D devtree.o
diff --git a/arch/arm/kernel/kgdb_fiq.c b/arch/arm/kernel/kgdb_fiq.c
new file mode 100644
index 0000000..72a62c7
--- /dev/null
+++ b/arch/arm/kernel/kgdb_fiq.c
@@ -0,0 +1,101 @@
+/*
+ * KGDB FIQ entry
+ *
+ * Copyright 2010 Google, Inc.
+ *		  Arve Hj=C3=B8nnev=C3=A5g <arve@android.com>
+ *		  Colin Cross <ccross@android.com>
+ * Copyright 2012 Linaro Ltd.
+ *		  Anton Vorontsov <anton.vorontsov@linaro.org>
+ *
+ * This program is free software; you can redistribute it and/or modif=
y it
+ * under the terms of the GNU General Public License version 2 as publ=
ished
+ * by the Free Software Foundation.
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/errno.h>
+#include <linux/hardirq.h>
+#include <linux/kgdb.h>
+#include <asm/fiq.h>
+#include <asm/exception.h>
+
+static int kgdb_fiq_enabled;
+module_param_named(enable, kgdb_fiq_enabled, int, 0600);
+MODULE_PARM_DESC(enable, "set to 1 to enable FIQ KGDB");
+
+static unsigned int kgdb_fiq;
+static void (*kgdb_enable_fiq)(unsigned int irq, bool on);
+static bool (*is_kgdb_fiq)(unsigned int irq);
+
+asmlinkage void __exception_irq_entry kgdb_fiq_do_handle(struct pt_reg=
s *regs)
+{
+	if (!is_kgdb_fiq(kgdb_fiq))
+		return;
+	dbg_io_ops->clear_irqs();
+
+	nmi_enter();
+	kgdb_handle_exception(1, 0, 0, regs);
+	nmi_exit();
+}
+
+static struct fiq_handler kgdb_fiq_desc =3D {
+	.name =3D "kgdb",
+};
+
+static long kgdb_fiq_setup_stack(void *info)
+{
+	struct pt_regs regs;
+
+	regs.ARM_sp =3D __get_free_pages(GFP_KERNEL, THREAD_SIZE_ORDER) +
+			THREAD_START_SP;
+	WARN_ON(!regs.ARM_sp);
+
+	set_fiq_regs(&regs);
+	return 0;
+}
+
+int kgdb_arch_enable_nmi(bool on)
+{
+	static int cnt;
+
+	if (cnt > 0 && on)
+		return cnt;
+	cnt +=3D on ? 1 : -1;
+	kgdb_enable_fiq(kgdb_fiq, cnt > 0);
+	return cnt;
+}
+
+int __init kgdb_register_fiq(unsigned int mach_kgdb_fiq,
+		void (*mach_kgdb_enable_fiq)(unsigned int irq, bool on),
+		bool (*mach_is_kgdb_fiq)(unsigned int irq))
+{
+	int err;
+	int cpu;
+
+	if (!kgdb_fiq_enabled)
+		return -ENODEV;
+	if (kgdb_fiq)
+		return -EBUSY;
+
+	kgdb_fiq =3D mach_kgdb_fiq;
+	kgdb_enable_fiq =3D mach_kgdb_enable_fiq;
+	is_kgdb_fiq =3D mach_is_kgdb_fiq;
+
+	err =3D claim_fiq(&kgdb_fiq_desc);
+	if (err) {
+		pr_warn("%s: unable to claim fiq", __func__);
+		return err;
+	}
+
+	for_each_possible_cpu(cpu)
+		work_on_cpu(cpu, kgdb_fiq_setup_stack, NULL);
+
+	set_fiq_handler(&kgdb_fiq_handler,
+			&kgdb_fiq_handler_end - &kgdb_fiq_handler);
+
+	kgdb_arch_enable_nmi(1);
+	return 0;
+}
diff --git a/arch/arm/kernel/kgdb_fiq_entry.S b/arch/arm/kernel/kgdb_fi=
q_entry.S
new file mode 100644
index 0000000..a6a1ad1
--- /dev/null
+++ b/arch/arm/kernel/kgdb_fiq_entry.S
@@ -0,0 +1,92 @@
+/*
+ * KGDB FIQ entry
+ *
+ * Copyright 1996,1997,1998 Russell King.
+ * Copyright 2012 Linaro Ltd.
+ *		  Anton Vorontsov <anton.vorontsov@linaro.org>
+ *
+ * This program is free software; you can redistribute it and/or modif=
y it
+ * under the terms of the GNU General Public License version 2 as publ=
ished
+ * by the Free Software Foundation.
+ */
+
+#include <linux/linkage.h>
+#include <asm/assembler.h>
+#include <asm/memory.h>
+#include <asm/unwind.h>
+#include "entry-header.S"
+
+	.text
+
+@ This is needed for usr_entry/alignment_trap
+.LCcralign:
+	.long	cr_alignment
+.LCdohandle:
+	.long	kgdb_fiq_do_handle
+
+	.macro	fiq_handler
+	ldr	r1, =3D.LCdohandle
+	mov	r0, sp
+	adr	lr, BSYM(9997f)
+	ldr	pc, [r1]
+9997:
+	.endm
+
+	.align	5
+__fiq_svc:
+	svc_entry
+	fiq_handler
+	mrs	r4, cpsr
+	msr	cpsr_c, #FIQ_MODE | PSR_I_BIT | PSR_F_BIT
+	ldr	r1, [sp, #8]
+	msr	cpsr_c, r4
+	msr	spsr_cxsf, r1
+	mov	r0, sp
+	ldmib	r0, {r1 - r14}
+	msr	cpsr_c, #FIQ_MODE | PSR_I_BIT | PSR_F_BIT
+	add	r8, r0, #S_PC
+	ldr	r9, [r0, #S_PSR]
+	msr	spsr_cxsf, r9
+	ldr	r0, [r0, #S_R0]
+	ldmia	r8, {pc}^
+
+ UNWIND(.fnend		)
+ENDPROC(__fiq_svc)
+	.ltorg
+
+	.align	5
+__fiq_usr:
+	usr_entry
+	kuser_cmpxchg_check
+	fiq_handler
+	get_thread_info tsk
+	mov	why, #0
+	b	ret_to_user_from_irq
+ UNWIND(.fnend		)
+ENDPROC(__fiq_usr)
+	.ltorg
+
+	.global kgdb_fiq_handler
+kgdb_fiq_handler:
+
+	vector_stub	fiq, FIQ_MODE, 4
+
+	.long	__fiq_usr			@  0  (USR_26 / USR_32)
+	.long	__fiq_svc			@  1  (FIQ_26 / FIQ_32)
+	.long	__fiq_svc			@  2  (IRQ_26 / IRQ_32)
+	.long	__fiq_svc			@  3  (SVC_26 / SVC_32)
+	.long	__fiq_svc			@  4
+	.long	__fiq_svc			@  5
+	.long	__fiq_svc			@  6
+	.long	__fiq_svc			@  7
+	.long	__fiq_svc			@  8
+	.long	__fiq_svc			@  9
+	.long	__fiq_svc			@  a
+	.long	__fiq_svc			@  b
+	.long	__fiq_svc			@  c
+	.long	__fiq_svc			@  d
+	.long	__fiq_svc			@  e
+	.long	__fiq_svc			@  f
+
+	.global kgdb_fiq_handler_end
+kgdb_fiq_handler_end:
--=20
1.7.10.4

