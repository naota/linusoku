Path: news.gmane.org!not-for-mail
From: Namhyung Kim <namhyung@kernel.org>
Newsgroups: gmane.linux.kernel
Subject: Re: [RFC] optimize the locking in the rebalance_domains()
Date: Mon, 23 Jul 2012 11:25:39 +0900
Lines: 73
Approved: news@gmane.org
Message-ID: <87fw8j6wnw.fsf@sejong.aot.lge.com>
References: <1342974235.6692.20.camel@vlad>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain
X-Trace: dough.gmane.org 1343010715 29424 80.91.229.3 (23 Jul 2012 02:31:55 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Mon, 23 Jul 2012 02:31:55 +0000 (UTC)
Cc: Ingo Molnar <mingo@kernel.org>, linux-kernel@vger.kernel.org,
	"Shai Fultheim \(Shai\@ScaleMP.com\)" <Shai@ScaleMP.com>
To: Vlad Zolotarov <vlad@scalemp.com>
Original-X-From: linux-kernel-owner@vger.kernel.org Mon Jul 23 04:31:54 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1St8R7-0003b3-E4
	for glk-linux-kernel-3@plane.gmane.org; Mon, 23 Jul 2012 04:31:53 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753247Ab2GWCbJ (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Sun, 22 Jul 2012 22:31:09 -0400
Original-Received: from LGEMRELSE6Q.lge.com ([156.147.1.121]:53874 "EHLO
	LGEMRELSE6Q.lge.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752881Ab2GWCbH (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Sun, 22 Jul 2012 22:31:07 -0400
X-AuditID: 9c930179-b7bdcae000003d91-8d-500cb769cb5a
Original-Received: from sejong.aot.lge.com.lge.com ( [10.177.220.181])
	by LGEMRELSE6Q.lge.com (Symantec Brightmail Gateway) with SMTP id D4.09.15761.967BC005; Mon, 23 Jul 2012 11:31:05 +0900 (KST)
In-Reply-To: <1342974235.6692.20.camel@vlad> (Vlad Zolotarov's message of
	"Sun, 22 Jul 2012 19:23:55 +0300")
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/24.0.97 (gnu/linux)
X-Brightmail-Tracker: AAAAAA==
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1331582
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1331582>

Hi, Vlad

On Sun, 22 Jul 2012 19:23:55 +0300, Vlad Zolotarov wrote:
> Ingo, we've noticed that rebalance_domains() will try to take a lock
> every time it's called (every jiffy) if SD_SERIALIZE is set (which is a
> default configuration). This is done regardless the fact that maybe
> there hasn't passed enough time since the last rebalancing in which case
> there is no need to take a lock the first place.
>
> The above creates a heavy false sharing problem on the "balancing"
> spin-lock on large SMP systems: try_lock() is implemented with an
> (atomic) xchng instruction which invalidates the cache line "balancing"
> belongs to and therefore creates an intensive cross-NUMA-nodes traffic.
>
> The below patch will minimize the above phenomena to the time slots it's
> really needed, namely when the "interval" has really passed.
>
> Pls., comment.
>
> thanks,
> vlad
>
> ---
>  kernel/sched/fair.c |   20 +++++++++++---------
>  1 file changed, 11 insertions(+), 9 deletions(-)
>
> diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
> index c099cc6..6777d38 100644
> --- a/kernel/sched/fair.c
> +++ b/kernel/sched/fair.c
> @@ -4689,6 +4689,9 @@ static void rebalance_domains(int cpu, enum cpu_idle_type idle)
>  		interval = msecs_to_jiffies(interval);
>  		interval = clamp(interval, 1UL, max_load_balance_interval);
>  
> +                if (!time_after_eq(jiffies, sd->last_balance + interval))
> +			goto out;
> +

First line looks like white-space-damaged.
Anyway, wouldn't it be better using time_before() here?

Thanks,
Namhyung


>  		need_serialize = sd->flags & SD_SERIALIZE;
>  
>  		if (need_serialize) {
> @@ -4696,16 +4699,15 @@ static void rebalance_domains(int cpu, enum cpu_idle_type idle)
>  				goto out;
>  		}
>  
> -		if (time_after_eq(jiffies, sd->last_balance + interval)) {
> -			if (load_balance(cpu, rq, sd, idle, &balance)) {
> -				/*
> -				 * We've pulled tasks over so either we're no
> -				 * longer idle.
> -				 */
> -				idle = CPU_NOT_IDLE;
> -			}
> -			sd->last_balance = jiffies;
> +		if (load_balance(cpu, rq, sd, idle, &balance)) {
> +			/*
> +			 * We've pulled tasks over so either we're no
> +			 * longer idle.
> +			 */
> +			idle = CPU_NOT_IDLE;
>  		}
> +		sd->last_balance = jiffies;
> +
>  		if (need_serialize)
>  			spin_unlock(&balancing);
>  out:
