Path: news.gmane.org!not-for-mail
From: "Kim, Milo" <Milo.Kim@ti.com>
Newsgroups: gmane.linux.kernel
Subject: [PATCH 1/2] regmap-irq: use mask and val rather than using
 mask_buf_def
Date: Thu, 19 Jul 2012 09:04:39 +0000
Lines: 107
Approved: news@gmane.org
Message-ID: <A874F61F95741C4A9BA573A70FE3998FD99F@DQHE02.ent.ti.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 8BIT
X-Trace: dough.gmane.org 1342688718 2782 80.91.229.3 (19 Jul 2012 09:05:18 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Thu, 19 Jul 2012 09:05:18 +0000 (UTC)
Cc: "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>
To: Mark Brown <broonie@opensource.wolfsonmicro.com>
Original-X-From: linux-kernel-owner@vger.kernel.org Thu Jul 19 11:05:17 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1Srmfd-0007cB-5M
	for glk-linux-kernel-3@plane.gmane.org; Thu, 19 Jul 2012 11:05:17 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753923Ab2GSJEt (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Thu, 19 Jul 2012 05:04:49 -0400
Original-Received: from arroyo.ext.ti.com ([192.94.94.40]:39550 "EHLO arroyo.ext.ti.com"
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751939Ab2GSJEq convert rfc822-to-8bit (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Thu, 19 Jul 2012 05:04:46 -0400
Original-Received: from dbdp20.itg.ti.com ([172.24.170.38])
	by arroyo.ext.ti.com (8.13.7/8.13.7) with ESMTP id q6J94gUn032214;
	Thu, 19 Jul 2012 04:04:43 -0500
Original-Received: from DQHE72.ent.ti.com (localhost [127.0.0.1])
	by dbdp20.itg.ti.com (8.13.8/8.13.8) with ESMTP id q6J94eVR007019;
	Thu, 19 Jul 2012 14:34:42 +0530 (IST)
Original-Received: from DQHE02.ent.ti.com ([fe80::19f9:3779:aee:e323]) by
 DQHE72.ent.ti.com ([fe80::d460:f2d1:b611:d690%22]) with mapi id
 14.01.0323.003; Thu, 19 Jul 2012 17:04:40 +0800
Thread-Topic: [PATCH 1/2] regmap-irq: use mask and val rather than using
 mask_buf_def
Thread-Index: Ac1ljYQFicWxq94xTEeL04V0LuZRag==
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-cr-hashedpuzzle: AfDE A03h BNGg Bg3K B1CC Cc70 DDNL FDNd H8lX KS7O MUgO
 MbNy PwMA UAWD Ue62
 VKuF;2;YgByAG8AbwBuAGkAZQBAAG8AcABlAG4AcwBvAHUAcgBjAGUALgB3AG8AbABmAHMAbwBuAG0AaQBjAHIAbwAuAGMAbwBtADsAbABpAG4AdQB4AC0AawBlAHIAbgBlAGwAQAB2AGcAZQByAC4AawBlAHIAbgBlAGwALgBvAHIAZwA=;Sosha1_v1;7;{1924FBFA-BB3C-4DD4-885C-C384C78FC893};bQBpAGwAbwAuAGsAaQBtAEAAdABpAC4AYwBvAG0A;Thu,
 19 Jul 2012 09:04:34
 GMT;WwBQAEEAVABDAEgAIAAxAC8AMgBdACAAcgBlAGcAbQBhAHAALQBpAHIAcQA6ACAAdQBzAGUAIABtAGEAcwBrACAAYQBuAGQAIAB2AGEAbAAgAHIAYQB0AGgAZQByACAAdABoAGEAbgAgAHUAcwBpAG4AZwAgAG0AYQBzAGsAXwBiAHUAZgBfAGQAZQBmAA==
x-cr-puzzleid: {1924FBFA-BB3C-4DD4-885C-C384C78FC893}
x-originating-ip: [157.87.177.86]
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1330219
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1330219>

Default mask value is used when updating irq registers.
Rather than using mask_buf_def[], use mask and value explicitly.

(a) remove default mask buffer : mask_buf_def[]

(b) add 'val_buf' for storing value of registers
  : val_buf is updated only when the irq is enabled or disabled

(c) In irq_sync_unlock, use 'mask_buf' and 'val_buf'
    on updating interrupt registers

Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
---
 drivers/base/regmap/regmap-irq.c |   19 +++++++++----------
 1 files changed, 9 insertions(+), 10 deletions(-)

diff --git a/drivers/base/regmap/regmap-irq.c b/drivers/base/regmap/regmap-irq.c
index a897346..ed36ea2 100644
--- a/drivers/base/regmap/regmap-irq.c
+++ b/drivers/base/regmap/regmap-irq.c
@@ -34,7 +34,7 @@ struct regmap_irq_chip_data {
 
 	unsigned int *status_buf;
 	unsigned int *mask_buf;
-	unsigned int *mask_buf_def;
+	unsigned int *val_buf;
 	unsigned int *wake_buf;
 
 	unsigned int irq_reg_stride;
@@ -69,7 +69,7 @@ static void regmap_irq_sync_unlock(struct irq_data *data)
 		ret = regmap_update_bits(d->map, d->chip->mask_base +
 						(i * map->reg_stride *
 						d->irq_reg_stride),
-					 d->mask_buf_def[i], d->mask_buf[i]);
+					 d->mask_buf[i], d->val_buf[i]);
 		if (ret != 0)
 			dev_err(d->map->dev, "Failed to sync masks in %x\n",
 				d->chip->mask_base + (i * map->reg_stride));
@@ -94,7 +94,7 @@ static void regmap_irq_enable(struct irq_data *data)
 	struct regmap *map = d->map;
 	const struct regmap_irq *irq_data = irq_to_regmap_irq(d, data->hwirq);
 
-	d->mask_buf[irq_data->reg_offset / map->reg_stride] &= ~irq_data->mask;
+	d->val_buf[irq_data->reg_offset / map->reg_stride] &= ~irq_data->mask;
 }
 
 static void regmap_irq_disable(struct irq_data *data)
@@ -103,7 +103,7 @@ static void regmap_irq_disable(struct irq_data *data)
 	struct regmap *map = d->map;
 	const struct regmap_irq *irq_data = irq_to_regmap_irq(d, data->hwirq);
 
-	d->mask_buf[irq_data->reg_offset / map->reg_stride] |= irq_data->mask;
+	d->val_buf[irq_data->reg_offset / map->reg_stride] |= irq_data->mask;
 }
 
 static int regmap_irq_set_wake(struct irq_data *data, unsigned int on)
@@ -272,9 +272,9 @@ int regmap_add_irq_chip(struct regmap *map, int irq, int irq_flags,
 	if (!d->mask_buf)
 		goto err_alloc;
 
-	d->mask_buf_def = kzalloc(sizeof(unsigned int) * chip->num_regs,
+	d->val_buf = kzalloc(sizeof(unsigned int) * chip->num_regs,
 				  GFP_KERNEL);
-	if (!d->mask_buf_def)
+	if (!d->val_buf)
 		goto err_alloc;
 
 	if (chip->wake_base) {
@@ -297,12 +297,11 @@ int regmap_add_irq_chip(struct regmap *map, int irq, int irq_flags,
 	mutex_init(&d->lock);
 
 	for (i = 0; i < chip->num_irqs; i++)
-		d->mask_buf_def[chip->irqs[i].reg_offset / map->reg_stride]
+		d->mask_buf[chip->irqs[i].reg_offset / map->reg_stride]
 			|= chip->irqs[i].mask;
 
 	/* Mask all the interrupts by default */
 	for (i = 0; i < chip->num_regs; i++) {
-		d->mask_buf[i] = d->mask_buf_def[i];
 		ret = regmap_write(map, chip->mask_base + (i * map->reg_stride
 				   * d->irq_reg_stride),
 				   d->mask_buf[i]);
@@ -340,7 +339,7 @@ err_domain:
 	/* Should really dispose of the domain but... */
 err_alloc:
 	kfree(d->wake_buf);
-	kfree(d->mask_buf_def);
+	kfree(d->val_buf);
 	kfree(d->mask_buf);
 	kfree(d->status_buf);
 	kfree(d);
@@ -362,7 +361,7 @@ void regmap_del_irq_chip(int irq, struct regmap_irq_chip_data *d)
 	free_irq(irq, d);
 	/* We should unmap the domain but... */
 	kfree(d->wake_buf);
-	kfree(d->mask_buf_def);
+	kfree(d->val_buf);
 	kfree(d->mask_buf);
 	kfree(d->status_buf);
 	kfree(d);
-- 
1.7.2.5


Best Regards,
Milo

