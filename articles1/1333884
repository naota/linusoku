Path: news.gmane.org!not-for-mail
From: Toshi Kani <toshi.kani@hp.com>
Newsgroups: gmane.linux.acpi.devel,gmane.linux.kernel
Subject: Re: [PATCH v3 1/4] ACPI: Add acpi_pr_<level>() interfaces
Date: Thu, 26 Jul 2012 14:58:50 -0600
Lines: 187
Approved: news@gmane.org
Message-ID: <1343336330.3010.496.camel@misato.fc.hp.com>
References: <1343257978-7085-1-git-send-email-toshi.kani@hp.com>
	 <1343257978-7085-2-git-send-email-toshi.kani@hp.com>
	 <CAErSpo4=HDaWTusKf+tRU6aXmj-mC1i7CswnDzDLZii21i9NaQ@mail.gmail.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1343336636 26755 80.91.229.3 (26 Jul 2012 21:03:56 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Thu, 26 Jul 2012 21:03:56 +0000 (UTC)
Cc: lenb@kernel.org, linux-acpi@vger.kernel.org,
	linux-kernel@vger.kernel.org, joe@perches.com,
	isimatu.yasuaki@jp.fujitsu.com, liuj97@gmail.com,
	srivatsa.bhat@linux.vnet.ibm.com, prarit@redhat.com,
	imammedo@redhat.com, vijaymohan.pandarathil@hp.com
To: Bjorn Helgaas <bhelgaas@google.com>
Original-X-From: linux-acpi-owner@vger.kernel.org Thu Jul 26 23:03:50 2012
Return-path: <linux-acpi-owner@vger.kernel.org>
Envelope-to: glad-acpi-devel@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-acpi-owner@vger.kernel.org>)
	id 1SuVDl-0001V6-AP
	for glad-acpi-devel@plane.gmane.org; Thu, 26 Jul 2012 23:03:45 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752673Ab2GZVDn (ORCPT <rfc822;glad-acpi-devel@m.gmane.org>);
	Thu, 26 Jul 2012 17:03:43 -0400
Original-Received: from g1t0028.austin.hp.com ([15.216.28.35]:41830 "EHLO
	g1t0028.austin.hp.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752642Ab2GZVDm (ORCPT
	<rfc822;linux-acpi@vger.kernel.org>); Thu, 26 Jul 2012 17:03:42 -0400
Original-Received: from g1t0039.austin.hp.com (g1t0039.austin.hp.com [16.236.32.45])
	by g1t0028.austin.hp.com (Postfix) with ESMTP id F145D1C3C9;
	Thu, 26 Jul 2012 21:03:41 +0000 (UTC)
Original-Received: from [16.71.12.41] (misato.fc.hp.com [16.71.12.41])
	by g1t0039.austin.hp.com (Postfix) with ESMTP id 01EED3403C;
	Thu, 26 Jul 2012 21:03:39 +0000 (UTC)
In-Reply-To: <CAErSpo4=HDaWTusKf+tRU6aXmj-mC1i7CswnDzDLZii21i9NaQ@mail.gmail.com>
X-Mailer: Evolution 3.2.3 (3.2.3-1.fc16) 
Original-Sender: linux-acpi-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-acpi.vger.kernel.org>
X-Mailing-List: linux-acpi@vger.kernel.org
Xref: news.gmane.org gmane.linux.acpi.devel:54593 gmane.linux.kernel:1333884
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1333884>

On Thu, 2012-07-26 at 13:22 -0600, Bjorn Helgaas wrote:
> On Wed, Jul 25, 2012 at 5:12 PM, Toshi Kani <toshi.kani@hp.com> wrote:
> > This patch introduces acpi_pr_<level>(), where <level> is a kernel
> > message level such as err/warn/info, to support improved logging
> > messages for ACPI, esp. in hotplug operations.  acpi_pr_<level>()
> > appends "ACPI" prefix and ACPI object path to the messages.  This
> > improves diagnostics in hotplug operations since it identifies an
> > object that caused an issue in a log file.
> >
> > acpi_pr_<level>() takes acpi_handle as an argument, which is passed
> > to ACPI hotplug notify handlers from the ACPICA.  Therefore, it is
> > always available unlike other kernel objects, such as device.
> >
> > For example, the statement below
> >   acpi_pr_err(handle, "Device don't exist, dropping EJECT\n");
> > logs an error message like this at KERN_ERR.
> >   ACPI: \_SB_.SCK4.CPU4: Device don't exist, dropping EJECT
> >
> > ACPI drivers can use acpi_pr_<level>() when they need to identify
> > a target ACPI object in their messages, such as error messages.
> 
> It's definitely an improvement to have *something* that identifies a
> device in these messages.  But the ACPI namespace path is not really
> intended to be user-consumable, so I don't think we should expose it
> indiscriminately.  I think we should be using the ACPI device name
> ("PNP0C02:00") whenever possible.  Given the device name, we can get
> the path from the sysfs "path" file.

Hi Bjorn,

Thanks for reviewing!  Yes, ACPI device path is not good for regular
users to analyze from the info.  I also agree with you that device name
is a better choice when users always diagnose issues by themselves right
after they performed an operation.  However, there are also cases that
users ask someone to diagnose an issue remotely from the log files, and
hotplug operations are performed automatically.  In such cases, using
ACPI device name alone is problematic for hotplug operations since a
device name comes with an instance number that continues to change with
hot-add/remove operations.  Here is one example scenario.  Let's say,
user has automatic load-balancer or power-saving that can trigger
hundreds of CPU hotplug operations per a day.  This user then found that
there were multiple hotplug errors logged in the past few days, and
asked an IT guy to look at the error messages.  When this user found the
issue, all device names are gone from sysfs after repeated hotplug
operations.  This IT guy would have no idea if those errors were
happening on a particular device or not from the error messages since
their instance numbers continue to change.

> > The usage model is similar to dev_<level>().  acpi_pr_<level>() can
> > be used when device is not created/valid, which may be the case for
> > ACPI hotplug handlers.  ACPI drivers can continue to use dev_<level>()
> > when device is valid.
> 
> I'd argue that ACPI driver code should never be called unless the
> device is valid, so drivers should *always* be able to use
> dev_<level>.  Obviously, ACPI hotplug is currently screwed up (it's
> mostly handled in drivers rather than in the ACPI core), so in some of
> those hotplug paths in the drivers, we may not have a device yet.  But
> those cases should be minimal.

I think it makes sense for ACPI hotplug notify handlers to use
acpi_pr_<level>() for their error messages since ACPI device names are
static on the platform.  This info greatly helps in the scenario I
described above.  In the outside of the hotplug notify handlers, I agree
with you that dev_<level>() should be used.

> Another possible approach to this is to add a %p extension rather than
> adding acpi_printk().  Then you could do, e.g., 'printk("%pA ...\n",
> handle)', and printk could interpolate the namespace path.  But I
> really think there should be very few places where we need the path,
> so I'm not sure it's worth it.

Address of handle is not very helpful either when someone needs to
analyze from log files.

Thanks,
-Toshi


> > ACPI drivers also continue to use pr_<level>() when ACPI device
> > path does not have to be appended to the messages, such as boot-up
> > messages.
> >
> > Note: ACPI_[WARNING|INFO|ERROR]() are intended for the ACPICA and
> > are not associated with the kernel message level.
> >
> > Signed-off-by: Toshi Kani <toshi.kani@hp.com>
> > Tested-by: Vijay Mohan Pandarathil <vijaymohan.pandarathil@hp.com>
> > ---
> >  drivers/acpi/utils.c    |   34 ++++++++++++++++++++++++++++++++++
> >  include/acpi/acpi_bus.h |   31 +++++++++++++++++++++++++++++++
> >  2 files changed, 65 insertions(+), 0 deletions(-)
> >
> > diff --git a/drivers/acpi/utils.c b/drivers/acpi/utils.c
> > index 3e87c9c..ec0c6f9 100644
> > --- a/drivers/acpi/utils.c
> > +++ b/drivers/acpi/utils.c
> > @@ -454,3 +454,37 @@ acpi_evaluate_hotplug_ost(acpi_handle handle, u32 source_event,
> >  #endif
> >  }
> >  EXPORT_SYMBOL(acpi_evaluate_hotplug_ost);
> > +
> > +/**
> > + * acpi_printk: Print messages with ACPI prefix and object path
> > + *
> > + * This function is intended to be called through acpi_pr_<level> macros.
> > + */
> > +void
> > +acpi_printk(const char *level, acpi_handle handle, const char *fmt, ...)
> > +{
> > +       struct va_format vaf;
> > +       va_list args;
> > +       struct acpi_buffer buffer = {
> > +               .length = ACPI_ALLOCATE_BUFFER,
> > +               .pointer = NULL
> > +       };
> > +       const char *path;
> > +       acpi_status ret;
> > +
> > +       va_start(args, fmt);
> > +       vaf.fmt = fmt;
> > +       vaf.va = &args;
> > +
> > +       ret = acpi_get_name(handle, ACPI_FULL_PATHNAME, &buffer);
> > +       if (ret == AE_OK)
> > +               path = buffer.pointer;
> > +       else
> > +               path = "<n/a>";
> > +
> > +       printk("%sACPI: %s: %pV", level, path, &vaf);
> > +
> > +       va_end(args);
> > +       kfree(buffer.pointer);
> > +}
> > +EXPORT_SYMBOL(acpi_printk);
> > diff --git a/include/acpi/acpi_bus.h b/include/acpi/acpi_bus.h
> > index bde976e..1c855b8 100644
> > --- a/include/acpi/acpi_bus.h
> > +++ b/include/acpi/acpi_bus.h
> > @@ -85,6 +85,37 @@ struct acpi_pld {
> >
> >  acpi_status
> >  acpi_get_physical_device_location(acpi_handle handle, struct acpi_pld *pld);
> > +
> > +void acpi_printk(const char *level, acpi_handle handle, const char *fmt, ...);
> > +
> > +#define acpi_pr_emerg(handle, fmt, ...)                                \
> > +       acpi_printk(KERN_EMERG, handle, fmt, ##__VA_ARGS__)
> > +#define acpi_pr_alert(handle, fmt, ...)                                \
> > +       acpi_printk(KERN_ALERT, handle, fmt, ##__VA_ARGS__)
> > +#define acpi_pr_crit(handle, fmt, ...)                         \
> > +       acpi_printk(KERN_CRIT, handle, fmt, ##__VA_ARGS__)
> > +#define acpi_pr_err(handle, fmt, ...)                          \
> > +       acpi_printk(KERN_ERR, handle, fmt, ##__VA_ARGS__)
> > +#define acpi_pr_warn(handle, fmt, ...)                         \
> > +       acpi_printk(KERN_WARNING, handle, fmt, ##__VA_ARGS__)
> > +#define acpi_pr_notice(handle, fmt, ...)                       \
> > +       acpi_printk(KERN_NOTICE, handle, fmt, ##__VA_ARGS__)
> > +#define acpi_pr_info(handle, fmt, ...)                         \
> > +       acpi_printk(KERN_INFO, handle, fmt, ##__VA_ARGS__)
> > +
> > +/* REVISIT: Need to support CONFIG_DYNAMIC_DEBUG */
> > +#if defined(DEBUG) || defined(CONFIG_DYNAMIC_DEBUG)
> > +#define acpi_pr_debug(handle, fmt, ...)                                        \
> > +       acpi_printk(KERN_DEBUG, handle, fmt, ##__VA_ARGS__)
> > +#else
> > +#define acpi_pr_debug(handle, fmt, ...)                                        \
> > +({                                                                     \
> > +       if (0)                                                          \
> > +               acpi_printk(KERN_DEBUG, handle, fmt, ##__VA_ARGS__);    \
> > +       0;                                                              \
> > +})
> > +#endif
> > +
> >  #ifdef CONFIG_ACPI
> >
> >  #include <linux/proc_fs.h>
> > --
> > 1.7.7.6
> >


--
To unsubscribe from this list: send the line "unsubscribe linux-acpi" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

