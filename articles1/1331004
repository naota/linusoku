Path: news.gmane.org!not-for-mail
From: Olaf Hering <olaf@aepfle.de>
Newsgroups: gmane.linux.kernel
Subject: [RFC] how to mark pfn ranges as unallocatable for kexec
Date: Fri, 20 Jul 2012 20:44:32 +0200
Lines: 221
Approved: news@gmane.org
Message-ID: <20120720184432.GA8800@aepfle.de>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: QUOTED-PRINTABLE
X-Trace: dough.gmane.org 1342809890 7761 80.91.229.3 (20 Jul 2012 18:44:50 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Fri, 20 Jul 2012 18:44:50 +0000 (UTC)
To: linux-kernel@vger.kernel.org
Original-X-From: linux-kernel-owner@vger.kernel.org Fri Jul 20 20:44:50 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SsIBy-0005Q0-3P
	for glk-linux-kernel-3@plane.gmane.org; Fri, 20 Jul 2012 20:44:46 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752538Ab2GTSoh convert rfc822-to-quoted-printable (ORCPT
	<rfc822;glk-linux-kernel-3@m.gmane.org>);
	Fri, 20 Jul 2012 14:44:37 -0400
Original-Received: from mo-p00-ob.rzone.de ([81.169.146.162]:9387 "EHLO
	mo-p00-ob.rzone.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751715Ab2GTSog (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Fri, 20 Jul 2012 14:44:36 -0400
X-RZG-AUTH: :P2EQZWCpfu+qG7CngxMFH1J+zrwiavkK6tmQaLfmwtM48/lr0M7qEIqZ
X-RZG-CLASS-ID: mo00
Original-Received: from probook.site
	(dslb-084-057-069-129.pools.arcor-ip.net [84.57.69.129])
	by smtp.strato.de (jored mo23) (RZmta 29.19 DYNA|AUTH)
	with (DHE-RSA-AES256-SHA encrypted) ESMTPA id I030a4o6KFmOfI
	for <linux-kernel@vger.kernel.org>;
	Fri, 20 Jul 2012 20:44:33 +0200 (CEST)
Original-Received: by probook.site (Postfix, from userid 1000)
	id CD8E218637; Fri, 20 Jul 2012 20:44:32 +0200 (CEST)
Content-Disposition: inline
User-Agent: Mutt/1.5.21.rev5543 (2011-12-20)
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1331004
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1331004>


I'm working on kexec support for a ballooned (Xen PVonHVM) guests.
I have a few questions about how to tweak the memory allocator.


To preserve the overall memory footprint of a ballooned guest during th=
e
kexec boot the old kernel needs to "unballoon"/populate certain memory
areas, and later the new kernel needs to pickup the ballooned pfns.

The first step is to populate the memory areas which whill be used by
the kexec purgatory code, and to prevent the balloon driver from
allocating memory in these areas. Its not clear to me how to achieve th=
at.

The kexec_load syscall gets a list of physical memory ranges in
kexec_segment->mem. These ranges have to be marked in such a way that
only drivers/xen/balloon.c:decrease_reservation can not alloc them agai=
n
with alloc_page().
How can I achieve that?
Is there a new GFP type GFP_NO_BALLOON required for such a purpuse, or
can I reuse an existing one?

To demonstrate what I mean, see set_range_unballoonable in the draft pa=
tch below.

Olaf

---
 drivers/xen/balloon.c |   99 +++++++++++++++++++++++++++++++++++++++++=
++++++++
 include/xen/balloon.h |    1 +
 kernel/kexec.c        |   19 ++++++++++
 3 Dateien ge=C3=A4ndert, 119 Zeilen hinzugef=C3=BCgt(+)

diff --git a/drivers/xen/balloon.c b/drivers/xen/balloon.c
index 31ab82f..0873c1a 100644
--- a/drivers/xen/balloon.c
+++ b/drivers/xen/balloon.c
@@ -89,6 +89,7 @@ EXPORT_SYMBOL_GPL(balloon_stats);
=20
 /* We increase/decrease in batches which fit in a page */
 static unsigned long frame_list[PAGE_SIZE / sizeof(unsigned long)];
+static struct page *page_list[PAGE_SIZE / sizeof(unsigned long)];
=20
 #ifdef CONFIG_HIGHMEM
 #define inc_totalhigh_pages() (totalhigh_pages++)
@@ -559,6 +560,104 @@ void free_xenballooned_pages(int nr_pages, struct=
 page **pages)
 }
 EXPORT_SYMBOL(free_xenballooned_pages);
=20
+void balloon_populate_range(unsigned long first_pfn, unsigned long num=
)
+{
+	struct xen_memory_reservation reservation =3D {
+		.address_bits =3D 0,
+		.extent_order =3D 0,
+		.domid        =3D DOMID_SELF
+	};
+	struct page *page;
+	unsigned long pfn, total;
+	int rc =3D 0, i, nr_pages;
+
+	total =3D 0;
+	printk("%s: first_pfn %lx num %lx\n", __func__, first_pfn, num);
+	while (total < num) {
+
+		nr_pages =3D num - total;
+
+		if (nr_pages > ARRAY_SIZE(frame_list))
+			nr_pages =3D ARRAY_SIZE(frame_list);
+
+		mutex_lock(&balloon_mutex);
+
+		page =3D balloon_first_page();
+
+		i =3D 0;
+		do {
+			if (!page)
+				break;
+
+			pfn =3D page_to_pfn(page);
+			if (pfn >=3D first_pfn && pfn < first_pfn + num) {
+				printk("%s: i %d pfn %lx\n", __func__, i, pfn);
+				page_list[i] =3D page;
+				frame_list[i] =3D pfn;
+				i++;
+			}
+			page =3D balloon_next_page(page);
+
+		} while (i < nr_pages);
+
+		printk("%s: i %d nr_pages %d\n", __func__, i, nr_pages);
+		nr_pages =3D i;
+		if (nr_pages > 0) {
+			set_xen_guest_handle(reservation.extent_start, frame_list);
+			reservation.nr_extents =3D nr_pages;
+			rc =3D HYPERVISOR_memory_op(XENMEM_populate_physmap, &reservation);
+			printk("%s: first_pfn %lx num %lx nr_pages %x rc %x\n", __func__, f=
irst_pfn, num, nr_pages, rc);
+			BUG_ON(rc > nr_pages);
+			if (rc > 0) {
+				for (i =3D 0; i < rc; i++) {
+					page =3D page_list[i];
+					BUG_ON(page =3D=3D NULL);
+
+					list_del(&page->lru);
+
+					if (PageHighMem(page)) {
+						balloon_stats.balloon_high--;
+						inc_totalhigh_pages();
+					} else
+						balloon_stats.balloon_low--;
+
+					totalram_pages++;
+
+					pfn =3D page_to_pfn(page);
+					BUG_ON(!xen_feature(XENFEAT_auto_translated_physmap) &&
+					       phys_to_machine_mapping_valid(pfn));
+
+					set_phys_to_machine(pfn, frame_list[i]);
+
+					/* Link back into the page tables if not highmem. */
+					if (xen_pv_domain() && !PageHighMem(page)) {
+						int ret;
+						ret =3D HYPERVISOR_update_va_mapping(
+							(unsigned long)__va(pfn << PAGE_SHIFT),
+							mfn_pte(frame_list[i], PAGE_KERNEL),
+							0);
+						BUG_ON(ret);
+					}
+
+#if 0
+					/* Relinquish the page back to the allocator. */
+					ClearPageReserved(page);
+					init_page_count(page);
+					__free_page(page);
+#endif
+				}
+				total +=3D rc;
+
+				balloon_stats.current_pages +=3D rc;
+			}
+		}
+		mutex_unlock(&balloon_mutex);
+		printk("%s: first_pfn %lx num %lx nr_pages %x rc %x\n", __func__, fi=
rst_pfn, num, nr_pages, rc);
+		if (nr_pages =3D=3D 0)
+			break;
+	}
+}
+
 static void __init balloon_add_region(unsigned long start_pfn,
 				      unsigned long pages)
 {
diff --git a/include/xen/balloon.h b/include/xen/balloon.h
index cc2e1a7..93f2dac 100644
--- a/include/xen/balloon.h
+++ b/include/xen/balloon.h
@@ -29,6 +29,7 @@ int alloc_xenballooned_pages(int nr_pages, struct pag=
e **pages,
 		bool highmem);
 void free_xenballooned_pages(int nr_pages, struct page **pages);
=20
+void balloon_populate_range(unsigned long pfn, unsigned long num);
 struct device;
 #ifdef CONFIG_XEN_SELFBALLOONING
 extern int register_xen_selfballooning(struct device *dev);
diff --git a/kernel/kexec.c b/kernel/kexec.c
index 4e2e472..4fd100e 100644
--- a/kernel/kexec.c
+++ b/kernel/kexec.c
@@ -33,6 +33,7 @@
 #include <linux/vmalloc.h>
 #include <linux/swap.h>
 #include <linux/syscore_ops.h>
+#include <xen/balloon.h>
=20
 #include <asm/page.h>
 #include <asm/uaccess.h>
@@ -115,6 +116,21 @@ static struct page *kimage_alloc_page(struct kimag=
e *image,
 				       gfp_t gfp_mask,
 				       unsigned long dest);
=20
+static void mark_range_special(unsigned long pfn, unsigned long num)
+{
+	printk("%s: start pfn %lx num %lx\n", __func__, pfn, num);
+	/* ??? */
+}
+
+static void set_range_unballoonable(unsigned long mem, size_t memsz)
+{
+	unsigned long pfn, num;
+	pfn =3D PFN_DOWN(mem);
+	num =3D PFN_UP(memsz);
+	mark_range_special(pfn, num);
+	balloon_populate_range(pfn, num);
+}
+
 static int do_kimage_alloc(struct kimage **rimage, unsigned long entry=
,
 	                    unsigned long nr_segments,
                             struct kexec_segment __user *segments)
@@ -213,6 +229,9 @@ static int do_kimage_alloc(struct kimage **rimage, =
unsigned long entry,
 			goto out;
 	}
=20
+	for (i =3D 0; i < nr_segments; i++)
+		set_range_unballoonable(image->segment[i].mem, image->segment[i].mem=
sz);
+
 	result =3D 0;
 out:
 	if (result =3D=3D 0)
--=20
1.7.10.4

