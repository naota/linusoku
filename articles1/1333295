Path: news.gmane.org!not-for-mail
From: Hugh Dickins <hughd@google.com>
Newsgroups: gmane.linux.kernel.cross-arch,gmane.linux.kernel,gmane.linux.kernel.mm
Subject: Re: [RFC] page-table walkers vs memory order
Date: Wed, 25 Jul 2012 15:09:48 -0700 (PDT)
Lines: 119
Approved: news@gmane.org
Message-ID: <alpine.LSU.2.00.1207251452160.2084@eggly.anvils>
References: <1343064870.26034.23.camel@twins> <alpine.LSU.2.00.1207241356350.2094@eggly.anvils> <20120725175628.GH2378@linux.vnet.ibm.com> <alpine.LSU.2.00.1207251313180.1942@eggly.anvils> <20120725211217.GR2378@linux.vnet.ibm.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Trace: dough.gmane.org 1343254246 8776 80.91.229.3 (25 Jul 2012 22:10:46 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Wed, 25 Jul 2012 22:10:46 +0000 (UTC)
Cc: Peter Zijlstra <peterz@infradead.org>,
	Linus Torvalds <torvalds@linux-foundation.org>,
	Rik van Riel <riel@redhat.com>,
	Andrew Morton <akpm@linux-foundation.org>,
	Nick Piggin <npiggin@kernel.dk>,
	Andrea Arcangeli <aarcange@redhat.com>,
	linux-kernel@vger.kernel.org, linux-arch@vger.kernel.org,
	linux-mm@kvack.org
To: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>
Original-X-From: linux-arch-owner@vger.kernel.org Thu Jul 26 00:10:44 2012
Return-path: <linux-arch-owner@vger.kernel.org>
Envelope-to: glka-linux-arch@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-arch-owner@vger.kernel.org>)
	id 1Su9n1-0007lY-O4
	for glka-linux-arch@plane.gmane.org; Thu, 26 Jul 2012 00:10:44 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752862Ab2GYWKm (ORCPT <rfc822;glka-linux-arch@m.gmane.org>);
	Wed, 25 Jul 2012 18:10:42 -0400
Original-Received: from mail-gg0-f174.google.com ([209.85.161.174]:64474 "EHLO
	mail-gg0-f174.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751974Ab2GYWKl (ORCPT
	<rfc822;linux-arch@vger.kernel.org>); Wed, 25 Jul 2012 18:10:41 -0400
Original-Received: by gglu4 with SMTP id u4so1287342ggl.19
        for <linux-arch@vger.kernel.org>; Wed, 25 Jul 2012 15:10:40 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=date:from:x-x-sender:to:cc:subject:in-reply-to:message-id
         :references:user-agent:mime-version:content-type;
        bh=a6DsvquxD198589A1zQhq3AScTJqg0n+7dA+XAJL+V0=;
        b=m4McrS4/T4hNaizmK8ECRhfTZU9mP/a3pbHgJKoI4QW+MjWhuXxgVot08zAIjOe2WB
         lHCgpTM3v4OKVAH3uOTs9NFukg/uRcRuTMn23E3JCl8xdPJ41d53AVW6VKyXhfNId8/z
         p1EBjfS7W4f9asZeLnUXHGZbTrD0D+1VqAYCZuHL7D+t1ZfEKkwKb21qd9esqrx5DWpI
         FHd/uGfhzNDoKpqyB050Per7pJqMDZZxtW3MBhnHuTYiqOMsHp6aOP3PlkvI1khSTH/+
         Unp/vmt4lnihr2Qb1it+XXNJ8oE7RiTX4bZSYQ/a0/ZZ1BZLnE5wHQalJkvjBoGePzlV
         ay7g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=date:from:x-x-sender:to:cc:subject:in-reply-to:message-id
         :references:user-agent:mime-version:content-type:x-gm-message-state;
        bh=a6DsvquxD198589A1zQhq3AScTJqg0n+7dA+XAJL+V0=;
        b=i89bxF1LCLspr/pd7/ukcYiHovF4N2JsIxcYcI0LcCiddECVh3GjOaN0LdSLPZ/VaH
         kzJWWWLLn4J6lkySJtYS7LK9n24dcFH3A2zfBprohkq7TYjev1nPrtI1CF0pj0e5zx//
         Qjk9nBmC4Y5oIXJ/5f6ztYe8gFqOWPm6vvdNaElJMAqXz5TMZP/aWM4htVHhmj0NslF0
         sxSioaP79WO5jIjEpxrZBbBqXSHeMzZWrlhtefE3bsF0hCe7uwh0jOz0XQ0mvUL3ymIu
         RxJ63tbR/tgROGStSA9dRen7mhBELY5mhFMQbpTyU2bmwkDWp0391sf3f46L9SY5gVuS
         lSwQ==
Original-Received: by 10.101.72.7 with SMTP id z7mr7660021ank.78.1343254240464;
        Wed, 25 Jul 2012 15:10:40 -0700 (PDT)
Original-Received: by 10.101.72.7 with SMTP id z7mr7659998ank.78.1343254240151;
        Wed, 25 Jul 2012 15:10:40 -0700 (PDT)
Original-Received: from [2620:0:1000:fd2e:224:d7ff:fee2:b75c] ([2620:0:1000:fd2e:224:d7ff:fee2:b75c])
        by mx.google.com with ESMTPS id o25sm38705684yhm.14.2012.07.25.15.10.38
        (version=TLSv1/SSLv3 cipher=OTHER);
        Wed, 25 Jul 2012 15:10:39 -0700 (PDT)
X-X-Sender: hugh@eggly.anvils
In-Reply-To: <20120725211217.GR2378@linux.vnet.ibm.com>
User-Agent: Alpine 2.00 (LSU 1167 2008-08-23)
X-Gm-Message-State: ALoCoQnrSg1fvbYNElyHR6UfSO9v3tTgp9WFCc/aSGS9L5z9pgaBsKgp5b6+Qd+8+Z3yp6O7UzGDuUhhk5kVmubB1dxm+TULKpakdPcMb8RjmflIKTPj45AGXojFR0341sV/AcUSha2dCERR7TR10bF4YcmacurcO7iQKz5vjvIWZRxWaIsogV7hZavSYEEyiVaK6D5pGO7X
Original-Sender: linux-arch-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-arch.vger.kernel.org>
X-Mailing-List: linux-arch@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel.cross-arch:14714 gmane.linux.kernel:1333295 gmane.linux.kernel.mm:83016
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1333295>

On Wed, 25 Jul 2012, Paul E. McKenney wrote:
> On Wed, Jul 25, 2012 at 01:26:43PM -0700, Hugh Dickins wrote:
> > On Wed, 25 Jul 2012, Paul E. McKenney wrote:
> > > On Tue, Jul 24, 2012 at 02:51:05PM -0700, Hugh Dickins wrote:
> > > > 
> > > > I'm totally unclear whether the kernel ever gets built with these
> > > > 'creative' compilers that you refer to.  Is ACCESS_ONCE() a warning
> > > > of where some future compiler would be permitted to mess with our
> > > > assumptions?  Or is it actually saving us already today?  Would we
> > > > know?  Could there be a boottime test that would tell us?  Is it
> > > > likely that a future compiler would have an "--access_once"
> > > > option that the kernel build would want to turn on?
> > > 
> > > The problem is that, unless you tell it otherwise, the compiler is
> > > permitted to assume that the code that it is generating is the only thing
> > > active in that address space at that time.  So the compiler might know
> > > that it already has a perfectly good copy of that value somewhere in
> > > its registers, or it might decide to fetch the value twice rather than
> > > once due to register pressure, either of which can be fatal in SMP code.
> > > And then there are more aggressive optimizations as well.
> > > 
> > > ACCESS_ONCE() is a way of telling the compiler to access the value
> > > once, regardless of what cute single-threaded optimizations that it
> > > otherwise might want to apply.
> > 
> > Right, but you say "might": I have never heard it asserted, that we do
> > build the kernel with a compiler which actually makes such optimizations.
> 
> The compiler we use today can and has hurt us with double-fetching
> and old-value-reuse optimizations.  There have been several that have
> "optimized" things like "while (foo)" into "tmp = foo; while (tmp)"
> in the Linux kernel, which have been dealt with by recoding.

Ah yes, those: I think we need ACCESS_EVERY_TIME() for those ones ;)

I consider the double-fetching ones more insidious,
less obviously in need of the volatile cast.

> 
> You might argue that the compiler cannot reasonably apply such an
> optimization in some given case, but the compiler does much more detailed
> analysis of the code than most people are willing to do (certainly more
> than I am usually willing to do!), so I believe that a little paranoia is
> quite worthwhile.
> 
> > There's a lot of other surprising things which a compiler is permitted
> > to do, but we would simply not use such a compiler to build the kernel.
> 
> Unless we get the gcc folks to build and boot the Linux kernel as part
> of their test suite (maybe they already do, but not that I know of),
> how would either they or we know that they had deployed a destructive
> optimization?

We find out after it hits us, and someone studies the disassembly -
if we're lucky enough to crash near the origin of the problem.

> 
> > Does some version of gcc, under the options which we insist upon,
> > make such optimizations on any of the architectures which we support?
> 
> Pretty much any production-quality compiler will do double-fetch
> and old-value-reuse optimizations, the former especially on 32-bit
> x86.

That makes good sense, yes: so, under register pressure, they may
refetch from global memory, instead of using a temporary on local stack.

> I don't know of any production-quality compilers that do value
> speculation, which would make the compiler act like DEC Alpha hardware,
> and I would hope that if this does appear, (1) we would have warning
> and (2) it could be turned off.  But there has been a lot of work on
> this topic, so we would be foolish to rule it out.

I think you're justified in expecting both (1) and (2) there.

> 
> But the currently deployed optimizations can already cause enough trouble.
> 
> > Or is there some other compiler in use on the kernel, which makes
> > such optimizations?  It seems a long time since I heard of building
> > the kernel with icc.  clang?
> > 
> > I don't mind the answer "Yes, you idiot" - preferably with an example
> > or two of which compiler and which piece of code it has bitten us on.
> > I don't mind the answer "We just don't know" if that's the case.
> > 
> > But I'd like a better idea of how much to worry: is ACCESS_ONCE
> > demonstrably needed today, or rather future-proofing and documentation?
> 
> Both.  If you are coding "while (foo)" where "foo" can be changed by an
> interrupt handler, you had better instead write "while (ACCESS_ONCE(foo))"
> or something similar, because most compilers are happy to optimize your
> loop into an infinite loop in that case.  There are places in the Linux
> kernel that would have problems if the compiler decided to refetch a
> value -- if a pointer was changed in the meantime, part of your code
> might be working on the old structure, and part on the new structure.
> This really can happen today, and this is why rcu_dereference() contains
> an ACCESS_ONCE().
> 
> If you are making lockless non-atomic access to a variable, I strongly
> suggest ACCESS_ONCE() or something similar even if you cannot see how
> the compiler can mess you up, especially in cases involving a lot of
> inline functions.  In this case, the compiler can be looking at quite
> a bit of code and optimizing across the entire mess.

Thank you for your fuller reply, Paul: I should be able to hold that
i386 register pressure example in mind in future (not, of course,
that it would be limited to i386 at all).

> 
> /me wonders what he stepped into with this email thread.  ;-)
> 
> 							Thanx, Paul

Come on, it wasn't that painful, was it?
Just a quick extraction of info ;-)

Thanks,
Hugh
