Path: news.gmane.org!not-for-mail
From: "S, Venkatraman" <svenkatr@ti.com>
Newsgroups: gmane.linux.kernel,gmane.linux.kernel.mmc,gmane.linux.ports.arm.msm
Subject: Re: [PATCH RESEND v8 2/2] mmc: card: Adding support for sanitize in
 eMMC 4.5
Date: Thu, 26 Jul 2012 22:06:49 +0530
Lines: 92
Approved: news@gmane.org
Message-ID: <CANfBPZ_M82Hro_Whq1HY9Z=oqgiLk4N_8BCPcEpUnqRVm-pKGQ@mail.gmail.com>
References: <1343215901-15430-1-git-send-email-ygardi@codeaurora.org> <1343215901-15430-3-git-send-email-ygardi@codeaurora.org>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
X-Trace: dough.gmane.org 1343320646 11583 80.91.229.3 (26 Jul 2012 16:37:26 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Thu, 26 Jul 2012 16:37:26 +0000 (UTC)
Cc: linux-mmc@vger.kernel.org, linux-arm-msm@vger.kernel.org,
	open list <linux-kernel@vger.kernel.org>
To: Yaniv Gardi <ygardi@codeaurora.org>
Original-X-From: linux-kernel-owner@vger.kernel.org Thu Jul 26 18:37:24 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SuR3z-0000m3-Io
	for glk-linux-kernel-3@plane.gmane.org; Thu, 26 Jul 2012 18:37:23 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752404Ab2GZQhN (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Thu, 26 Jul 2012 12:37:13 -0400
Original-Received: from na3sys009aog104.obsmtp.com ([74.125.149.73]:34540 "EHLO
	na3sys009aog104.obsmtp.com" rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1752133Ab2GZQhL (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Thu, 26 Jul 2012 12:37:11 -0400
Original-Received: from mail-ob0-f178.google.com ([209.85.214.178]) (using TLSv1) by na3sys009aob104.postini.com ([74.125.148.12]) with SMTP
	ID DSNKUBFyNvrWj48KXAwziSkkQry3JH0WyhGL@postini.com; Thu, 26 Jul 2012 09:37:11 PDT
Original-Received: by obbwd20 with SMTP id wd20so3721050obb.23
        for <linux-kernel@vger.kernel.org>; Thu, 26 Jul 2012 09:37:09 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type:x-gm-message-state;
        bh=Ku7JZ8UFdZvJ/vQ+I28dtESx7bRU2uK1WkNGUip2efg=;
        b=iWDLRCP1hG5LnLFuh0m5Oa13EIb+ttcVOEiPACdTCW302It9B7/NbchvI31vYYYObl
         F6mDEbkVoKag9fzg+WQwpUoYfvy3nBZ7fiAdtYZaN4xIpx7U9GMfhZkkpVVdTVZzsKj5
         XndPCuPv6xGMcka036BpA8CPMsM8/4RzswtHhE3ayTvcUVlRbtIybYEi6CzegHprKsUz
         7WNJRg9sXo2SLg+z5ZlGjQ9hR0Emfpv60n65pk8Xk3jH/ojfJtDNF4j3QMFTTa0cOarM
         4ryhemRvIzFfP7luk3HK3ozcfKnVIs5gFZjB9E4eKCF34zIvmildyXRcz0n4PHmtLLY/
         V/8g==
Original-Received: by 10.182.2.233 with SMTP id 9mr19456100obx.11.1343320629700; Thu,
 26 Jul 2012 09:37:09 -0700 (PDT)
Original-Received: by 10.182.67.197 with HTTP; Thu, 26 Jul 2012 09:36:49 -0700 (PDT)
In-Reply-To: <1343215901-15430-3-git-send-email-ygardi@codeaurora.org>
X-Gm-Message-State: ALoCoQlUpe96o98yI8LPa5dz7tiurBF2ht3pM3XIyCEZElwBEFvwc37Y2q0NsJlA+0/DI+LsZggH
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1333781 gmane.linux.kernel.mmc:15759 gmane.linux.ports.arm.msm:2889
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1333781>

On Wed, Jul 25, 2012 at 5:01 PM, Yaniv Gardi <ygardi@codeaurora.org> wrote:
> This feature delete the unmap memory region of the eMMC card,
> by writing to a specific register in the EXT_CSD
> unmap region is the memory region that were previously deleted
> (by erase, trim or discard operation)
>
> Signed-off-by: Yaniv Gardi <ygardi@codeaurora.org>
>
> ---
>  drivers/mmc/card/block.c |   72 +++++++++++++++++++++++++++++++++-------------
>  drivers/mmc/card/queue.c |   10 ++++++-
>  include/linux/mmc/host.h |    1 +
>  3 files changed, 62 insertions(+), 21 deletions(-)
>
> diff --git a/drivers/mmc/card/block.c b/drivers/mmc/card/block.c
> index f1c84de..c45ec9f 100644
> --- a/drivers/mmc/card/block.c
> +++ b/drivers/mmc/card/block.c
> @@ -860,10 +860,10 @@ static int mmc_blk_issue_secdiscard_rq(struct mmc_queue *mq,
>  {
>         struct mmc_blk_data *md = mq->data;
>         struct mmc_card *card = md->queue.card;
> -       unsigned int from, nr, arg, trim_arg, erase_arg;
> +       unsigned int from, nr, arg;
>         int err = 0, type = MMC_BLK_SECDISCARD;
>
> -       if (!(mmc_can_secure_erase_trim(card) || mmc_can_sanitize(card))) {
> +       if (!(mmc_can_secure_erase_trim(card))) {
>                 err = -EOPNOTSUPP;
>                 goto out;
>         }
> @@ -871,23 +871,10 @@ static int mmc_blk_issue_secdiscard_rq(struct mmc_queue *mq,
>         from = blk_rq_pos(req);
>         nr = blk_rq_sectors(req);
>
> -       /* The sanitize operation is supported at v4.5 only */
> -       if (mmc_can_sanitize(card)) {
> -               erase_arg = MMC_ERASE_ARG;
> -               trim_arg = MMC_TRIM_ARG;
> -       } else {
> -               erase_arg = MMC_SECURE_ERASE_ARG;
> -               trim_arg = MMC_SECURE_TRIM1_ARG;
> -       }
> -
> -       if (mmc_erase_group_aligned(card, from, nr))
> -               arg = erase_arg;
> -       else if (mmc_can_trim(card))
> -               arg = trim_arg;
> -       else {
> -               err = -EINVAL;
> -               goto out;
> -       }
> +       if (mmc_can_trim(card) && !mmc_erase_group_aligned(card, from, nr))
> +               arg = MMC_SECURE_TRIM1_ARG;
> +       else
> +               arg = MMC_SECURE_ERASE_ARG;
>  retry:
>         if (card->quirks & MMC_QUIRK_INAND_CMD38) {
>                 err = mmc_switch(card, EXT_CSD_CMD_SET_NORMAL,
> @@ -937,6 +924,46 @@ out:
>         return err ? 0 : 1;
>  }
>
> +static int mmc_blk_issue_sanitize_rq(struct mmc_queue *mq,
> +                                     struct request *req)
> +{
> +       struct mmc_blk_data *md = mq->data;
> +       struct mmc_card *card = md->queue.card;
> +       int err = 0;
> +
> +       BUG_ON(!card);
> +       BUG_ON(!card->host);
> +
> +       if (!(mmc_can_sanitize(card) &&
> +            (card->host->caps2 & MMC_CAP2_SANITIZE))) {
> +                       pr_warning("%s: %s - SANITIZE is not supported\n",
> +                                  mmc_hostname(card->host), __func__);
> +                       err = -EOPNOTSUPP;
> +                       goto out;
> +       }
> +
> +       pr_debug("%s: %s - SANITIZE IN PROGRESS...\n",
> +               mmc_hostname(card->host), __func__);
> +
> +       err = mmc_switch(card, EXT_CSD_CMD_SET_NORMAL,
> +                                        EXT_CSD_SANITIZE_START, 1, 0);
> +
Everything else seems to be good overall. But you need some sort of timeout
implementation and handling for SANTIZE. It's not interrupted to
provide way for other commands,
as generic CMD6 timeout doesn't apply.
Currently, the device can be easily DOS'ed by just issuing the IOCTL repeatedly.
