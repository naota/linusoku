Path: news.gmane.org!not-for-mail
From: Simon Glass <sjg-F7+t8E8rja9g9hUCZPvPmw@public.gmane.org>
Newsgroups: gmane.linux.ports.tegra,gmane.linux.kernel,gmane.linux.drivers.devicetree
Subject: Re: [RFC][PATCH v3 1/3] runtime interpreted power sequences
Date: Mon, 30 Jul 2012 12:00:32 +0100
Lines: 182
Approved: news@gmane.org
Message-ID: <CAPnjgZ0H2xrJcL-ytMaX11iYrrhCg7LEM00u_NgEaveM4gHMPw@mail.gmail.com>
References: <1343390750-3642-1-git-send-email-acourbot@nvidia.com>
	<1343390750-3642-2-git-send-email-acourbot@nvidia.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
X-Trace: dough.gmane.org 1343646040 6069 80.91.229.3 (30 Jul 2012 11:00:40 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Mon, 30 Jul 2012 11:00:40 +0000 (UTC)
Cc: Stephen Warren <swarren-DDmLM1+adcrQT0dZR+AlfA@public.gmane.org>,
	Thierry Reding <thierry.reding-RM9K5IK7kjKj5M59NBduVrNAH6kLmebB@public.gmane.org>,
	Grant Likely <grant.likely-s3s/WqlpOiPyB63q8FvJNQ@public.gmane.org>,
	Rob Herring <rob.herring-bsGFqQB8/DxBDgjK7y7TUQ@public.gmane.org>,
	Greg Kroah-Hartman <gregkh-hQyY1W1yCW8ekmWlsbkhG0B+6BGkLq7r@public.gmane.org>,
	Mark Brown <broonie-yzvPICuk2AATkU/dhu1WVueM+bqZidxxQQ4Iyu8u01E@public.gmane.org>,
	Arnd Bergmann <arnd-r2nGTMty4D4@public.gmane.org>, linux-tegra-u79uwXL29TY76Z2rM5mHXA@public.gmane.org,
	linux-kernel-u79uwXL29TY76Z2rM5mHXA@public.gmane.org, linux-fbdev-u79uwXL29TY76Z2rM5mHXA@public.gmane.org,
	devicetree-discuss-uLR06cmDAlY/bJ5BZ2RsiQ@public.gmane.org
To: Alexandre Courbot <acourbot-DDmLM1+adcrQT0dZR+AlfA@public.gmane.org>
Original-X-From: linux-tegra-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org Mon Jul 30 13:00:38 2012
Return-path: <linux-tegra-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>
Envelope-to: glpt-linux-tegra-wOFGN7rlS/M9smdsby/KFg@public.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-tegra-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>)
	id 1SvniG-0000Zc-K2
	for glpt-linux-tegra-wOFGN7rlS/M9smdsby/KFg@public.gmane.org; Mon, 30 Jul 2012 13:00:37 +0200
Original-Received: (majordomo-u79uwXL29TY76Z2rM5mHXA@public.gmane.org) by vger.kernel.org via listexpand
	id S1753224Ab2G3LAf (ORCPT <rfc822;glpt-linux-tegra@m.gmane.org>);
	Mon, 30 Jul 2012 07:00:35 -0400
Original-Received: from mail-yx0-f174.google.com ([209.85.213.174]:44750 "EHLO
	mail-yx0-f174.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753134Ab2G3LAd (ORCPT
	<rfc822;linux-tegra-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>);
	Mon, 30 Jul 2012 07:00:33 -0400
Original-Received: by yenl2 with SMTP id l2so4619549yen.19
        for <linux-tegra-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>; Mon, 30 Jul 2012 04:00:33 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=mime-version:sender:in-reply-to:references:date
         :x-google-sender-auth:message-id:subject:from:to:cc:content-type
         :x-system-of-record;
        bh=CwEWjcG2j70+/5Ln4CbINMmdHND2N0fQ3VVsUxxSQoE=;
        b=d3znl1lxij8P7MYdsYNHsoh+f5HoF4exVl3xOkIzMnC/8ucn2Ygo3Oykeh3ERIrVwL
         U3R7DRRsOrGOKZ1DcDCj0QtY9KKLk1P8BPRLI2eDr68hukSifqM4bUUKHgwQooP172GV
         kiXJd93InNvRvZNv1sJsau+MXB/NpFm2PGPhHZA4zKMzzbzzJ2kj1dJs9Q44RFjFSZkR
         3FJkvOUkEpVJ4opolM5nxYPCJkt4EM72JtVAYsUzTT5uT5DZnHkuy+PH4q+bznwhFalg
         Q2/2Ag/f9OCKelFcchgXwI1SR95iGhxQROD7+FPVRLU/lsWo5zLCWUWilycuFftcfv1M
         ZpMQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=mime-version:sender:in-reply-to:references:date
         :x-google-sender-auth:message-id:subject:from:to:cc:content-type
         :x-system-of-record:x-gm-message-state;
        bh=CwEWjcG2j70+/5Ln4CbINMmdHND2N0fQ3VVsUxxSQoE=;
        b=KWUp9EUPLrmRJLPAErJMU46lkChwWNTuX+PkXs2tKPlrNMqD2OxBd/yVjqWwVTbPqv
         fztn1+lhHT27h0x0QmqLD6K4fbSWLZLT8DLDX2lJtVcGJpm6g5aeV99FkCY6e4TjMeuw
         rHc44ap3iqPRzQIRhad43OspkD2AFcZtuuubSlFnmp/9KO9sPDDCUzm2gBVId3EFQ50f
         f+6o3R831i+WdIPvek4zny2Uw+r9E5HPn0u22ZkWBjoZ3QbNb49niuPfQ5MlJo12yAS0
         JD0g6rIh1QpHVzqRE3rSxuNogqOQJqAFE9jOXzZqX3f4X8esfzMfW3h6LXiarO0p4Eak
         YHPw==
Original-Received: by 10.60.22.201 with SMTP id g9mr16795692oef.8.1343646033013;
        Mon, 30 Jul 2012 04:00:33 -0700 (PDT)
Original-Received: by 10.60.22.201 with SMTP id g9mr16795663oef.8.1343646032792; Mon,
 30 Jul 2012 04:00:32 -0700 (PDT)
Original-Received: by 10.182.52.7 with HTTP; Mon, 30 Jul 2012 04:00:32 -0700 (PDT)
In-Reply-To: <1343390750-3642-2-git-send-email-acourbot-DDmLM1+adcrQT0dZR+AlfA@public.gmane.org>
X-Google-Sender-Auth: CLBU7QDUkQO-oMFIA4wCeUmW6BM
X-System-Of-Record: true
X-Gm-Message-State: ALoCoQl95pL+n8ygyAmP+70Ff4BLrTtzHOeHZZmaooF9kbfl8sbM5JOdpaRCOlPdesI2YcYt9378vOmELIeP1aBuo/sIeiuGQtS+q5gURJp21xEVn/lUJNoiVj2GZ3xqnL5C/+OkChiBRZsXBh/4tpp3ON/2LtKvH3WMmwJzXU84EbvxmV9twwEibjwbk2s6NkYtcVeY4ql2
Original-Sender: linux-tegra-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org
Precedence: bulk
List-ID: <linux-tegra.vger.kernel.org>
X-Mailing-List: linux-tegra-u79uwXL29TY76Z2rM5mHXA@public.gmane.org
Xref: news.gmane.org gmane.linux.ports.tegra:5671 gmane.linux.kernel:1335004 gmane.linux.drivers.devicetree:18772
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1335004>

Hi,

On Fri, Jul 27, 2012 at 1:05 PM, Alexandre Courbot <acourbot-DDmLM1+adcrQT0dZR+AlfA@public.gmane.org> wrote:
> Some device drivers (panel backlights especially) need to follow precise
> sequences for powering on and off, involving gpios, regulators, PWMs
> with a precise powering order and delays to respect between each steps.
> These sequences are board-specific, and do not belong to a particular
> driver - therefore they have been performed by board-specific hook
> functions to far.
>
> With the advent of the device tree and of ARM kernels that are not
> board-tied, we cannot rely on these board-specific hooks anymore but
> need a way to implement these sequences in a portable manner. This patch
> introduces a simple interpreter that can execute such power sequences
> encoded either as platform data or within the device tree.

This all looks very reasonable to me, just a few comments.

>
> Signed-off-by: Alexandre Courbot <acourbot-DDmLM1+adcrQT0dZR+AlfA@public.gmane.org>
> ---
>  Documentation/power/power_seq.txt | 120 +++++++++++++++
>  drivers/base/Kconfig              |   4 +
>  drivers/base/Makefile             |   1 +
>  drivers/base/power_seq.c          | 300 ++++++++++++++++++++++++++++++++++++++
>  include/linux/power_seq.h         | 139 ++++++++++++++++++
>  5 files changed, 564 insertions(+)
>  create mode 100644 Documentation/power/power_seq.txt
>  create mode 100644 drivers/base/power_seq.c
>  create mode 100644 include/linux/power_seq.h
>
> diff --git a/Documentation/power/power_seq.txt b/Documentation/power/power_seq.txt
> new file mode 100644
> index 0000000..aa2ceb5
> --- /dev/null
> +++ b/Documentation/power/power_seq.txt
> @@ -0,0 +1,120 @@
> +Runtime Interpreted Power Sequences
> +-----------------------------------
> +
> +Problem
> +-------
> +One very common board-dependent code is the out-of-driver code that is used to
> +turn a device on or off. For instance, SoC boards very commonly use a GPIO
> +(abstracted to a regulator or not) to control the power supply of a backlight,
> +disabling it when the backlight is not used in order to save power. The GPIO
> +that should be used, however, as well as the exact power sequence that may
> +involve different resources, is board-dependent and thus unknown of the driver.
> +
> +This has been addressed so far by using hooks in the device's platform data that
> +are called whenever the state of the device might reflect a power change. This
> +approach, however, introduces board-dependant code into the kernel and is not
> +compatible with the device tree.
> +
> +The Runtime Interpreted Power Sequences (or power sequences for short) aim at
> +turning this code into platform data or device tree nodes. Power sequences are
> +described using a simple format and run by a simple interpreter whenever needed.
> +This allows to remove the callback mechanism and makes the kernel less
> +board-dependant.
> +
> +Sequences Format
> +----------------
> +Power sequences are a series of sequential steps during which an action is
> +performed on a resource. The supported resources so far are:
> +- GPIOs
> +- Regulators
> +- PWMs
> +
> +Each step designates a resource and the following parameters:
> +- Whether the step should enable or disable the resource,
> +- Delay to wait before performing the action,
> +- Delay to wait after performing the action.
> +
> +Both new resources and parameters can be introduced, but the goal is of course
> +to keep things as simple and compact as possible.
> +
> +The platform data is a simple array of platform_power_seq_step instances, each
> +instance describing a step. The type as well as one of id or gpio members
> +(depending on the type) must be specified. The last step must be of type
> +POWER_SEQ_STOP. Regulator and PWM resources are identified by name. GPIO are
> +identified by number. For example, the following sequence will turn on the
> +"power" regulator of the device, wait 10ms, and set GPIO number 110 to 1:

For the delay, I think milliseconds is reasonable. I suppose there is
no reasonable need for microseconds?

> +
> +struct platform_power_seq_step power_on_seq[] = {
> +       {
> +               .type = POWER_SEQ_REGULATOR,
> +               .id = "power",
> +               .params = {
> +                       .enable = 1,
> +                       .post_delay = 10,
> +               },
> +       },
> +       {
> +               .type = POWER_SEQ_GPIO,
> +               .gpio = 110,
> +               .params = {
> +                       .enable = 1,
> +               },
> +       },
> +       {
> +               .type = POWER_SEQ_STOP,
> +       },
> +};
> +
> +Usage by Drivers and Resources Management
> +-----------------------------------------
> +Power sequences make use of resources that must be properly allocated and
> +managed. The power_seq_build() function takes care of resolving the resources as
> +they are met in the sequence and to allocate them if needed:
> +
> +power_seq *power_seq_build(struct device *dev, power_seq_resources *ress,
> +                          platform_power_seq *pseq);
> +
> +You will need an instance of power_seq_resources to keep track of the resources
> +that are already allocated. On success, the function returns a devm allocated
> +resolved sequence that is ready to be passed to power_seq_run(). In case of
> +failure, and error code is returned.
> +
> +A resolved power sequence returned by power_seq_build can be run by
> +power_run_run():
> +
> +int power_seq_run(struct device *dev, power_seq *seq);
> +
> +It returns 0 if the sequence has successfully been run, or an error code if a
> +problem occured.
> +
> +Finally, some resources that cannot be allocated through devm need to be freed
> +manually. Therefore, be sure to call power_seq_free_resources() in your device
> +remove function:
> +
> +void power_seq_free_resources(power_seq_resources *ress);
> +
> +Device tree
> +-----------
> +All the same, power sequences can be encoded as device tree nodes. The following
> +properties and nodes are equivalent to the platform data defined previously:
> +
> +               power-supply = <&mydevice_reg>;
> +               enable-gpio = <&gpio 6 0>;
> +
> +               power-on-sequence {
> +                       regulator@0 {
> +                               id = "power";

Is there a reason not to put the phandle here, like:

                                   id = <&mydevice_reg>;

(or maybe 'device' instead of id?)

> +                               enable;
> +                               post-delay = <10>;
> +                       };
> +                       gpio@1 {
> +                               id = "enable-gpio";
> +                               enable;
> +                       };
> +               };
> +
> +Note that first, the phandles of the regulator and gpio used in the sequences
> +are defined as properties. Then the sequence references them through the id
> +property of every step. The name of sub-properties defines the type of the step.
> +Valid names are "regulator", "gpio" and "pwm". Steps must be numbered
> +sequentially.

For the regulator and gpio types I think you only have an enable. For
the pwm, what is the intended binding? Is that documented elsewhere?

Also it might be worth mentioning how you get a struct power_seq from
an fdt node, and perhaps given an example of a device which has an
attached node, so we can see how it is referenced from the device
(of_parse_power_seq I think). Do put the sequence inside the device
node or reference it with a phandle?

Finally, should you use typedefs?

Regards,
Simon
