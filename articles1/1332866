Path: news.gmane.org!not-for-mail
From: Stanislav Kinsbursky <skinsbursky@parallels.com>
Newsgroups: gmane.linux.kernel,gmane.linux.nfs,gmane.linux.openvz.devel
Subject: Re: [PATCH v3 03/11] NFS: move per-net callback thread initialization
 to nfs_callback_up_net()
Date: Wed, 25 Jul 2012 14:46:12 +0400
Lines: 213
Approved: news@gmane.org
Message-ID: <500FCE74.8010005@parallels.com>
References: <20120703161844.11911.92996.stgit@localhost.localdomain> <20120703161946.11911.85659.stgit@localhost.localdomain> <20120724214731.GO8570@fieldses.org> <500FC80F.2070403@parallels.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8;
	format=flowed
Content-Transfer-Encoding: QUOTED-PRINTABLE
X-Trace: dough.gmane.org 1343213717 22205 80.91.229.3 (25 Jul 2012 10:55:17 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Wed, 25 Jul 2012 10:55:17 +0000 (UTC)
Cc: "linux-nfs@vger.kernel.org" <linux-nfs@vger.kernel.org>,
	"Trond.Myklebust@netapp.com" <Trond.Myklebust@netapp.com>,
	"linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
	"devel@openvz.org" <devel@openvz.org>
To: "J. Bruce Fields" <bfields@fieldses.org>
Original-X-From: linux-kernel-owner@vger.kernel.org Wed Jul 25 12:55:15 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with smtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1StzFH-0005nn-0G
	for glk-linux-kernel-3@plane.gmane.org; Wed, 25 Jul 2012 12:55:11 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756504Ab2GYKqb convert rfc822-to-quoted-printable (ORCPT
	<rfc822;glk-linux-kernel-3@m.gmane.org>);
	Wed, 25 Jul 2012 06:46:31 -0400
Original-Received: from relay.parallels.com ([195.214.232.42]:42472 "EHLO
	relay.parallels.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1756482Ab2GYKqa convert rfc822-to-8bit (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Wed, 25 Jul 2012 06:46:30 -0400
Original-Received: from msk-exch1.sw.swsoft.com ([10.30.1.231] helo=mail.sw.ru)
	by relay.parallels.com with esmtps (TLSv1:RC4-MD5:128)
	(Exim 4.77)
	(envelope-from <skinsbursky@parallels.com>)
	id 1Stz6h-0005tp-Gr; Wed, 25 Jul 2012 14:46:19 +0400
Original-Received: from [10.30.20.35] (10.30.20.35) by mail.sw.ru (10.30.1.231) with
 Microsoft SMTP Server (TLS) id 8.3.213.0; Wed, 25 Jul 2012 14:46:19 +0400
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:13.0) Gecko/20120615 Thunderbird/13.0.1
In-Reply-To: <500FC80F.2070403@parallels.com>
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1332866 gmane.linux.nfs:51100 gmane.linux.openvz.devel:1879
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1332866>

25.07.2012 14:18, Stanislav Kinsbursky =D0=BF=D0=B8=D1=88=D0=B5=D1=82:
> 25.07.2012 01:47, J. Bruce Fields =D0=BF=D0=B8=D1=88=D0=B5=D1=82:
>> On Tue, Jul 03, 2012 at 08:19:46PM +0400, Stanislav Kinsbursky wrote=
:
>>> This new function in now called before nfs_minorversion_callback_sv=
c_setup()).
>>>
>>> Also few small changes:
>>> 1) current network namespace in nfs_callback_up() was replaced by t=
ransport net.
>>> 2) svc_shutdown_net() was moved prior to callback usage counter dec=
rement
>>> (because in case of per-net data allocation faulure svc_shutdown_ne=
t() have to
>>> be skipped).
>>>
>>> Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
>>> ---
>>>    fs/nfs/callback.c |  125 +++++++++++++++++++++++++++++++++------=
--------------
>>>    fs/nfs/client.c   |    2 -
>>>    2 files changed, 79 insertions(+), 48 deletions(-)
>>>
>>> diff --git a/fs/nfs/callback.c b/fs/nfs/callback.c
>>> index f8d0c21..b61ed61 100644
>>> --- a/fs/nfs/callback.c
>>> +++ b/fs/nfs/callback.c
>>> @@ -63,6 +63,32 @@ static struct kernel_param_ops param_ops_portnr =
=3D {
>>>
>>>    module_param_named(callback_tcpport, nfs_callback_set_tcpport, p=
ortnr, 0644);
>>>
>>> +static int nfs4_callback_up_net(struct svc_serv *serv, struct net =
*net)
>>> +{
>>> +	int ret;
>>> +
>>> +	ret =3D svc_create_xprt(serv, "tcp", net, PF_INET,
>>> +				nfs_callback_set_tcpport, SVC_SOCK_ANONYMOUS);
>>> +	if (ret <=3D 0)
>>> +		goto out_err;
>>> +	nfs_callback_tcpport =3D ret;
>>> +	dprintk("NFS: Callback listener port =3D %u (af %u, net %p)\n",
>>> +			nfs_callback_tcpport, PF_INET, net);
>>> +
>>> +	ret =3D svc_create_xprt(serv, "tcp", net, PF_INET6,
>>> +				nfs_callback_set_tcpport, SVC_SOCK_ANONYMOUS);
>>> +	if (ret > 0) {
>>> +		nfs_callback_tcpport6 =3D ret;
>>> +		dprintk("NFS: Callback listener port =3D %u (af %u, net %p)\n",
>>> +				nfs_callback_tcpport6, PF_INET6, net);
>>> +	} else if (ret !=3D -EAFNOSUPPORT)
>>> +		goto out_err;
>>> +	return 0;
>>> +
>>> +out_err:
>>> +	return (ret) ? ret : -ENOMEM;
>>> +}
>>> +
>>>    /*
>>>     * This is the NFSv4 callback kernel thread.
>>>     */
>>> @@ -104,36 +130,21 @@ nfs4_callback_svc(void *vrqstp)
>>>    static struct svc_rqst *
>>>    nfs4_callback_up(struct svc_serv *serv, struct rpc_xprt *xprt)
>>>    {
>>> -	int ret;
>>> -
>>> -	ret =3D svc_create_xprt(serv, "tcp", &init_net, PF_INET,
>>> -				nfs_callback_set_tcpport, SVC_SOCK_ANONYMOUS);
>>> -	if (ret <=3D 0)
>>> -		goto out_err;
>>> -	nfs_callback_tcpport =3D ret;
>>> -	dprintk("NFS: Callback listener port =3D %u (af %u)\n",
>>> -			nfs_callback_tcpport, PF_INET);
>>> -
>>> -	ret =3D svc_create_xprt(serv, "tcp", &init_net, PF_INET6,
>>> -				nfs_callback_set_tcpport, SVC_SOCK_ANONYMOUS);
>>> -	if (ret > 0) {
>>> -		nfs_callback_tcpport6 =3D ret;
>>> -		dprintk("NFS: Callback listener port =3D %u (af %u)\n",
>>> -				nfs_callback_tcpport6, PF_INET6);
>>> -	} else if (ret =3D=3D -EAFNOSUPPORT)
>>> -		ret =3D 0;
>>> -	else
>>> -		goto out_err;
>>> -
>>>    	return svc_prepare_thread(serv, &serv->sv_pools[0], NUMA_NO_NOD=
E);
>>> -
>>> -out_err:
>>> -	if (ret =3D=3D 0)
>>> -		ret =3D -ENOMEM;
>>> -	return ERR_PTR(ret);
>>>    }
>>>
>>>    #if defined(CONFIG_NFS_V4_1)
>>> +static int nfs41_callback_up_net(struct svc_serv *serv, struct net=
 *net)
>>> +{
>>> +	/*
>>> +	 * Create an svc_sock for the back channel service that shares th=
e
>>> +	 * fore channel connection.
>>> +	 * Returns the input port (0) and sets the svc_serv bc_xprt on su=
ccess
>>> +	 */
>>> +	return svc_create_xprt(serv, "tcp-bc", net, PF_INET, 0,
>>> +			      SVC_SOCK_ANONYMOUS);
>>> +}
>>> +
>>>    /*
>>>     * The callback service for NFSv4.1 callbacks
>>>     */
>>> @@ -176,19 +187,6 @@ static struct svc_rqst *
>>>    nfs41_callback_up(struct svc_serv *serv, struct rpc_xprt *xprt)
>>>    {
>>>    	struct svc_rqst *rqstp;
>>> -	int ret;
>>> -
>>> -	/*
>>> -	 * Create an svc_sock for the back channel service that shares th=
e
>>> -	 * fore channel connection.
>>> -	 * Returns the input port (0) and sets the svc_serv bc_xprt on su=
ccess
>>> -	 */
>>> -	ret =3D svc_create_xprt(serv, "tcp-bc", &init_net, PF_INET, 0,
>>> -			      SVC_SOCK_ANONYMOUS);
>>> -	if (ret < 0) {
>>> -		rqstp =3D ERR_PTR(ret);
>>> -		goto out;
>>> -	}
>>>
>>>    	/*
>>>    	 * Save the svc_serv in the transport so that it can
>>> @@ -204,7 +202,6 @@ nfs41_callback_up(struct svc_serv *serv, struct=
 rpc_xprt *xprt)
>>>    		svc_xprt_put(serv->sv_bc_xprt);
>>>    		serv->sv_bc_xprt =3D NULL;
>>>    	}
>>> -out:
>>>    	dprintk("--> %s return %ld\n", __func__,
>>>    		IS_ERR(rqstp) ? PTR_ERR(rqstp) : 0);
>>>    	return rqstp;
>>> @@ -228,6 +225,11 @@ static inline void nfs_callback_bc_serv(u32 mi=
norversion, struct rpc_xprt *xprt,
>>>    		xprt->bc_serv =3D cb_info->serv;
>>>    }
>>>    #else
>>> +static int nfs41_callback_up_net(struct svc_serv *serv, struct net=
 *net)
>>> +{
>>> +	return 0;
>>> +}
>>> +
>>>    static inline int nfs_minorversion_callback_svc_setup(u32 minorv=
ersion,
>>>    		struct svc_serv *serv, struct rpc_xprt *xprt,
>>>    		struct svc_rqst **rqstpp, int (**callback_svc)(void *vrqstp))
>>> @@ -241,6 +243,36 @@ static inline void nfs_callback_bc_serv(u32 mi=
norversion, struct rpc_xprt *xprt,
>>>    }
>>>    #endif /* CONFIG_NFS_V4_1 */
>>>
>>> +static int nfs_callback_up_net(int minorversion, struct svc_serv *=
serv, struct net *net)
>>> +{
>>> +	int ret;
>>> +
>>> +	dprintk("NFS: create per-net callback data; net=3D%p\n", net);
>>> +
>>> +	ret =3D svc_bind(serv, net);
>>> +	if (ret < 0) {
>>> +		printk(KERN_WARNING "NFS: bind callback service failed\n");
>>> +		goto err_bind;
>>> +	}
>>> +
>>> +	if (minorversion) {
>>> +		ret =3D nfs41_callback_up_net(serv, net);
>>> +		if (ret < 0)
>>> +			goto err_socks;
>>> +	}
>>> +
>>> +	if (ret =3D=3D 0)
>>> +		ret =3D nfs4_callback_up_net(serv, net);
>>
>> So in the minorversion 1 case, and in the absence of errors, you set=
 up
>> both the 4.1 and 4.0 callback xprts?
>>
>> That doesn't look right.  You should need only one or the other.
>>
>
> Thanks for the catch, Bruce.
> I'll fix it and resend.
> But currently I'm thinking, that for 3.6 kernel probably it's better =
to push
> this code through Trond's tree.
>

No, Bruce. It works fine. nfs41_callback_up_net() will return either ne=
gative=20
value of port number. I.e. nfs4_callback_up_net() won't be called.
But this looks confusing.
I'll rewrite this part.

--=20
Best regards,
Stanislav Kinsbursky


