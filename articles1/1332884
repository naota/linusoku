Path: news.gmane.org!not-for-mail
From: Boaz Harrosh <bharrosh-C4P08NqkoRlBDgjK7y7TUQ@public.gmane.org>
Newsgroups: gmane.linux.kernel.bcache.devel,gmane.linux.kernel,gmane.linux.kernel.device-mapper.devel,gmane.linux.kernel.drbd.devel
Subject: Re: [PATCH v4 03/12] block: Add bio_reset()
Date: Wed, 25 Jul 2012 14:19:27 +0300
Lines: 91
Approved: news@gmane.org
Message-ID: <500FD63F.7050501@panasas.com>
References: <1343160689-12378-1-git-send-email-koverstreet@google.com> <1343160689-12378-4-git-send-email-koverstreet@google.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1343215201 3204 80.91.229.3 (25 Jul 2012 11:20:01 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Wed, 25 Jul 2012 11:20:01 +0000 (UTC)
Cc: <linux-bcache-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>, <linux-kernel-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>,
	<dm-devel-H+wXaHxf7aLQT0dZR+AlfA@public.gmane.org>, <tj-DgEjT+Ai2ygdnm+yROfE0A@public.gmane.org>, <axboe-tSWWG44O7X1aa/9Udqfwiw@public.gmane.org>,
	<agk-H+wXaHxf7aLQT0dZR+AlfA@public.gmane.org>, <neilb-l3A5Bk7waGM@public.gmane.org>, <drbd-dev-cunTk1MwBs8qoQakbn7OcQ@public.gmane.org>,
	<vgoyal-H+wXaHxf7aLQT0dZR+AlfA@public.gmane.org>, <mpatocka-H+wXaHxf7aLQT0dZR+AlfA@public.gmane.org>, <sage-BnTBU8nroG7k1uMJSBkQmQ@public.gmane.org>,
	<yehuda-L5o5AL9CYN0tUFlbccrkMA@public.gmane.org>
To: Kent Overstreet <koverstreet-hpIqsD4AKlfQT0dZR+AlfA@public.gmane.org>
Original-X-From: linux-bcache-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org Wed Jul 25 13:19:57 2012
Return-path: <linux-bcache-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>
Envelope-to: glbd-linux-bcache-wOFGN7rlS/M9smdsby/KFg@public.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-bcache-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>)
	id 1StzdE-0007Tq-Q3
	for glbd-linux-bcache-wOFGN7rlS/M9smdsby/KFg@public.gmane.org; Wed, 25 Jul 2012 13:19:57 +0200
Original-Received: (majordomo-u79uwXL29TY76Z2rM5mHXA@public.gmane.org) by vger.kernel.org via listexpand
	id S1756468Ab2GYLTz (ORCPT <rfc822;glbd-linux-bcache@m.gmane.org>);
	Wed, 25 Jul 2012 07:19:55 -0400
Original-Received: from natasha.panasas.com ([67.152.220.90]:34298 "EHLO
	natasha.panasas.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1756422Ab2GYLTz (ORCPT
	<rfc822;linux-bcache-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>);
	Wed, 25 Jul 2012 07:19:55 -0400
Original-Received: from zenyatta.panasas.com (zenyatta.int.panasas.com [172.17.28.63])
	by natasha.panasas.com (8.13.1/8.13.1) with ESMTP id q6PBJhek025213;
	Wed, 25 Jul 2012 07:19:43 -0400
Original-Received: from [172.17.142.14] (172.17.142.14) by zenyatta.int.panasas.com
 (172.17.28.63) with Microsoft SMTP Server (TLS) id 14.1.355.2; Wed, 25 Jul
 2012 07:18:48 -0400
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:8.0) Gecko/20111113 Thunderbird/8.0
In-Reply-To: <1343160689-12378-4-git-send-email-koverstreet-hpIqsD4AKlfQT0dZR+AlfA@public.gmane.org>
Original-Sender: linux-bcache-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org
Precedence: bulk
List-ID: <linux-bcache.vger.kernel.org>
X-Mailing-List: linux-bcache-u79uwXL29TY76Z2rM5mHXA@public.gmane.org
Xref: news.gmane.org gmane.linux.kernel.bcache.devel:635 gmane.linux.kernel:1332884 gmane.linux.kernel.device-mapper.devel:16417 gmane.linux.kernel.drbd.devel:2039
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1332884>

On 07/24/2012 11:11 PM, Kent Overstreet wrote:

> Reusing bios is something that's been highly frowned upon in the past,
> but driver code keeps doing it anyways. If it's going to happen anyways,
> we should provide a generic method.
> 
> This'll help with getting rid of bi_destructor - drivers/block/pktcdvd.c
> was open coding it, by doing a bio_init() and resetting bi_destructor.
> 
> Signed-off-by: Kent Overstreet <koverstreet-hpIqsD4AKlfQT0dZR+AlfA@public.gmane.org>
> ---
>  fs/bio.c                  |   10 ++++++++++
>  include/linux/bio.h       |    1 +
>  include/linux/blk_types.h |    6 ++++++
>  3 files changed, 17 insertions(+), 0 deletions(-)
> 
> diff --git a/fs/bio.c b/fs/bio.c
> index 1c6c8b7..252e253 100644
> --- a/fs/bio.c
> +++ b/fs/bio.c
> @@ -261,6 +261,16 @@ void bio_init(struct bio *bio)
>  }
>  EXPORT_SYMBOL(bio_init);
>  
> +void bio_reset(struct bio *bio)
> +{
> +	/* Clear all flags below BIO_OWNS_VEC */
> +	unsigned long flags = bio->bi_flags & (~0UL << BIO_OWNS_VEC);
> +


Hey I have not seen these FLAGS thing before. Are these new?

Anyway. Please NO!!! for one you need to put a big fat comment
over at flags definitions. And two what happens when one adds
a new flag. Is it reset or not reset?

I'd rather you define a flags mask for those that need to be
preserved, at header, plus a comment that any needed-to-be-preserved
cross init flags, must be added to the mask.

Never, ever, hide such crap so deep in the code.

Boaz

> +	memset(bio, 0, BIO_RESET_BYTES);
> +	bio->bi_flags = flags|(1 << BIO_UPTODATE);
> +}
> +EXPORT_SYMBOL(bio_reset);
> +
>  /**
>   * bio_alloc_bioset - allocate a bio for I/O
>   * @gfp_mask:   the GFP_ mask given to the slab allocator
> diff --git a/include/linux/bio.h b/include/linux/bio.h
> index 2643589..ba60319 100644
> --- a/include/linux/bio.h
> +++ b/include/linux/bio.h
> @@ -226,6 +226,7 @@ extern void __bio_clone(struct bio *, struct bio *);
>  extern struct bio *bio_clone(struct bio *, gfp_t);
>  
>  extern void bio_init(struct bio *);
> +extern void bio_reset(struct bio *);
>  
>  extern int bio_add_page(struct bio *, struct page *, unsigned int,unsigned int);
>  extern int bio_add_pc_page(struct request_queue *, struct bio *, struct page *,
> diff --git a/include/linux/blk_types.h b/include/linux/blk_types.h
> index 293547e..40411e2 100644
> --- a/include/linux/blk_types.h
> +++ b/include/linux/blk_types.h
> @@ -59,6 +59,10 @@ struct bio {
>  	unsigned int		bi_seg_front_size;
>  	unsigned int		bi_seg_back_size;
>  
> +	/*
> +	 * Everything starting with bi_max_vecs will be preserved by bio_reset()
> +	 */
> +
>  	unsigned int		bi_max_vecs;	/* max bvl_vecs we can hold */
>  
>  	atomic_t		bi_cnt;		/* pin count */
> @@ -93,6 +97,8 @@ struct bio {
>  	struct bio_vec		bi_inline_vecs[0];
>  };
>  
> +#define BIO_RESET_BYTES		offsetof(struct bio, bi_max_vecs)
> +
>  /*
>   * bio flags
>   */


