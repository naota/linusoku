Path: news.gmane.org!not-for-mail
From: Kent Overstreet <koverstreet-hpIqsD4AKlfQT0dZR+AlfA@public.gmane.org>
Newsgroups: gmane.linux.kernel.bcache.devel,gmane.linux.kernel,gmane.linux.kernel.device-mapper.devel,gmane.linux.kernel.drbd.devel
Subject: Re: [PATCH v4 03/12] block: Add bio_reset()
Date: Wed, 25 Jul 2012 15:56:20 -0700
Lines: 110
Approved: news@gmane.org
Message-ID: <20120725225620.GA8673@moria.home.lan>
References: <1343160689-12378-1-git-send-email-koverstreet@google.com>
 <1343160689-12378-4-git-send-email-koverstreet@google.com>
 <500FD63F.7050501@panasas.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Trace: dough.gmane.org 1343256997 28946 80.91.229.3 (25 Jul 2012 22:56:37 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Wed, 25 Jul 2012 22:56:37 +0000 (UTC)
Cc: linux-bcache-u79uwXL29TY76Z2rM5mHXA@public.gmane.org, linux-kernel-u79uwXL29TY76Z2rM5mHXA@public.gmane.org,
	dm-devel-H+wXaHxf7aLQT0dZR+AlfA@public.gmane.org, tj-DgEjT+Ai2ygdnm+yROfE0A@public.gmane.org, axboe-tSWWG44O7X1aa/9Udqfwiw@public.gmane.org,
	agk-H+wXaHxf7aLQT0dZR+AlfA@public.gmane.org, neilb-l3A5Bk7waGM@public.gmane.org, drbd-dev-cunTk1MwBs8qoQakbn7OcQ@public.gmane.org,
	vgoyal-H+wXaHxf7aLQT0dZR+AlfA@public.gmane.org, mpatocka-H+wXaHxf7aLQT0dZR+AlfA@public.gmane.org, sage-BnTBU8nroG7k1uMJSBkQmQ@public.gmane.org,
	yehuda-L5o5AL9CYN0tUFlbccrkMA@public.gmane.org
To: Boaz Harrosh <bharrosh-C4P08NqkoRlBDgjK7y7TUQ@public.gmane.org>
Original-X-From: linux-bcache-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org Thu Jul 26 00:56:34 2012
Return-path: <linux-bcache-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>
Envelope-to: glbd-linux-bcache-wOFGN7rlS/M9smdsby/KFg@public.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-bcache-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>)
	id 1SuAVH-0007hn-Ho
	for glbd-linux-bcache-wOFGN7rlS/M9smdsby/KFg@public.gmane.org; Thu, 26 Jul 2012 00:56:28 +0200
Original-Received: (majordomo-u79uwXL29TY76Z2rM5mHXA@public.gmane.org) by vger.kernel.org via listexpand
	id S1752057Ab2GYW40 (ORCPT <rfc822;glbd-linux-bcache@m.gmane.org>);
	Wed, 25 Jul 2012 18:56:26 -0400
Original-Received: from mail-pb0-f46.google.com ([209.85.160.46]:58138 "EHLO
	mail-pb0-f46.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751107Ab2GYW4Z (ORCPT
	<rfc822;linux-bcache-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>);
	Wed, 25 Jul 2012 18:56:25 -0400
Original-Received: by pbbrp8 with SMTP id rp8so2137640pbb.19
        for <linux-bcache-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>; Wed, 25 Jul 2012 15:56:25 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-type:content-disposition:in-reply-to:user-agent;
        bh=p8rz+ETY/e5H8MNO6tgDXRvxTxzLo8MEPPed/Z5q+2w=;
        b=i7Xz50kiAcUQTy8/bnbvdR1w6y3l8feGFvfQiHx3nu4NRUQmAI5G12MBdnx6s69gZQ
         vbtT3L+cCuK3yjYsMzQr9mKwM9WxTkmite4s+5OVyilPzsSCJwncGhwxDWikARxaAh1V
         FPiHwx1Hazv37ZPFauHev5JGUVcECpdYoWJTZpvFV+LhELAO9uCASHItaHk/5IAxhRqm
         8yJNya8Nw+6d1SSmqVEtb4ZX5ZAX+N44UJJIHIe7MCAjS1SvQ+el385zC1KBbqtD8kAx
         GC+W5JMEBSu2Np2GSEzj3oicN2CPOIpqMRWrHUJHFUh7BWWIiUuICQAPWSi5sg38mGdI
         izgg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-type:content-disposition:in-reply-to:user-agent
         :x-gm-message-state;
        bh=p8rz+ETY/e5H8MNO6tgDXRvxTxzLo8MEPPed/Z5q+2w=;
        b=LosTLj1SuCc9NTD1eQaskuiAbdU8T+u0bTQC5NdhifdtWUM/+YNhH7VvlvpEeUJUyn
         zgaTwtTycqfKEBhAKr0ZE0ENUEX+6Ygp11EOeTs2e1SAyY4NSgxEGNsT10PGsNNEdLJm
         AGefd8UNAoKTnArJh0azHiyrjt7ysGWi659lv9EsJWkoeNgUVMjcGzxDvhwGJY5fxpoT
         R4H4uUBhBFh3EiqFzs/ev2w6M1Az7nPYZkM1ZbjLBFKHBazr9ac77K6CAMB+uAqfSe+/
         B8sXnmNX1o6e0SnQN8vHUFjQwuKcbLopRHk+3dmSzoyR1QUaWJ/WTrirrfISo0rwXJbG
         F4gw==
Original-Received: by 10.68.193.196 with SMTP id hq4mr15794851pbc.76.1343256984891;
        Wed, 25 Jul 2012 15:56:24 -0700 (PDT)
Original-Received: by 10.68.193.196 with SMTP id hq4mr15794816pbc.76.1343256984671;
        Wed, 25 Jul 2012 15:56:24 -0700 (PDT)
Original-Received: from moria.home.lan (c-67-188-232-164.hsd1.ca.comcast.net. [67.188.232.164])
        by mx.google.com with ESMTPS id rg10sm15193660pbc.54.2012.07.25.15.56.22
        (version=SSLv3 cipher=OTHER);
        Wed, 25 Jul 2012 15:56:23 -0700 (PDT)
Content-Disposition: inline
In-Reply-To: <500FD63F.7050501-C4P08NqkoRlBDgjK7y7TUQ@public.gmane.org>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-Gm-Message-State: ALoCoQnLITqrtMVmbNF+xxefnGkq39JkvDIqHwfAo0G9FS/BIE4hA4pRZesde4zFaGff1dMmMTeGPEHINc+usYt3kB2eYFHn7ZOJEMNVquXcS/7eNwC2ByOBY3YduGly/w3edKu3Q66LBBJ047z3+BHyis1TB90611SUAggUeAQXY3UE0Hngo2N1mq39pLLdB7jzyHzWmzWm
Original-Sender: linux-bcache-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org
Precedence: bulk
List-ID: <linux-bcache.vger.kernel.org>
X-Mailing-List: linux-bcache-u79uwXL29TY76Z2rM5mHXA@public.gmane.org
Xref: news.gmane.org gmane.linux.kernel.bcache.devel:641 gmane.linux.kernel:1333314 gmane.linux.kernel.device-mapper.devel:16426 gmane.linux.kernel.drbd.devel:2046
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1333314>

On Wed, Jul 25, 2012 at 02:19:27PM +0300, Boaz Harrosh wrote:
> On 07/24/2012 11:11 PM, Kent Overstreet wrote:
> 
> > Reusing bios is something that's been highly frowned upon in the past,
> > but driver code keeps doing it anyways. If it's going to happen anyways,
> > we should provide a generic method.
> > 
> > This'll help with getting rid of bi_destructor - drivers/block/pktcdvd.c
> > was open coding it, by doing a bio_init() and resetting bi_destructor.
> > 
> > Signed-off-by: Kent Overstreet <koverstreet-hpIqsD4AKlfQT0dZR+AlfA@public.gmane.org>
> > ---
> >  fs/bio.c                  |   10 ++++++++++
> >  include/linux/bio.h       |    1 +
> >  include/linux/blk_types.h |    6 ++++++
> >  3 files changed, 17 insertions(+), 0 deletions(-)
> > 
> > diff --git a/fs/bio.c b/fs/bio.c
> > index 1c6c8b7..252e253 100644
> > --- a/fs/bio.c
> > +++ b/fs/bio.c
> > @@ -261,6 +261,16 @@ void bio_init(struct bio *bio)
> >  }
> >  EXPORT_SYMBOL(bio_init);
> >  
> > +void bio_reset(struct bio *bio)
> > +{
> > +	/* Clear all flags below BIO_OWNS_VEC */
> > +	unsigned long flags = bio->bi_flags & (~0UL << BIO_OWNS_VEC);
> > +
> 
> 
> Hey I have not seen these FLAGS thing before. Are these new?
> 
> Anyway. Please NO!!! for one you need to put a big fat comment
> over at flags definitions. And two what happens when one adds
> a new flag. Is it reset or not reset?
> 
> I'd rather you define a flags mask for those that need to be
> preserved, at header, plus a comment that any needed-to-be-preserved
> cross init flags, must be added to the mask.

Yeah, that's a much better idea. Do you think this is clear enough?

diff --git a/fs/bio.c b/fs/bio.c
index 1c6c8b7..c7f3442 100644
--- a/fs/bio.c
+++ b/fs/bio.c
@@ -261,6 +261,15 @@ void bio_init(struct bio *bio)
 }
 EXPORT_SYMBOL(bio_init);
 
+void bio_reset(struct bio *bio)
+{
+	unsigned long flags = bio->bi_flags & (~0UL << BIO_RESET_BITS);
+
+	memset(bio, 0, BIO_RESET_BYTES);
+	bio->bi_flags = flags|(1 << BIO_UPTODATE);
+}
+EXPORT_SYMBOL(bio_reset);
+
 /**
  * bio_alloc_bioset - allocate a bio for I/O
  * @gfp_mask:   the GFP_ mask given to the slab allocator
diff --git a/include/linux/bio.h b/include/linux/bio.h
index 2643589..ba60319 100644
--- a/include/linux/bio.h
+++ b/include/linux/bio.h
@@ -226,6 +226,7 @@ extern void __bio_clone(struct bio *, struct bio *);
 extern struct bio *bio_clone(struct bio *, gfp_t);
 
 extern void bio_init(struct bio *);
+extern void bio_reset(struct bio *);
 
 extern int bio_add_page(struct bio *, struct page *, unsigned int,unsigned int);
 extern int bio_add_pc_page(struct request_queue *, struct bio *, struct page *,
diff --git a/include/linux/blk_types.h b/include/linux/blk_types.h
index 293547e..769799f 100644
--- a/include/linux/blk_types.h
+++ b/include/linux/blk_types.h
@@ -59,6 +59,10 @@ struct bio {
 	unsigned int		bi_seg_front_size;
 	unsigned int		bi_seg_back_size;
 
+	/*
+	 * Everything starting with bi_max_vecs will be preserved by bio_reset()
+	 */
+
 	unsigned int		bi_max_vecs;	/* max bvl_vecs we can hold */
 
 	atomic_t		bi_cnt;		/* pin count */
@@ -93,6 +97,8 @@ struct bio {
 	struct bio_vec		bi_inline_vecs[0];
 };
 
+#define BIO_RESET_BYTES		offsetof(struct bio, bi_max_vecs)
+
 /*
  * bio flags
  */
@@ -108,6 +114,9 @@ struct bio {
 #define BIO_FS_INTEGRITY 9	/* fs owns integrity data, not block layer */
 #define BIO_QUIET	10	/* Make BIO Quiet */
 #define BIO_MAPPED_INTEGRITY 11/* integrity metadata has been remapped */
+
+#define BIO_RESET_BITS 12	/* Flags starting here get preserved by bio_reset() */
+
 #define bio_flagged(bio, flag)	((bio)->bi_flags & (1 << (flag)))
 
 /*
