Path: news.gmane.org!not-for-mail
From: Rob Clark <rob.clark@linaro.org>
Newsgroups: gmane.linux.kernel.mm,gmane.linux.kernel,gmane.linux.ports.arm.kernel,gmane.comp.video.dri.devel,gmane.linux.drivers.video-input-infrastructure
Subject: Re: [PATCH 2/2] dma-buf: add helpers for attacher dma-parms
Date: Fri, 20 Jul 2012 11:39:26 -0500
Lines: 146
Approved: news@gmane.org
Message-ID: <CAF6AEGs2evpga=h1+0L0sz+vG1czHff83z13WxdBv+xvcxQKxw@mail.gmail.com>
References: <1342715014-5316-1-git-send-email-rob.clark@linaro.org>
	<1342715014-5316-3-git-send-email-rob.clark@linaro.org>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
X-Trace: dough.gmane.org 1342802376 11001 80.91.229.3 (20 Jul 2012 16:39:36 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Fri, 20 Jul 2012 16:39:36 +0000 (UTC)
Cc: patches@linaro.org, linux@arm.linux.org.uk, arnd@arndb.de, 
	jesse.barker@linaro.org, m.szyprowski@samsung.com, daniel@ffwll.ch, 
	t.stanislaws@samsung.com, sumit.semwal@ti.com, 
	maarten.lankhorst@canonical.com, Rob Clark <rob@ti.com>
To: linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org, 
	linux-mm@kvack.org, linaro-mm-sig@lists.linaro.org, 
	dri-devel@lists.freedesktop.org, linux-media@vger.kernel.org
Original-X-From: owner-linux-mm@kvack.org Fri Jul 20 18:39:33 2012
Return-path: <owner-linux-mm@kvack.org>
Envelope-to: glkm-linux-mm-2@m.gmane.org
Original-Received: from kanga.kvack.org ([205.233.56.17])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <owner-linux-mm@kvack.org>)
	id 1SsGEk-0002w9-A1
	for glkm-linux-mm-2@m.gmane.org; Fri, 20 Jul 2012 18:39:30 +0200
Original-Received: by kanga.kvack.org (Postfix)
	id 25BEB6B0069; Fri, 20 Jul 2012 12:39:29 -0400 (EDT)
Delivered-To: linux-mm-outgoing@kvack.org
Original-Received: by kanga.kvack.org (Postfix, from userid 40)
	id 1265F6B006C; Fri, 20 Jul 2012 12:39:28 -0400 (EDT)
X-Original-To: int-list-linux-mm@kvack.org
Delivered-To: int-list-linux-mm@kvack.org
Original-Received: by kanga.kvack.org (Postfix, from userid 63042)
	id D026E6B006E; Fri, 20 Jul 2012 12:39:28 -0400 (EDT)
X-Original-To: linux-mm@kvack.org
Delivered-To: linux-mm@kvack.org
Original-Received: from psmtp.com (na3sys010amx128.postini.com [74.125.245.128])
	by kanga.kvack.org (Postfix) with SMTP id 1E30D6B0069
	for <linux-mm@kvack.org>; Fri, 20 Jul 2012 12:39:28 -0400 (EDT)
Original-Received: from mail-vc0-f169.google.com ([209.85.220.169]) (using TLSv1) by na3sys010amx128.postini.com ([74.125.244.10]) with SMTP;
	Fri, 20 Jul 2012 16:39:28 GMT
Original-Received: by vcbfl10 with SMTP id fl10so3937415vcb.14
        for <linux-mm@kvack.org>; Fri, 20 Jul 2012 09:39:27 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:sender:in-reply-to:references:date
         :x-google-sender-auth:message-id:subject:from:to:cc:content-type;
        bh=zwd+gMbsAx9MLBpquNUhD+aMuUbpyjAaGTcTBRXHqC0=;
        b=DOqTZq7Gao9HeeWJlp8ZYxQX13yMCybLxJ5xY4eONg2Qax/GZlz4/Qrz9Xz3JjJI7K
         6M2i5O2uFYvojmL/1000O3qvCRN2UZFZOAV7GDlQ6rkWETsgiOpn4mY6sfzoBgsCti0n
         rIyRoR+mTF6aQKST6JbN7l2lCdsGrGikIjlW1triicn+a+2sKa90k74RDaf2yb7deMaP
         030EW0eIgrBnQptzyTMQsCAP6tWss8m+pgoERnJdkFVk8mM9u8s4JXCDmW2bAxpE+TVs
         CkZRLlof9VAneHWxHBQ6xVmN2GQiDKII2tHtVe37YrEySv2bRGJ3ZQ2KrG2IABo8Pfof
         9msw==
Original-Received: by 10.52.73.225 with SMTP id o1mr4443329vdv.77.1342802366791; Fri,
 20 Jul 2012 09:39:26 -0700 (PDT)
Original-Received: by 10.220.108.197 with HTTP; Fri, 20 Jul 2012 09:39:26 -0700 (PDT)
In-Reply-To: <1342715014-5316-3-git-send-email-rob.clark@linaro.org>
X-Google-Sender-Auth: EiNFggbcoZn5S2ebg0EXa0GpGBQ
X-pstn-neptune: 0/0/0.00/0
X-pstn-levels: (S:99.90000/99.90000 CV:99.9000 FC:95.5390 LC:95.5390 R:95.9108 P:95.9108 M:97.0282 C:98.6951 )
X-pstn-dkim: 1 skipped:not-enabled
X-pstn-settings: 3 (1.0000:0.1000) s cv GT3 gt2 gt1 r p m c 
X-pstn-addresses: from <rob.clark@linaro.org> [db-null] 
X-Bogosity: Ham, tests=bogofilter, spamicity=0.000000, version=1.2.2
Original-Sender: owner-linux-mm@kvack.org
Precedence: bulk
X-Loop: owner-majordomo@kvack.org
List-ID: <linux-mm.kvack.org>
Xref: news.gmane.org gmane.linux.kernel.mm:82793 gmane.linux.kernel:1330942 gmane.linux.ports.arm.kernel:178212 gmane.comp.video.dri.devel:71584 gmane.linux.drivers.video-input-infrastructure:51159
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1330942>

Fyi, Daniel Vetter had suggested on IRC that it would be cleaner to
have a single helper fxn that most-restrictive union of all attached
device's dma_parms.  Really this should include dma_mask and
coherent_dma_mask, I think.  But that touches a lot of other places in
the code.  If no one objects to the cleanup of moving
dma_mask/coherent_dma_mask into dma_parms, I'll do this first.

So anyways, don't consider this patch yet for inclusion, I'll make an
updated one based on dma_parms..

BR,
-R

On Thu, Jul 19, 2012 at 11:23 AM, Rob Clark <rob.clark@linaro.org> wrote:
> From: Rob Clark <rob@ti.com>
>
> Add some helpers to iterate through all attachers and get the most
> restrictive segment size/count/boundary.
>
> Signed-off-by: Rob Clark <rob@ti.com>
> ---
>  drivers/base/dma-buf.c  |   63 +++++++++++++++++++++++++++++++++++++++++++++++
>  include/linux/dma-buf.h |   19 ++++++++++++++
>  2 files changed, 82 insertions(+)
>
> diff --git a/drivers/base/dma-buf.c b/drivers/base/dma-buf.c
> index 24e88fe..757ee20 100644
> --- a/drivers/base/dma-buf.c
> +++ b/drivers/base/dma-buf.c
> @@ -192,6 +192,69 @@ void dma_buf_put(struct dma_buf *dmabuf)
>  EXPORT_SYMBOL_GPL(dma_buf_put);
>
>  /**
> + * dma_buf_max_seg_size - helper for exporters to get the minimum of
> + * all attached device's max segment size
> + */
> +unsigned int dma_buf_max_seg_size(struct dma_buf *dmabuf)
> +{
> +       struct dma_buf_attachment *attach;
> +       unsigned int max = (unsigned int)-1;
> +
> +       if (WARN_ON(!dmabuf))
> +               return 0;
> +
> +       mutex_lock(&dmabuf->lock);
> +       list_for_each_entry(attach, &dmabuf->attachments, node)
> +               max = min(max, dma_get_max_seg_size(attach->dev));
> +       mutex_unlock(&dmabuf->lock);
> +
> +       return max;
> +}
> +EXPORT_SYMBOL_GPL(dma_buf_max_seg_size);
> +
> +/**
> + * dma_buf_max_seg_count - helper for exporters to get the minimum of
> + * all attached device's max segment count
> + */
> +unsigned int dma_buf_max_seg_count(struct dma_buf *dmabuf)
> +{
> +       struct dma_buf_attachment *attach;
> +       unsigned int max = (unsigned int)-1;
> +
> +       if (WARN_ON(!dmabuf))
> +               return 0;
> +
> +       mutex_lock(&dmabuf->lock);
> +       list_for_each_entry(attach, &dmabuf->attachments, node)
> +               max = min(max, dma_get_max_seg_count(attach->dev));
> +       mutex_unlock(&dmabuf->lock);
> +
> +       return max;
> +}
> +EXPORT_SYMBOL_GPL(dma_buf_max_seg_count);
> +
> +/**
> + * dma_buf_get_seg_boundary - helper for exporters to get the most
> + * restrictive segment alignment of all the attached devices
> + */
> +unsigned int dma_buf_get_seg_boundary(struct dma_buf *dmabuf)
> +{
> +       struct dma_buf_attachment *attach;
> +       unsigned int mask = (unsigned int)-1;
> +
> +       if (WARN_ON(!dmabuf))
> +               return 0;
> +
> +       mutex_lock(&dmabuf->lock);
> +       list_for_each_entry(attach, &dmabuf->attachments, node)
> +               mask &= dma_get_seg_boundary(attach->dev);
> +       mutex_unlock(&dmabuf->lock);
> +
> +       return mask;
> +}
> +EXPORT_SYMBOL_GPL(dma_buf_get_seg_boundary);
> +
> +/**
>   * dma_buf_attach - Add the device to dma_buf's attachments list; optionally,
>   * calls attach() of dma_buf_ops to allow device-specific attach functionality
>   * @dmabuf:    [in]    buffer to attach device to.
> diff --git a/include/linux/dma-buf.h b/include/linux/dma-buf.h
> index eb48f38..9533b9b 100644
> --- a/include/linux/dma-buf.h
> +++ b/include/linux/dma-buf.h
> @@ -167,6 +167,10 @@ int dma_buf_fd(struct dma_buf *dmabuf, int flags);
>  struct dma_buf *dma_buf_get(int fd);
>  void dma_buf_put(struct dma_buf *dmabuf);
>
> +unsigned int dma_buf_max_seg_size(struct dma_buf *dmabuf);
> +unsigned int dma_buf_max_seg_count(struct dma_buf *dmabuf);
> +unsigned int dma_buf_get_seg_boundary(struct dma_buf *dmabuf);
> +
>  struct sg_table *dma_buf_map_attachment(struct dma_buf_attachment *,
>                                         enum dma_data_direction);
>  void dma_buf_unmap_attachment(struct dma_buf_attachment *, struct sg_table *,
> @@ -220,6 +224,21 @@ static inline void dma_buf_put(struct dma_buf *dmabuf)
>         return;
>  }
>
> +static inline unsigned int dma_buf_max_seg_size(struct dma_buf *dmabuf)
> +{
> +       return 0;
> +}
> +
> +static inline unsigned int dma_buf_max_seg_count(struct dma_buf *dmabuf)
> +{
> +       return 0;
> +}
> +
> +static inline unsigned int dma_buf_get_seg_boundary(struct dma_buf *dmabuf)
> +{
> +       return 0;
> +}
> +
>  static inline struct sg_table *dma_buf_map_attachment(
>         struct dma_buf_attachment *attach, enum dma_data_direction write)
>  {
> --
> 1.7.9.5
>

--
To unsubscribe, send a message with 'unsubscribe linux-mm' in
the body to majordomo@kvack.org.  For more info on Linux MM,
see: http://www.linux-mm.org/ .
Don't email: <a href=mailto:"dont@kvack.org"> email@kvack.org </a>

