Path: news.gmane.org!not-for-mail
From: Eric Dumazet <eric.dumazet@gmail.com>
Newsgroups: gmane.linux.file-systems,gmane.linux.kernel.device-mapper.devel,gmane.linux.kernel
Subject: Re: [dm-devel] [PATCH 2/3] Introduce percpu rw semaphores
Date: Sun, 29 Jul 2012 12:10:30 +0200
Lines: 110
Approved: news@gmane.org
Message-ID: <1343556630.2626.13257.camel@edumazet-glaptop>
References: <Pine.LNX.4.64.1206272226050.22857@file.rdu.redhat.com>
	 <20120628111541.GB17515@quack.suse.cz>
	 <Pine.LNX.4.64.1207152051490.4240@file.rdu.redhat.com>
	 <x49ipdmyz4q.fsf@segfault.boston.devel.redhat.com>
	 <Pine.LNX.4.64.1207181512530.10923@file.rdu.redhat.com>
	 <x49k3xzq3jc.fsf@segfault.boston.devel.redhat.com>
	 <Pine.LNX.4.64.1207281236230.30415@file.rdu.redhat.com>
	 <Pine.LNX.4.64.1207281240270.30415@file.rdu.redhat.com>
	 <1343508252.2626.13184.camel@edumazet-glaptop>
	 <Pine.LNX.4.64.1207290107460.29910@file.rdu.redhat.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1343556692 27491 80.91.229.3 (29 Jul 2012 10:11:32 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Sun, 29 Jul 2012 10:11:32 +0000 (UTC)
Cc: Jens Axboe <axboe@kernel.dk>,
	Andrea Arcangeli <aarcange@redhat.com>,
	Jan Kara <jack@suse.cz>, dm-devel@redhat.com,
	linux-kernel@vger.kernel.org, Jeff Moyer <jmoyer@redhat.com>,
	Alexander Viro <viro@zeniv.linux.org.uk>,
	kosaki.motohiro@jp.fujitsu.com, linux-fsdevel@vger.kernel.org,
	lwoodman@redhat.com, "Alasdair G. Kergon" <agk@redhat.com>
To: Mikulas Patocka <mpatocka@redhat.com>
Original-X-From: linux-fsdevel-owner@vger.kernel.org Sun Jul 29 12:11:30 2012
Return-path: <linux-fsdevel-owner@vger.kernel.org>
Envelope-to: lnx-linux-fsdevel@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-fsdevel-owner@vger.kernel.org>)
	id 1SvQTB-0001ct-3k
	for lnx-linux-fsdevel@plane.gmane.org; Sun, 29 Jul 2012 12:11:29 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751631Ab2G2KKg (ORCPT <rfc822;lnx-linux-fsdevel@m.gmane.org>);
	Sun, 29 Jul 2012 06:10:36 -0400
Original-Received: from mail-wg0-f44.google.com ([74.125.82.44]:60246 "EHLO
	mail-wg0-f44.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751286Ab2G2KKf (ORCPT
	<rfc822;linux-fsdevel@vger.kernel.org>);
	Sun, 29 Jul 2012 06:10:35 -0400
Original-Received: by wgbdr13 with SMTP id dr13so3997027wgb.1
        for <multiple recipients>; Sun, 29 Jul 2012 03:10:33 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=subject:from:to:cc:in-reply-to:references:content-type:date
         :message-id:mime-version:x-mailer:content-transfer-encoding;
        bh=Z4KAQAH7aAMokpx3etCTtCSAorkcqnaoGbu3YgCatbE=;
        b=kClZEO8OrUKaiUhphhlVuJscc4YnC35W/n1Yqdex9ZQ/J1UaCeBpHRAPApPuWJI182
         hUk/hGce+BaQ3KmkGt9XzMfm0C6z2y79fpKI8XbRxL1Hw5UucS6JNH+WLXmx2BtEBWWv
         QwnZBrfPWSBF9jxaQEqcqJUX4sXVKEAP9UaUhp5uO2JNFvd041IPby7l16KX3qlKxGvq
         JmWXQx9Tun41zc1/TOCFAbsvg9bvTsFkXHnBFInziMLf2COzByriQebNSaRDdCCUYuS1
         0MwyoCM1cd0iLF3FudzGYcWFcu9wUtB/oAPcmE5Dn0uAWx2Dh8VWvfX8FL5RVdVDUgOj
         fTTw==
Original-Received: by 10.180.104.200 with SMTP id gg8mr18493058wib.14.1343556633817;
        Sun, 29 Jul 2012 03:10:33 -0700 (PDT)
Original-Received: from [172.30.42.18] (171.237.66.86.rev.sfr.net. [86.66.237.171])
        by mx.google.com with ESMTPS id eu4sm9574389wib.2.2012.07.29.03.10.31
        (version=SSLv3 cipher=OTHER);
        Sun, 29 Jul 2012 03:10:32 -0700 (PDT)
In-Reply-To: <Pine.LNX.4.64.1207290107460.29910@file.rdu.redhat.com>
X-Mailer: Evolution 2.28.3 
Original-Sender: linux-fsdevel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-fsdevel.vger.kernel.org>
X-Mailing-List: linux-fsdevel@vger.kernel.org
Xref: news.gmane.org gmane.linux.file-systems:66311 gmane.linux.kernel.device-mapper.devel:16445 gmane.linux.kernel:1334714
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1334714>

On Sun, 2012-07-29 at 01:13 -0400, Mikulas Patocka wrote:

> Each cpu should have its own rw semaphore in its cache, so I don't see a 
> problem there.
> 
> When you change block size, all 4096 rw semaphores are locked for write, 
> but changing block size is not a performance sensitive operation.
> 
> > Really you shouldnt use rwlock in a path if this might hurt performance.
> > 
> > RCU is probably a better answer.
> 
> RCU is meaningless here. RCU allows lockless dereference of a pointer. 
> Here the problem is not pointer dereference, the problem is that integer 
> bd_block_size may change.

So add a pointer if you need to. Thats the point.

> 
> > (bdev->bd_block_size should be read exactly once )
> 
> Rewrite all direct and non-direct io code so that it reads block size just 
> once ...


You introduced percpu rw semaphores, thats only incentive for people to
use that infrastructure elsewhere.

And its a big hammer :

sizeof(struct rw_semaphore)=0x70 

You can probably design something needing no more than 4 bytes per cpu,
and this thing could use non locked operations as bonus.

like the following ...

struct percpu_rw_semaphore {
	/* percpu_sem_down_read() use the following in fast path */
	unsigned int __percpu *active_counters;

	unsigned int __percpu *counters;
	struct rw_semaphore	sem; /* used in slow path and by writers */
};

static inline int percpu_sem_init(struct percpu_rw_semaphore *p)
{
	p->counters = alloc_percpu(unsigned int);
	if (!p->counters)
		return -ENOMEM;
	init_rwsem(&p->sem);
	p->active_counters = p->counters;
	return 0;
}


static inline bool percpu_sem_down_read(struct percpu_rw_semaphore *p)
{
	unsigned int __percpu *counters = ACCESS_ONCE(p->active_counters);

	if (counters) {
		this_cpu_inc(*counters);
		return true;
	}
	down_read(&p->sem);
	return false;
}

static inline void percpu_sem_up_read(struct percpu_rw_semaphore *p, bool fastpath)
{
	if (fastpath)
		this_cpu_dec(*p->counters);
	else
		up_read(&p->sem);
}

static inline unsigned int percpu_count(unsigned int *counters)
{
	unsigned int total = 0;
	int cpu;

	for_each_possible_cpu(cpu)
		total += *per_cpu_ptr(counters, cpu);

	return total;
}

static inline void percpu_sem_down_write(struct percpu_rw_semaphore *p)
{
	down_write(&p->sem);
	p->active_counters = NULL;

	while (percpu_count(p->counters))
		schedule();
}

static inline void percpu_sem_up_write(struct percpu_rw_semaphore *p)
{
	p->active_counters = p->counters;
	up_write(&p->sem);
}




--
To unsubscribe from this list: send the line "unsubscribe linux-fsdevel" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

