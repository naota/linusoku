Path: news.gmane.org!not-for-mail
From: Sri Ram Vemulpali <sri.ram.gmu06@gmail.com>
Newsgroups: gmane.linux.kernel,gmane.linux.newbie,gmane.linux.network
Subject: orphan process is causing deadlock in __kernel_vsyscall ()
Date: Wed, 25 Jul 2012 17:14:28 -0400
Lines: 59
Approved: news@gmane.org
Message-ID: <CALyraeOQZ+FPTqaOk6XjHsZwwCfNuo2XLo6bhw44maSEkDf7tA@mail.gmail.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
X-Trace: dough.gmane.org 1343250880 15806 80.91.229.3 (25 Jul 2012 21:14:40 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Wed, 25 Jul 2012 21:14:40 +0000 (UTC)
To: linux-kernel-mail <linux-kernel@vger.kernel.org>,
	linux-newbie@vger.kernel.org, linux-netdev <netdev@vger.kernel.org>
Original-X-From: linux-kernel-owner@vger.kernel.org Wed Jul 25 23:14:39 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1Su8ul-0005vb-9a
	for glk-linux-kernel-3@plane.gmane.org; Wed, 25 Jul 2012 23:14:39 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752782Ab2GYVOb (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Wed, 25 Jul 2012 17:14:31 -0400
Original-Received: from mail-yx0-f174.google.com ([209.85.213.174]:58045 "EHLO
	mail-yx0-f174.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751066Ab2GYVOa (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Wed, 25 Jul 2012 17:14:30 -0400
Original-Received: by yenl2 with SMTP id l2so1239326yen.19
        for <multiple recipients>; Wed, 25 Jul 2012 14:14:29 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:date:message-id:subject:from:to:content-type;
        bh=cTjElwqxb/RbOwTZ+nnuYvSvIcRgp1JSa7wf7ZXSchg=;
        b=bGJJ1Fh0c7MUFx7kZg5WfcEbMvwHkJpVDKybYPVZIXFy8ilRYkTeh/ozasxeVMMn/j
         lXmljTQ6vfYTk+aub9r2xTFEZEWHKeJf/uos08HXdxw3MpwcIzcJl8EnU+P3CA1qYJZd
         czHE7WJwGrfl6Gc3DVa/O90gqYCQgoHTh+zVRs98FHknf4+tVW5KzNZOj8M6qW3pzYUz
         aP35gcxcIapjMaRUVLfDwFBF5OUaSsCdbeBvm1TnZaoLr3AbrEV+aOQ5QdBTu4KbF0Oe
         gajFZX1+xIv52PJZaNOgrOzChkfN+s9XAUVlSSfwidO6qcAOoEivFHPR8gXN/IWQ2y/G
         Qa/A==
Original-Received: by 10.43.85.7 with SMTP id am7mr19470522icc.51.1343250868809; Wed,
 25 Jul 2012 14:14:28 -0700 (PDT)
Original-Received: by 10.43.93.70 with HTTP; Wed, 25 Jul 2012 14:14:28 -0700 (PDT)
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1333282 gmane.linux.newbie:9311 gmane.linux.network:238417
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1333282>

Hello All,

I am debugging a problem which I do not know how to solve. I know what
is happening, but cannot find solution to it. If anyone has any
suggestions or solution that would be really grateful and I appreciate
it.

Here is the description.

I have a thread which spawns a child process using fork() and in child
context it execv to shell and parent thread waits on waitpid(). This
child process is nothing but a shell /bin/sh, so that from program I
can create shell and run some commands.
In this shell instance, I run tshark for capturing network traffic. I
have really high traffic going, so system is really busy. All is good
so far, but when I send SIGKILL to child process (shell) from another
thread from same application,
child process (shell) gets terminated and tshark is assigned to
init(1) process as orphan. The parent thread which spawned the child
process unblocks from waitpid() after cleaning child instance and
continues it execution.

Here is the problem:
Once the parent thread resumes from waitpid(), it hits fprintf to
print message "exiting from shell" to console. In here the main thread
gets blocked in __kernel_vsyscall () entered from fprintf. Following
is my stack trace from gdb.
But after some more debugging and found that, if I kill from another
shell "tshark" process which is assigned to init(1) as child, the
parent thread unblocks from __kernel_vsyscall ().

Can anyone tell what is going on, is this related to futex spinning
problem where lock is been held by tshark. How would I approach this
problem?
Or is there a way to kill all child process of a process without
making them orphan. Because when a child process is running at the
time parent is exiting, that child process is assigned to init(1) as
orphan process.
Can this behavior be modified. Please let me know any suggestions and
thoughts. Thanks in advance.

-- 
Regards,
Sri.

(gdb) backtrace
#0  0xffffe424 in __kernel_vsyscall ()
#1  0xb7e6396b in write () from /lib/libc.so.6
#2  0xb7e0c2ef in _IO_new_file_write () from /lib/libc.so.6
#3  0xb7e0bf93 in new_do_write () from /lib/libc.so.6
#4  0xb7e0c296 in _IO_new_do_write () from /lib/libc.so.6
#5  0xb7e0ce20 in _IO_new_file_overflow () from /lib/libc.so.6
#6  0xb7e0c0cd in _IO_new_file_xsputn () from /lib/libc.so.6
#7  0xb7de3634 in vfprintf () from /lib/libc.so.6
#8  0x09ad62a2 in acme_fprintf (stream=0xb7ee2560,
    format=0x9f17694 "shell exited. returning to acli\n")
    at /home/svemulpali/cc/svemulpali_SCOTTY_main/linux/private/common/src/coutOverride.cpp:42
#9  0x094a9345 in vxShellCmdStartWait (syscmd=0x0)
    at /home/svemulpali/cc/svemulpali_SCOTTY_main/linux/private/lib/stub/vxShellLib.cpp:210
