Path: news.gmane.org!not-for-mail
From: "Shilimkar, Santosh" <santosh.shilimkar@ti.com>
Newsgroups: gmane.linux.kernel.cpufreq,gmane.linux.kernel
Subject: Re: [PATCHv2] cpufreq: Fix sysfs deadlock with concurrent
 hotplug/frequency switch
Date: Sat, 21 Jul 2012 22:27:44 +0530
Lines: 81
Approved: news@gmane.org
Message-ID: <CAMQu2gw33jMMW-U6KmkU4xhjBErEjBEDrMaP1t0kkm8aEgRyrQ@mail.gmail.com>
References: <1342808078-5317-1-git-send-email-sboyd@codeaurora.org> <201207202151.49537.rjw@sisk.pl>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
X-Trace: dough.gmane.org 1342889967 25804 80.91.229.3 (21 Jul 2012 16:59:27 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Sat, 21 Jul 2012 16:59:27 +0000 (UTC)
Cc: Stephen Boyd <sboyd@codeaurora.org>, linux-kernel@vger.kernel.org,
	cpufreq@vger.kernel.org, linux-pm@vger.kernel.org
To: "Rafael J. Wysocki" <rjw@sisk.pl>
Original-X-From: cpufreq-owner@vger.kernel.org Sat Jul 21 18:59:19 2012
Return-path: <cpufreq-owner@vger.kernel.org>
Envelope-to: glkc-cpufreq2@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <cpufreq-owner@vger.kernel.org>)
	id 1Ssd1S-0000U5-Qr
	for glkc-cpufreq2@plane.gmane.org; Sat, 21 Jul 2012 18:59:19 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752143Ab2GUQ6x (ORCPT <rfc822;glkc-cpufreq2@m.gmane.org>);
	Sat, 21 Jul 2012 12:58:53 -0400
Original-Received: from na3sys009aog117.obsmtp.com ([74.125.149.242]:59710 "EHLO
	na3sys009aog117.obsmtp.com" rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1752140Ab2GUQ6G (ORCPT
	<rfc822;cpufreq@vger.kernel.org>); Sat, 21 Jul 2012 12:58:06 -0400
Original-Received: from mail-qa0-f50.google.com ([209.85.216.50]) (using TLSv1) by na3sys009aob117.postini.com ([74.125.148.12]) with SMTP
	ID DSNKUArfnevaLr3UId5+hTcUV9v+AhPYw5UW@postini.com; Sat, 21 Jul 2012 09:58:06 PDT
Original-Received: by qafl39 with SMTP id l39so654902qaf.9
        for <cpufreq@vger.kernel.org>; Sat, 21 Jul 2012 09:58:05 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type:x-gm-message-state;
        bh=Mw1dGfiFKY4iQpUrWtBcdRM91YV+XPmgDMYqy9hOvH4=;
        b=Jk2u0gNezgaJCKOqp62X2UHZSOWbVRC5Wg2Mp40U9LbkzYhRzFqvVnHbp/lPNmlHtT
         Z9CYi7MPNU+b0xo7GPQj93/Pze8IM5ZA+cesA1aTLSjrJaRw0Kc8zdVPfEmE2NvS192t
         Gb0bJbhtOXSSmkGqt7RZVG89MatBcgTDZdhcbMau4k4b1tgbRsEG7/RlXNoXwmK9BoeT
         iLaTD3enyQJ8dFUpBE//hXx7lC2rTwwRhw1BlUPIK6f1YdtXTS7eLRq/bhxdLxjlf7mp
         iL247zOK0msy/lMTmArAM/g7An6pvpoFXbTfdFp7UgVZcz5NXK4i2FQ8bBRRnw86TfTh
         8Bzw==
Original-Received: by 10.224.39.131 with SMTP id g3mr15976834qae.57.1342889885016; Sat,
 21 Jul 2012 09:58:05 -0700 (PDT)
Original-Received: by 10.229.251.194 with HTTP; Sat, 21 Jul 2012 09:57:44 -0700 (PDT)
In-Reply-To: <201207202151.49537.rjw@sisk.pl>
X-Gm-Message-State: ALoCoQnCqC7caxhbMTbfqI8vHjG33MvUyElHTLm6hY0EWstJ+65npbSK/OdFP9wHt8vNYT41WUJb
Original-Sender: cpufreq-owner@vger.kernel.org
Precedence: bulk
List-ID: <cpufreq.vger.kernel.org>
X-Mailing-List: cpufreq@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel.cpufreq:8185 gmane.linux.kernel:1331223
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1331223>

On Sat, Jul 21, 2012 at 1:21 AM, Rafael J. Wysocki <rjw@sisk.pl> wrote:
> On Friday, July 20, 2012, Stephen Boyd wrote:
>> Running one program that continuously hotplugs and replugs a cpu
>> concurrently with another program that continuously writes to the
>> scaling_setspeed node eventually deadlocks with:
>>
>> =============================================
>> [ INFO: possible recursive locking detected ]
>> 3.4.0 #37 Tainted: G        W
>> ---------------------------------------------
>> filemonkey/122 is trying to acquire lock:
>>  (s_active#13){++++.+}, at: [<c01a3d28>] sysfs_remove_dir+0x9c/0xb4
>>
>> but task is already holding lock:
>>  (s_active#13){++++.+}, at: [<c01a22f0>] sysfs_write_file+0xe8/0x140
>>
>> other info that might help us debug this:
>>  Possible unsafe locking scenario:
>>
>>        CPU0
>>        ----
>>   lock(s_active#13);
>>   lock(s_active#13);
>>
>>  *** DEADLOCK ***
>>
>>  May be due to missing lock nesting notation
>>
>> 2 locks held by filemonkey/122:
>>  #0:  (&buffer->mutex){+.+.+.}, at: [<c01a2230>] sysfs_write_file+0x28/0x140
>>  #1:  (s_active#13){++++.+}, at: [<c01a22f0>] sysfs_write_file+0xe8/0x140
>>
>> stack backtrace:
>> [<c0014fcc>] (unwind_backtrace+0x0/0x120) from [<c00ca600>] (validate_chain+0x6f8/0x1054)
>> [<c00ca600>] (validate_chain+0x6f8/0x1054) from [<c00cb778>] (__lock_acquire+0x81c/0x8d8)
>> [<c00cb778>] (__lock_acquire+0x81c/0x8d8) from [<c00cb9c0>] (lock_acquire+0x18c/0x1e8)
>> [<c00cb9c0>] (lock_acquire+0x18c/0x1e8) from [<c01a3ba8>] (sysfs_addrm_finish+0xd0/0x180)
>> [<c01a3ba8>] (sysfs_addrm_finish+0xd0/0x180) from [<c01a3d28>] (sysfs_remove_dir+0x9c/0xb4)
>> [<c01a3d28>] (sysfs_remove_dir+0x9c/0xb4) from [<c02d0e5c>] (kobject_del+0x10/0x38)
>> [<c02d0e5c>] (kobject_del+0x10/0x38) from [<c02d0f74>] (kobject_release+0xf0/0x194)
>> [<c02d0f74>] (kobject_release+0xf0/0x194) from [<c0565a98>] (cpufreq_cpu_put+0xc/0x24)
>> [<c0565a98>] (cpufreq_cpu_put+0xc/0x24) from [<c05683f0>] (store+0x6c/0x74)
>> [<c05683f0>] (store+0x6c/0x74) from [<c01a2314>] (sysfs_write_file+0x10c/0x140)
>> [<c01a2314>] (sysfs_write_file+0x10c/0x140) from [<c014af44>] (vfs_write+0xb0/0x128)
>> [<c014af44>] (vfs_write+0xb0/0x128) from [<c014b06c>] (sys_write+0x3c/0x68)
>> [<c014b06c>] (sys_write+0x3c/0x68) from [<c000e0e0>] (ret_fast_syscall+0x0/0x3c)
>>
>> This is because store() in cpufreq.c indirectly calls
>> kobject_get() via cpufreq_cpu_get() and is the last one to call
>> kobject_put() via cpufreq_cpu_put(). Sysfs code should not call
>> kobject_get() or kobject_put() directly (see the comment around
>> sysfs_schedule_callback() for more information).
>>
>> Fix this deadlock by introducing two new functions:
>>
>>       struct cpufreq_policy *cpufreq_cpu_get_sysfs(unsigned int cpu)
>>       void cpufreq_cpu_put_sysfs(struct cpufreq_policy *data)
>>
>> which do the same thing as cpufreq_cpu_{get,put}() but don't call
>> kobject functions.
>>
>> To easily trigger this deadlock you can insert an msleep() with a
>> reasonably large value right after the fail label at the bottom
>> of the store() function in cpufreq.c and then write
>> scaling_setspeed in one task and offline the cpu in another. The
>> first task will hang and be detected by the hung task detector.
>>
>> Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
>
> Thanks, applied to the pm-cpufreq branch of the linux-pm.git tree, will be
> pushed for v3.6.
>
Should this fix go to stable as well ?

Regards
Santosh
--
To unsubscribe from this list: send the line "unsubscribe cpufreq" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

