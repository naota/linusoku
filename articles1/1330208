Path: news.gmane.org!not-for-mail
From: Feng Tang <feng.tang@intel.com>
Newsgroups: gmane.linux.kernel
Subject: Re: [PATCH 1/2] ACPI: replace all acpi_get_table_with_size with
 acpi_get_table
Date: Thu, 19 Jul 2012 15:45:58 +0800
Organization: intel
Lines: 186
Approved: news@gmane.org
Message-ID: <20120719154558.7ba49f50@feng-i7>
References: <1342683564-2245-1-git-send-email-feng.tang@intel.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 8BIT
X-Trace: dough.gmane.org 1342684258 1073 80.91.229.3 (19 Jul 2012 07:50:58 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Thu, 19 Jul 2012 07:50:58 +0000 (UTC)
Cc: <x86@kernel.org>, Yinghai Lu <yinghai@kernel.org>,
	Suresh Siddha <suresh.b.siddha@intel.com>,
	Donald Dutile <ddutile@redhat.com>,
	Alexander Gordeev <agordeev@redhat.com>,
	Bob Moore <robert.moore@intel.com>,
	Lin Ming <ming.m.lin@intel.com>
To: Len Brown <len.brown@intel.com>, <linux-kernel@vger.kernel.org>
Original-X-From: linux-kernel-owner@vger.kernel.org Thu Jul 19 09:50:56 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SrlVe-0007Rw-94
	for glk-linux-kernel-3@plane.gmane.org; Thu, 19 Jul 2012 09:50:54 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753660Ab2GSHuo (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Thu, 19 Jul 2012 03:50:44 -0400
Original-Received: from mga14.intel.com ([143.182.124.37]:29542 "EHLO mga14.intel.com"
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753668Ab2GSHuk convert rfc822-to-8bit (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Thu, 19 Jul 2012 03:50:40 -0400
Original-Received: from azsmga001.ch.intel.com ([10.2.17.19])
  by azsmga102.ch.intel.com with ESMTP; 19 Jul 2012 00:50:39 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="4.71,315,1320652800"; 
   d="scan'208";a="170258155"
Original-Received: from feng-i7.sh.intel.com (HELO feng-i7) ([10.239.14.125])
  by azsmga001.ch.intel.com with ESMTP; 19 Jul 2012 00:50:37 -0700
In-Reply-To: <1342683564-2245-1-git-send-email-feng.tang@intel.com>
X-Mailer: Claws Mail 3.7.6 (GTK+ 2.22.0; i486-pc-linux-gnu)
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1330208
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1330208>


Update the commit log.

Thanks,
Feng

From 633ba8625e9ae1999b94edac514a11ddbc4176ef Mon Sep 17 00:00:00 2001
From: Feng Tang <feng.tang@intel.com>
Date: Thu, 19 Jul 2012 15:10:02 +0800
Subject: [PATCH 1/2] ACPI: Replace acpi_get_table_with_size() with acpi_get_table()

This is a preparation for removing the acpi_get_table_with_size(), as this
function could be well covered by acpi_get_table(), and there is no need
to have both of them to exist.

Signed-off-by: Feng Tang <feng.tang@intel.com>
Cc: x86@kernel.org
---
 arch/x86/kernel/apic/es7000_32.c |    7 +++----
 drivers/acpi/tables.c            |   21 +++++++++------------
 drivers/iommu/dmar.c             |   14 +++++++-------
 3 files changed, 19 insertions(+), 23 deletions(-)

diff --git a/arch/x86/kernel/apic/es7000_32.c b/arch/x86/kernel/apic/es7000_32.c
index 0874799..ae30b39 100644
--- a/arch/x86/kernel/apic/es7000_32.c
+++ b/arch/x86/kernel/apic/es7000_32.c
@@ -242,19 +242,18 @@ static int __init find_unisys_acpi_oem_table(unsigned long *oem_addr)
 {
 	struct acpi_table_header *header = NULL;
 	struct es7000_oem_table *table;
-	acpi_size tbl_size;
 	acpi_status ret;
 	int i = 0;
 
 	for (;;) {
-		ret = acpi_get_table_with_size("OEM1", i++, &header, &tbl_size);
+		ret = acpi_get_table("OEM1", i++, &header);
 		if (!ACPI_SUCCESS(ret))
 			return -1;
 
 		if (!memcmp((char *) &header->oem_id, "UNISYS", 6))
 			break;
 
-		early_acpi_os_unmap_memory(header, tbl_size);
+		early_acpi_os_unmap_memory(header, header->length);
 	}
 
 	table = (void *)header;
@@ -262,7 +261,7 @@ static int __init find_unisys_acpi_oem_table(unsigned long *oem_addr)
 	oem_addrX	= table->OEMTableAddr;
 	oem_size	= table->OEMTableSize;
 
-	early_acpi_os_unmap_memory(header, tbl_size);
+	early_acpi_os_unmap_memory(header, header->length);
 
 	*oem_addr	= (unsigned long)__acpi_map_table(oem_addrX, oem_size);
 
diff --git a/drivers/acpi/tables.c b/drivers/acpi/tables.c
index f336bca..5b8b7e0 100644
--- a/drivers/acpi/tables.c
+++ b/drivers/acpi/tables.c
@@ -211,7 +211,6 @@ acpi_table_parse_entries(char *id,
 	struct acpi_subtable_header *entry;
 	unsigned int count = 0;
 	unsigned long table_end;
-	acpi_size tbl_size;
 
 	if (acpi_disabled)
 		return -ENODEV;
@@ -220,9 +219,9 @@ acpi_table_parse_entries(char *id,
 		return -EINVAL;
 
 	if (strncmp(id, ACPI_SIG_MADT, 4) == 0)
-		acpi_get_table_with_size(id, acpi_apic_instance, &table_header, &tbl_size);
+		acpi_get_table(id, acpi_apic_instance, &table_header);
 	else
-		acpi_get_table_with_size(id, 0, &table_header, &tbl_size);
+		acpi_get_table(id, 0, &table_header);
 
 	if (!table_header) {
 		printk(KERN_WARNING PREFIX "%4.4s not present\n", id);
@@ -241,7 +240,7 @@ acpi_table_parse_entries(char *id,
 		if (entry->type == entry_id
 		    && (!max_entries || count++ < max_entries))
 			if (handler(entry, table_end)) {
-				early_acpi_os_unmap_memory((char *)table_header, tbl_size);
+				early_acpi_os_unmap_memory((char *)table_header, table_header->length);
 				return -EINVAL;
 			}
 
@@ -253,7 +252,7 @@ acpi_table_parse_entries(char *id,
 		       "%i found\n", id, entry_id, count - max_entries, count);
 	}
 
-	early_acpi_os_unmap_memory((char *)table_header, tbl_size);
+	early_acpi_os_unmap_memory((char *)table_header, table_header->length);
 	return count;
 }
 
@@ -278,7 +277,6 @@ acpi_table_parse_madt(enum acpi_madt_type id,
 int __init acpi_table_parse(char *id, acpi_table_handler handler)
 {
 	struct acpi_table_header *table = NULL;
-	acpi_size tbl_size;
 
 	if (acpi_disabled)
 		return -ENODEV;
@@ -287,13 +285,13 @@ int __init acpi_table_parse(char *id, acpi_table_handler handler)
 		return -EINVAL;
 
 	if (strncmp(id, ACPI_SIG_MADT, 4) == 0)
-		acpi_get_table_with_size(id, acpi_apic_instance, &table, &tbl_size);
+		acpi_get_table(id, acpi_apic_instance, &table);
 	else
-		acpi_get_table_with_size(id, 0, &table, &tbl_size);
+		acpi_get_table(id, 0, &table);
 
 	if (table) {
 		handler(table);
-		early_acpi_os_unmap_memory(table, tbl_size);
+		early_acpi_os_unmap_memory(table, table->length);
 		return 0;
 	} else
 		return 1;
@@ -307,9 +305,8 @@ int __init acpi_table_parse(char *id, acpi_table_handler handler)
 static void __init check_multiple_madt(void)
 {
 	struct acpi_table_header *table = NULL;
-	acpi_size tbl_size;
 
-	acpi_get_table_with_size(ACPI_SIG_MADT, 2, &table, &tbl_size);
+	acpi_get_table(ACPI_SIG_MADT, 2, &table);
 	if (table) {
 		printk(KERN_WARNING PREFIX
 		       "BIOS bug: multiple APIC/MADT found,"
@@ -318,7 +315,7 @@ static void __init check_multiple_madt(void)
 		       "If \"acpi_apic_instance=%d\" works better, "
 		       "notify linux-acpi@vger.kernel.org\n",
 		       acpi_apic_instance ? 0 : 2);
-		early_acpi_os_unmap_memory(table, tbl_size);
+		early_acpi_os_unmap_memory(table, table->length);
 
 	} else
 		acpi_apic_instance = 0;
diff --git a/drivers/iommu/dmar.c b/drivers/iommu/dmar.c
index 86e2f4a..aa65b6f 100644
--- a/drivers/iommu/dmar.c
+++ b/drivers/iommu/dmar.c
@@ -48,7 +48,6 @@
 LIST_HEAD(dmar_drhd_units);
 
 struct acpi_table_header * __initdata dmar_tbl;
-static acpi_size dmar_tbl_size;
 
 static void __init dmar_register_drhd_unit(struct dmar_drhd_unit *drhd)
 {
@@ -285,10 +284,8 @@ static int __init dmar_table_detect(void)
 	acpi_status status = AE_OK;
 
 	/* if we could find DMAR table, then there are DMAR devices */
-	status = acpi_get_table_with_size(ACPI_SIG_DMAR, 0,
-				(struct acpi_table_header **)&dmar_tbl,
-				&dmar_tbl_size);
-
+	status = acpi_get_table(ACPI_SIG_DMAR, 0,
+				(struct acpi_table_header **)&dmar_tbl);
 	if (ACPI_SUCCESS(status) && !dmar_tbl) {
 		pr_warn("Unable to map DMAR\n");
 		status = AE_NOT_FOUND;
@@ -558,8 +555,11 @@ int __init detect_intel_iommu(void)
 			x86_init.iommu.iommu_init = intel_iommu_init;
 #endif
 	}
-	early_acpi_os_unmap_memory(dmar_tbl, dmar_tbl_size);
-	dmar_tbl = NULL;
+
+	if (dmar_tbl) {
+		early_acpi_os_unmap_memory(dmar_tbl, dmar_tbl->length);
+		dmar_tbl = NULL;
+	}
 
 	return ret ? 1 : -ENODEV;
 }
-- 
1.7.1
