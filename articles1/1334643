Path: news.gmane.org!not-for-mail
From: JoonSoo Kim <js1304@gmail.com>
Newsgroups: gmane.linux.kernel.mm,gmane.linux.kernel
Subject: Re: [PATCH] slub: remove one code path and reduce lock contention in __slab_free()
Date: Sat, 28 Jul 2012 22:56:03 +0900
Lines: 55
Approved: news@gmane.org
Message-ID: <CAAmzW4N5HxN+Ha_kwwKSf9na-g6bnro1UumQ+ZiQEmgS4kacrA@mail.gmail.com>
References: <1343420271-3825-1-git-send-email-js1304@gmail.com>
	<alpine.DEB.2.00.1207271538250.25434@router.home>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
X-Trace: dough.gmane.org 1343483770 786 80.91.229.3 (28 Jul 2012 13:56:10 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Sat, 28 Jul 2012 13:56:10 +0000 (UTC)
Cc: Pekka Enberg <penberg@kernel.org>, linux-kernel@vger.kernel.org, linux-mm@kvack.org
To: Christoph Lameter <cl@linux.com>
Original-X-From: owner-linux-mm@kvack.org Sat Jul 28 15:56:10 2012
Return-path: <owner-linux-mm@kvack.org>
Envelope-to: glkm-linux-mm-2@m.gmane.org
Original-Received: from kanga.kvack.org ([205.233.56.17])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <owner-linux-mm@kvack.org>)
	id 1Sv7V0-00023v-MH
	for glkm-linux-mm-2@m.gmane.org; Sat, 28 Jul 2012 15:56:06 +0200
Original-Received: by kanga.kvack.org (Postfix)
	id 39C7D6B004D; Sat, 28 Jul 2012 09:56:05 -0400 (EDT)
Delivered-To: linux-mm-outgoing@kvack.org
Original-Received: by kanga.kvack.org (Postfix, from userid 40)
	id 281796B005A; Sat, 28 Jul 2012 09:56:05 -0400 (EDT)
X-Original-To: int-list-linux-mm@kvack.org
Delivered-To: int-list-linux-mm@kvack.org
Original-Received: by kanga.kvack.org (Postfix, from userid 63042)
	id EB0B56B005D; Sat, 28 Jul 2012 09:56:04 -0400 (EDT)
X-Original-To: linux-mm@kvack.org
Delivered-To: linux-mm@kvack.org
Original-Received: from psmtp.com (na3sys010amx171.postini.com [74.125.245.171])
	by kanga.kvack.org (Postfix) with SMTP id 4CDA86B004D
	for <linux-mm@kvack.org>; Sat, 28 Jul 2012 09:56:04 -0400 (EDT)
Original-Received: from mail-ob0-f169.google.com ([209.85.214.169]) (using TLSv1) by na3sys010amx171.postini.com ([74.125.244.10]) with SMTP;
	Sat, 28 Jul 2012 13:56:04 GMT
Original-Received: by obhx4 with SMTP id x4so7411792obh.14
        for <linux-mm@kvack.org>; Sat, 28 Jul 2012 06:56:03 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=HKu9PsVxDY9KB3TYKoR8+N7yZ29v8NP0ICE3jexrTlY=;
        b=z4ASqsNL/H3W8bB38LtbLR9LmiqciBb6TzbGDjZ1qX0fCw6uGKW+j9r7+zf9q/CumS
         /nPUSsSj4kqwXU04WBMj3fBJ7UPf3eWs4p2EFQumuT4cchEhiKxhP0i4d0ttJWnKq66i
         oLx/tWcP21sYdnV6hrOd9ubVWsOu1wOxFDKcgzKWG+9EEhoKhiFp88vz4DcV2j0WPoOG
         EItAnUOjYZ9fBmamwZ7IVbhOsqzKlWb4+jQyFNXoPx8RdnEJDktK9D27d9SbN5oJ5gpm
         YpO1t5oziu2YKFLuh1jALY1MrL8st3249FT3NfAmAtJw/HdCMsiZKIhmKiW6GIBntLcT
         eLUQ==
Original-Received: by 10.182.39.39 with SMTP id m7mr8702847obk.20.1343483763382; Sat,
 28 Jul 2012 06:56:03 -0700 (PDT)
Original-Received: by 10.60.1.72 with HTTP; Sat, 28 Jul 2012 06:56:03 -0700 (PDT)
In-Reply-To: <alpine.DEB.2.00.1207271538250.25434@router.home>
X-pstn-neptune: 0/0/0.00/0
X-pstn-levels: (S:99.90000/99.90000 CV:99.9000 FC:95.5390 LC:95.5390 R:95.9108 P:95.9108 M:97.0282 C:98.6951 )
X-pstn-dkim: 1 skipped:not-enabled
X-pstn-settings: 3 (1.0000:0.0100) s cv GT3 gt2 gt1 r p m c 
X-pstn-addresses: from <js1304@gmail.com> [db-null] 
X-Bogosity: Ham, tests=bogofilter, spamicity=0.000000, version=1.2.2
Original-Sender: owner-linux-mm@kvack.org
Precedence: bulk
X-Loop: owner-majordomo@kvack.org
List-ID: <linux-mm.kvack.org>
Xref: news.gmane.org gmane.linux.kernel.mm:83146 gmane.linux.kernel:1334643
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1334643>

2012/7/28 Christoph Lameter <cl@linux.com>:
> On Sat, 28 Jul 2012, Joonsoo Kim wrote:
>
>> Subject and commit log are changed from v1.
>
> That looks a bit better. But the changelog could use more cleanup and
> clearer expression.
>
>> @@ -2490,25 +2492,17 @@ static void __slab_free(struct kmem_cache *s, struct page *page,
>>                  return;
>>          }
>>
>> +     if (unlikely(!new.inuse && n->nr_partial > s->min_partial))
>> +             goto slab_empty;
>> +
>
> So we can never encounter a empty slab that was frozen before? Really?

In my suggestion,  'was_frozen = 1' is "always" handled without taking a lock.
Then, never hit following code.
+     if (unlikely(!new.inuse && n->nr_partial > s->min_partial))
+             goto slab_empty;
+

Instead, hit following code.
        if (likely(!n)) {

                /*
                 * If we just froze the page then put it onto the
                 * per cpu partial list.
                 */
                if (new.frozen && !was_frozen) {
                        put_cpu_partial(s, page, 1);
                        stat(s, CPU_PARTIAL_FREE);
                }
                /*
                 * The list lock was not taken therefore no list
                 * activity can be necessary.
                 */
                if (was_frozen)
                        stat(s, FREE_FROZEN);
                return;
        }

So, even if we encounter a empty slab that was frozen before, we just
do "stat(s, FREE_FROZEN)".
Please let me know my answer is sufficient.
Thanks!!

--
To unsubscribe, send a message with 'unsubscribe linux-mm' in
the body to majordomo@kvack.org.  For more info on Linux MM,
see: http://www.linux-mm.org/ .
Don't email: <a href=mailto:"dont@kvack.org"> email@kvack.org </a>

