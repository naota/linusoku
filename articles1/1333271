Path: news.gmane.org!not-for-mail
From: Hugh Dickins <hughd@google.com>
Newsgroups: gmane.linux.kernel.cross-arch,gmane.linux.kernel,gmane.linux.kernel.mm
Subject: Re: [RFC] page-table walkers vs memory order
Date: Wed, 25 Jul 2012 13:26:43 -0700 (PDT)
Lines: 45
Approved: news@gmane.org
Message-ID: <alpine.LSU.2.00.1207251313180.1942@eggly.anvils>
References: <1343064870.26034.23.camel@twins> <alpine.LSU.2.00.1207241356350.2094@eggly.anvils> <20120725175628.GH2378@linux.vnet.ibm.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Trace: dough.gmane.org 1343248063 26481 80.91.229.3 (25 Jul 2012 20:27:43 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Wed, 25 Jul 2012 20:27:43 +0000 (UTC)
Cc: Peter Zijlstra <peterz@infradead.org>,
	Linus Torvalds <torvalds@linux-foundation.org>,
	Rik van Riel <riel@redhat.com>,
	Andrew Morton <akpm@linux-foundation.org>,
	Nick Piggin <npiggin@kernel.dk>,
	Andrea Arcangeli <aarcange@redhat.com>,
	linux-kernel@vger.kernel.org, linux-arch@vger.kernel.org,
	linux-mm@kvack.org
To: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>
Original-X-From: linux-arch-owner@vger.kernel.org Wed Jul 25 22:27:41 2012
Return-path: <linux-arch-owner@vger.kernel.org>
Envelope-to: glka-linux-arch@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-arch-owner@vger.kernel.org>)
	id 1Su8BH-00024D-EZ
	for glka-linux-arch@plane.gmane.org; Wed, 25 Jul 2012 22:27:39 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752610Ab2GYU1i (ORCPT <rfc822;glka-linux-arch@m.gmane.org>);
	Wed, 25 Jul 2012 16:27:38 -0400
Original-Received: from mail-yx0-f174.google.com ([209.85.213.174]:62367 "EHLO
	mail-yx0-f174.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751801Ab2GYU1h (ORCPT
	<rfc822;linux-arch@vger.kernel.org>); Wed, 25 Jul 2012 16:27:37 -0400
Original-Received: by yenl2 with SMTP id l2so1186261yen.19
        for <linux-arch@vger.kernel.org>; Wed, 25 Jul 2012 13:27:37 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=date:from:x-x-sender:to:cc:subject:in-reply-to:message-id
         :references:user-agent:mime-version:content-type;
        bh=BclStoxQa1C6BdJAI8J4qHP51CDUhKabRYaJeOcr2oY=;
        b=iXPj89UaLObpmVTDB1KtZThHfy09GFNvatFi6ZFqps0dsEq1PKUeyHc8XXIBSkJNjp
         TAgxIqTIrVFPWhdpg57uACm27VsFMSNM5GD7hiHj/Lgb/OlPfILi3dv5SL2kmxzztylU
         bp+DdhiE5rNJhDB7Wm6JVRTX0hliBYlLT+D0iDcM9qyQyWO+qIOfREa5PcNaZ3l2FT9w
         oJb3cR2dF+VENKJyKu/0iUBf/cZE1g/xbeR23PodkI8MbU0Sn9jxqreRzcXC19AIeZ54
         PZTm5kejoxH7BT+vXA5oXjboeDmgZJMokW5wv6CJ4mU/V1aJsO/8Q3K23/snB1x2Q0oR
         7G1w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=date:from:x-x-sender:to:cc:subject:in-reply-to:message-id
         :references:user-agent:mime-version:content-type:x-gm-message-state;
        bh=BclStoxQa1C6BdJAI8J4qHP51CDUhKabRYaJeOcr2oY=;
        b=EiA5f65avw98YIwvilHb+G01nBAmjvPDG5q6W+OM0EQnDJ5hBs1/w8BAErgvd6Ksq1
         XMpj2yOajhJntS4hzIJ9u5Q6aVLsK1bTeJVB9Db353qN2NMnNsPOQwkThxxIgHPrfpQj
         aNow+KpJj6bgiWyQNqyoDaDsB0y2F9t7HKzxzKOjQQmip5sC9+xKvNM/Vdk2zFHctuc2
         aAaTDTEYM9PsUQFGzJ+oATSyhuYpOB9PhjusRiwpaykAkeUiZTxKg2vsVEF6X1qfRKeb
         1n3pm2navL/WzSpRdKm3hnQ5+H0Q/rFrzpZgHaC7spwMqvPHXxuhqufqLzJVu/lk5HOl
         hVRg==
Original-Received: by 10.236.72.97 with SMTP id s61mr22042548yhd.52.1343248056962;
        Wed, 25 Jul 2012 13:27:36 -0700 (PDT)
Original-Received: by 10.236.72.97 with SMTP id s61mr22042518yhd.52.1343248056703;
        Wed, 25 Jul 2012 13:27:36 -0700 (PDT)
Original-Received: from [2620:0:1000:fd2e:224:d7ff:fee2:b75c] ([2620:0:1000:fd2e:224:d7ff:fee2:b75c])
        by mx.google.com with ESMTPS id j17sm19513794anl.5.2012.07.25.13.27.34
        (version=TLSv1/SSLv3 cipher=OTHER);
        Wed, 25 Jul 2012 13:27:35 -0700 (PDT)
X-X-Sender: hugh@eggly.anvils
In-Reply-To: <20120725175628.GH2378@linux.vnet.ibm.com>
User-Agent: Alpine 2.00 (LSU 1167 2008-08-23)
X-Gm-Message-State: ALoCoQnn4g4ZGMfvvakxHRazwS5iAL4VMAcOPRDo6ArwlqaxcECPJ5DC8bc9Nq49HW19qMlAntfa5/wjDBjymaYPPzDJGK/PTwR1cBfDaTfeWuiETon6iUDu8TZxHsdjPKrNJwzLEjTKn9lmvdrweY/sXOsiufQWRNx4hWnWWqItw5sk7MoTAnIR6pqw9FsodOD61zo+dE7s
Original-Sender: linux-arch-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-arch.vger.kernel.org>
X-Mailing-List: linux-arch@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel.cross-arch:14712 gmane.linux.kernel:1333271 gmane.linux.kernel.mm:83011
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1333271>

On Wed, 25 Jul 2012, Paul E. McKenney wrote:
> On Tue, Jul 24, 2012 at 02:51:05PM -0700, Hugh Dickins wrote:
> > 
> > I'm totally unclear whether the kernel ever gets built with these
> > 'creative' compilers that you refer to.  Is ACCESS_ONCE() a warning
> > of where some future compiler would be permitted to mess with our
> > assumptions?  Or is it actually saving us already today?  Would we
> > know?  Could there be a boottime test that would tell us?  Is it
> > likely that a future compiler would have an "--access_once"
> > option that the kernel build would want to turn on?
> 
> The problem is that, unless you tell it otherwise, the compiler is
> permitted to assume that the code that it is generating is the only thing
> active in that address space at that time.  So the compiler might know
> that it already has a perfectly good copy of that value somewhere in
> its registers, or it might decide to fetch the value twice rather than
> once due to register pressure, either of which can be fatal in SMP code.
> And then there are more aggressive optimizations as well.
> 
> ACCESS_ONCE() is a way of telling the compiler to access the value
> once, regardless of what cute single-threaded optimizations that it
> otherwise might want to apply.

Right, but you say "might": I have never heard it asserted, that we do
build the kernel with a compiler which actually makes such optimizations.

There's a lot of other surprising things which a compiler is permitted
to do, but we would simply not use such a compiler to build the kernel.

Does some version of gcc, under the options which we insist upon,
make such optimizations on any of the architectures which we support?

Or is there some other compiler in use on the kernel, which makes
such optimizations?  It seems a long time since I heard of building
the kernel with icc.  clang?

I don't mind the answer "Yes, you idiot" - preferably with an example
or two of which compiler and which piece of code it has bitten us on.
I don't mind the answer "We just don't know" if that's the case.

But I'd like a better idea of how much to worry: is ACCESS_ONCE
demonstrably needed today, or rather future-proofing and documentation?

Thanks,
Hugh
