Path: news.gmane.org!not-for-mail
From: "Jan Beulich" <JBeulich@suse.com>
Newsgroups: gmane.linux.kernel
Subject: Re: [Xen-devel] [PATCH 1/7] xen/mmu: use copy_page instead of
 memcpy.
Date: Fri, 27 Jul 2012 08:35:32 +0100
Lines: 62
Approved: news@gmane.org
Message-ID: <501260E40200007800090E0B@nat28.tlf.novell.com>
References: <1343335652-5659-1-git-send-email-konrad.wilk@oracle.com>
 <1343335652-5659-2-git-send-email-konrad.wilk@oracle.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 8BIT
X-Trace: dough.gmane.org 1343374545 6673 80.91.229.3 (27 Jul 2012 07:35:45 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Fri, 27 Jul 2012 07:35:45 +0000 (UTC)
Cc: "xen-devel" <xen-devel@lists.xen.org>,
	<linux-kernel@vger.kernel.org>
To: "Konrad Rzeszutek Wilk" <konrad.wilk@oracle.com>
Original-X-From: linux-kernel-owner@vger.kernel.org Fri Jul 27 09:35:43 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1Suf5J-0000nE-8E
	for glk-linux-kernel-3@plane.gmane.org; Fri, 27 Jul 2012 09:35:41 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752160Ab2G0Hff (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Fri, 27 Jul 2012 03:35:35 -0400
Original-Received: from nat28.tlf.novell.com ([130.57.49.28]:49432 "EHLO
	nat28.tlf.novell.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751767Ab2G0Hfd convert rfc822-to-8bit (ORCPT
	<rfc822;groupwise-linux-kernel@vger.kernel.org:3:1>);
	Fri, 27 Jul 2012 03:35:33 -0400
Original-Received: from EMEA1-MTA by nat28.tlf.novell.com
	with Novell_GroupWise; Fri, 27 Jul 2012 08:35:32 +0100
X-Mailer: Novell GroupWise Internet Agent 12.0.0 
In-Reply-To: <1343335652-5659-2-git-send-email-konrad.wilk@oracle.com>
Content-Disposition: inline
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1334136
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1334136>

>>> On 26.07.12 at 22:47, Konrad Rzeszutek Wilk <konrad.wilk@oracle.com> wrote:
> After all, this is what it is there for.
> 
> Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>

Acked-by: Jan Beulich <jbeulich@suse.com>

> ---
>  arch/x86/xen/mmu.c |   13 ++++++-------
>  1 files changed, 6 insertions(+), 7 deletions(-)
> 
> diff --git a/arch/x86/xen/mmu.c b/arch/x86/xen/mmu.c
> index 6ba6100..7247e5a 100644
> --- a/arch/x86/xen/mmu.c
> +++ b/arch/x86/xen/mmu.c
> @@ -1754,14 +1754,14 @@ void __init xen_setup_kernel_pagetable(pgd_t *pgd, 
> unsigned long max_pfn)
>  	 * it will be also modified in the __ka space! (But if you just
>  	 * modify the PMD table to point to other PTE's or none, then you
>  	 * are OK - which is what cleanup_highmap does) */
> -	memcpy(level2_ident_pgt, l2, sizeof(pmd_t) * PTRS_PER_PMD);
> +	copy_page(level2_ident_pgt, l2);
>  	/* Graft it onto L4[511][511] */
> -	memcpy(level2_kernel_pgt, l2, sizeof(pmd_t) * PTRS_PER_PMD);
> +	copy_page(level2_kernel_pgt, l2);
>  
>  	/* Get [511][510] and graft that in level2_fixmap_pgt */
>  	l3 = m2v(pgd[pgd_index(__START_KERNEL_map + PMD_SIZE)].pgd);
>  	l2 = m2v(l3[pud_index(__START_KERNEL_map + PMD_SIZE)].pud);
> -	memcpy(level2_fixmap_pgt, l2, sizeof(pmd_t) * PTRS_PER_PMD);
> +	copy_page(level2_fixmap_pgt, l2);
>  	/* Note that we don't do anything with level1_fixmap_pgt which
>  	 * we don't need. */
>  
> @@ -1821,8 +1821,7 @@ static void __init xen_write_cr3_init(unsigned long 
> cr3)
>  	 */
>  	swapper_kernel_pmd =
>  		extend_brk(sizeof(pmd_t) * PTRS_PER_PMD, PAGE_SIZE);
> -	memcpy(swapper_kernel_pmd, initial_kernel_pmd,
> -	       sizeof(pmd_t) * PTRS_PER_PMD);
> +	copy_page(swapper_kernel_pmd, initial_kernel_pmd);
>  	swapper_pg_dir[KERNEL_PGD_BOUNDARY] =
>  		__pgd(__pa(swapper_kernel_pmd) | _PAGE_PRESENT);
>  	set_page_prot(swapper_kernel_pmd, PAGE_KERNEL_RO);
> @@ -1851,11 +1850,11 @@ void __init xen_setup_kernel_pagetable(pgd_t *pgd, 
> unsigned long max_pfn)
>  				  512*1024);
>  
>  	kernel_pmd = m2v(pgd[KERNEL_PGD_BOUNDARY].pgd);
> -	memcpy(initial_kernel_pmd, kernel_pmd, sizeof(pmd_t) * PTRS_PER_PMD);
> +	copy_page(initial_kernel_pmd, kernel_pmd);
>  
>  	xen_map_identity_early(initial_kernel_pmd, max_pfn);
>  
> -	memcpy(initial_page_table, pgd, sizeof(pgd_t) * PTRS_PER_PGD);
> +	copy_page(initial_page_table, pgd);
>  	initial_page_table[KERNEL_PGD_BOUNDARY] =
>  		__pgd(__pa(initial_kernel_pmd) | _PAGE_PRESENT);
>  


