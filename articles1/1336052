Path: news.gmane.org!not-for-mail
From: Fabio Baltieri <fabio.baltieri@gmail.com>
Newsgroups: gmane.linux.can,gmane.linux.kernel
Subject: [PATCH can-next v4] can: add tx/rx LED trigger support
Date: Wed,  1 Aug 2012 00:05:38 +0200
Lines: 279
Approved: news@gmane.org
Message-ID: <1343772338-1526-1-git-send-email-fabio.baltieri@gmail.com>
References: <5017C8E4.4020003@pengutronix.de>
NNTP-Posting-Host: plane.gmane.org
X-Trace: dough.gmane.org 1343772261 1707 80.91.229.3 (31 Jul 2012 22:04:21 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Tue, 31 Jul 2012 22:04:21 +0000 (UTC)
Cc: linux-kernel@vger.kernel.org,
	Fabio Baltieri <fabio.baltieri@gmail.com>,
	Oliver Hartkopp <socketcan@hartkopp.net>,
	Wolfgang Grandegger <wg@grandegger.com>,
	Marc Kleine-Budde <mkl@pengutronix.de>
To: linux-can@vger.kernel.org
Original-X-From: linux-can-owner@vger.kernel.org Wed Aug 01 00:04:19 2012
Return-path: <linux-can-owner@vger.kernel.org>
Envelope-to: glc-linux-can2@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-can-owner@vger.kernel.org>)
	id 1SwKY2-0006EZ-D4
	for glc-linux-can2@plane.gmane.org; Wed, 01 Aug 2012 00:04:14 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754427Ab2GaWEM (ORCPT <rfc822;glc-linux-can2@m.gmane.org>);
	Tue, 31 Jul 2012 18:04:12 -0400
Original-Received: from mail-ey0-f174.google.com ([209.85.215.174]:40096 "EHLO
	mail-ey0-f174.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754324Ab2GaWEL (ORCPT
	<rfc822;linux-can@vger.kernel.org>); Tue, 31 Jul 2012 18:04:11 -0400
Original-Received: by eaac11 with SMTP id c11so321151eaa.19
        for <multiple recipients>; Tue, 31 Jul 2012 15:04:09 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=from:to:cc:subject:date:message-id:x-mailer:in-reply-to:references;
        bh=Lg5fc8QZjR8XE0spKtTVdbW5ewY8OQiMRB4nRIYme+Y=;
        b=ugfavQWU1a17J9tW2tKEkEwy9SMzY4s2OZxFduQkYWJ7Mnk5zjrIDSoF8WAbXlAtF7
         ZBLxJqK+pY/JacFg9nBcIwUV51K0UyYVr7GMsj+jrnt/V91nIEl+dXjTfs1oU8qF1WJV
         mlYrvv1vzv9Zf0kSMaUG5P6lIvCn/lHG5bNV0ohh7SXbm3e8iZrHPnzIZYN7+fS64eZg
         a+6SF4a+tPmT2G95Ia/cvoa4+tQ+o27YAchuWhWaUu0qlvYeglkLhtNtTEJVTurzs0WL
         3+qAdWNz3LcwovJPxohN2NHrFv4t4Avjz8OP8KBptsQcNz056wFWroFv2EWTAXp3rJvW
         G/1g==
Original-Received: by 10.14.221.132 with SMTP id r4mr19897771eep.41.1343772249607;
        Tue, 31 Jul 2012 15:04:09 -0700 (PDT)
Original-Received: from localhost ([2a01:2029:1:1a74:215:afff:fe76:508e])
        by mx.google.com with ESMTPS id w5sm3649884eeo.1.2012.07.31.15.04.06
        (version=TLSv1/SSLv3 cipher=OTHER);
        Tue, 31 Jul 2012 15:04:08 -0700 (PDT)
X-Mailer: git-send-email 1.7.10.3
In-Reply-To: <5017C8E4.4020003@pengutronix.de>
Original-Sender: linux-can-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-can.vger.kernel.org>
X-Mailing-List: linux-can@vger.kernel.org
Xref: news.gmane.org gmane.linux.can:1857 gmane.linux.kernel:1336052
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1336052>

This patch implements the functions to add two LED triggers, named
<ifname>-tx and <ifname>-rx, to a canbus device driver.

Triggers are called from specific handlers by each CAN device driver and
can be disabled altogether with a Kconfig option.

The implementation keeps the LED on when the interface is UP and blinks
the LED on network activity at a configurable rate.

This only supports can-dev based drivers, as it uses some support field
in the can_priv structure.

Supported drivers should call can_led_init() and can_led_event() as
needed.

Cleanup is handled automatically by devres, so no *_exit function is
needed.

Supported events are:
- CAN_LED_EVENT_OPEN: turn on tx/rx LEDs
- CAN_LED_EVENT_STOP: turn off tx/rx LEDs
- CAN_LED_EVENT_TX: trigger tx LED blink
- CAN_LED_EVENT_RX: trigger tx LED blink

Cc: Oliver Hartkopp <socketcan@hartkopp.net>
Cc: Wolfgang Grandegger <wg@grandegger.com>
Cc: Marc Kleine-Budde <mkl@pengutronix.de>
Signed-off-by: Fabio Baltieri <fabio.baltieri@gmail.com>
---

Hi!

So, here is the v4.

Changes against v3:
- add a netdev_err message in kasprintf error path
- implement a devres_alloc release function to de-allocate strings and trigger
- can_led_exit is now unneeded and gone

Is that what you had in mind Marc?

I like the devres implementation, as callers don't have to care about exit
function anymore... still it looks like a bit of an hack to me.

Also, I made an initial version with the four pointers in a separate can_led
struct to be allocated as a payload of devres_alloc - but I think this one
looks cleaner and is more cache-friendly.

What you think about this?

Fabio

 drivers/net/can/Kconfig  |  12 ++++++
 drivers/net/can/Makefile |   2 +
 drivers/net/can/led.c    | 102 +++++++++++++++++++++++++++++++++++++++++++++++
 include/linux/can/dev.h  |   8 ++++
 include/linux/can/led.h  |  34 ++++++++++++++++
 5 files changed, 158 insertions(+)
 create mode 100644 drivers/net/can/led.c
 create mode 100644 include/linux/can/led.h

diff --git a/drivers/net/can/Kconfig b/drivers/net/can/Kconfig
index bb709fd..19dec19 100644
--- a/drivers/net/can/Kconfig
+++ b/drivers/net/can/Kconfig
@@ -54,6 +54,18 @@ config CAN_CALC_BITTIMING
 	  arguments "tq", "prop_seg", "phase_seg1", "phase_seg2" and "sjw".
 	  If unsure, say Y.
 
+config CAN_LEDS
+	bool "Enable LED triggers for Netlink based drivers"
+	depends on CAN_DEV
+	depends on LEDS_CLASS
+	select LEDS_TRIGGERS
+	---help---
+	  This option adds two LED triggers for packet receive and transmit
+	  events on each supported CAN device.
+
+	  Say Y here if you are working on a system with led-class supported
+	  LEDs and you want to use them as canbus activity indicators.
+
 config CAN_AT91
 	tristate "Atmel AT91 onchip CAN controller"
 	depends on CAN_DEV && (ARCH_AT91SAM9263 || ARCH_AT91SAM9X5)
diff --git a/drivers/net/can/Makefile b/drivers/net/can/Makefile
index 938be37..24ee98b 100644
--- a/drivers/net/can/Makefile
+++ b/drivers/net/can/Makefile
@@ -8,6 +8,8 @@ obj-$(CONFIG_CAN_SLCAN)		+= slcan.o
 obj-$(CONFIG_CAN_DEV)		+= can-dev.o
 can-dev-y			:= dev.o
 
+can-dev-$(CONFIG_CAN_LEDS)	+= led.o
+
 obj-y				+= usb/
 obj-y				+= softing/
 
diff --git a/drivers/net/can/led.c b/drivers/net/can/led.c
new file mode 100644
index 0000000..4fa8a47
--- /dev/null
+++ b/drivers/net/can/led.c
@@ -0,0 +1,102 @@
+/*
+ * Copyright 2012, Fabio Baltieri <fabio.baltieri@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/netdevice.h>
+#include <linux/can/dev.h>
+
+#include <linux/can/led.h>
+
+static unsigned long led_delay = 50;
+module_param(led_delay, ulong, 0644);
+MODULE_PARM_DESC(led_delay,
+		"blink delay time for activity leds (msecs, default: 50).");
+
+/*
+ * Trigger a LED event in response to a CAN device event
+ */
+void can_led_event(struct net_device *netdev, enum can_led_event event)
+{
+	struct can_priv *priv = netdev_priv(netdev);
+
+	switch (event) {
+	case CAN_LED_EVENT_OPEN:
+		led_trigger_event(priv->tx_led_trig, LED_FULL);
+		led_trigger_event(priv->rx_led_trig, LED_FULL);
+		break;
+	case CAN_LED_EVENT_STOP:
+		led_trigger_event(priv->tx_led_trig, LED_OFF);
+		led_trigger_event(priv->rx_led_trig, LED_OFF);
+		break;
+	case CAN_LED_EVENT_TX:
+		if (led_delay)
+			led_trigger_blink_oneshot(priv->tx_led_trig,
+						  &led_delay, &led_delay, 1);
+		break;
+	case CAN_LED_EVENT_RX:
+		if (led_delay)
+			led_trigger_blink_oneshot(priv->rx_led_trig,
+						  &led_delay, &led_delay, 1);
+		break;
+	}
+}
+EXPORT_SYMBOL_GPL(can_led_event);
+
+static void can_led_release(struct device *gendev, void *res)
+{
+	struct can_priv *priv = netdev_priv(to_net_dev(gendev));
+
+	led_trigger_unregister_simple(priv->tx_led_trig);
+	led_trigger_unregister_simple(priv->rx_led_trig);
+
+	kfree(priv->tx_led_trig_name);
+	kfree(priv->rx_led_trig_name);
+}
+
+/*
+ * Register CAN LED triggers for a CAN device
+ *
+ * This is normally called from a driver's probe function
+ */
+void can_led_init(struct net_device *netdev)
+{
+	struct can_priv *priv = netdev_priv(netdev);
+	void *res;
+
+	res = devres_alloc(can_led_release, 0, GFP_KERNEL);
+	if (!res)
+		goto err_out;
+
+	priv->tx_led_trig_name = kasprintf(GFP_KERNEL, "%s-tx", netdev->name);
+	if (!priv->tx_led_trig_name)
+		goto err_out;
+
+	priv->rx_led_trig_name = kasprintf(GFP_KERNEL, "%s-rx", netdev->name);
+	if (!priv->rx_led_trig_name)
+		goto err_out_rx;
+
+	led_trigger_register_simple(priv->tx_led_trig_name,
+				    &priv->tx_led_trig);
+	led_trigger_register_simple(priv->rx_led_trig_name,
+				    &priv->rx_led_trig);
+
+	devres_add(&netdev->dev, res);
+
+	return;
+
+err_out_rx:
+	kfree(priv->tx_led_trig_name);
+	priv->tx_led_trig_name = NULL;
+err_out:
+	netdev_err(netdev, "cannot register LED triggers\n");
+	devres_free(res);
+}
+EXPORT_SYMBOL_GPL(can_led_init);
diff --git a/include/linux/can/dev.h b/include/linux/can/dev.h
index 2b2fc34..167b04a 100644
--- a/include/linux/can/dev.h
+++ b/include/linux/can/dev.h
@@ -16,6 +16,7 @@
 #include <linux/can.h>
 #include <linux/can/netlink.h>
 #include <linux/can/error.h>
+#include <linux/can/led.h>
 
 /*
  * CAN mode
@@ -52,6 +53,13 @@ struct can_priv {
 
 	unsigned int echo_skb_max;
 	struct sk_buff **echo_skb;
+
+#ifdef CONFIG_CAN_LEDS
+	struct led_trigger *tx_led_trig;
+	char *tx_led_trig_name;
+	struct led_trigger *rx_led_trig;
+	char *rx_led_trig_name;
+#endif
 };
 
 /*
diff --git a/include/linux/can/led.h b/include/linux/can/led.h
new file mode 100644
index 0000000..b91982c
--- /dev/null
+++ b/include/linux/can/led.h
@@ -0,0 +1,34 @@
+/*
+ * Copyright 2012, Fabio Baltieri <fabio.baltieri@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef CAN_LED_H
+#define CAN_LED_H
+
+#include <linux/leds.h>
+
+enum can_led_event {
+	CAN_LED_EVENT_OPEN,
+	CAN_LED_EVENT_STOP,
+	CAN_LED_EVENT_TX,
+	CAN_LED_EVENT_RX,
+};
+
+#ifdef CONFIG_CAN_LEDS
+void can_led_event(struct net_device *netdev, enum can_led_event event);
+void can_led_init(struct net_device *netdev);
+#else
+static inline void can_led_event(struct net_device *netdev,
+				 enum can_led_event event)
+{
+}
+static inline void can_led_init(struct net_device *netdev)
+{
+}
+#endif
+
+#endif
-- 
1.7.11.rc1.9.gf623ca1.dirty

--
To unsubscribe from this list: send the line "unsubscribe linux-can" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

