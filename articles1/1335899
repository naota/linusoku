Path: news.gmane.org!not-for-mail
From: Randy Dunlap <rdunlap@xenotime.net>
Newsgroups: gmane.linux.kernel
Subject: Re: [PATCH] sched: Document schedule() entry points
Date: Tue, 31 Jul 2012 10:25:04 -0700
Lines: 66
Approved: news@gmane.org
Message-ID: <501814F0.5050008@xenotime.net>
References: <1343715300-6315-1-git-send-email-penberg@kernel.org>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1343755581 27602 80.91.229.3 (31 Jul 2012 17:26:21 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Tue, 31 Jul 2012 17:26:21 +0000 (UTC)
Cc: linux-kernel@vger.kernel.org, mingo@kernel.org,
	peterz@infradead.org
To: Pekka Enberg <penberg@kernel.org>
Original-X-From: linux-kernel-owner@vger.kernel.org Tue Jul 31 19:26:21 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SwGD6-0007mD-SC
	for glk-linux-kernel-3@plane.gmane.org; Tue, 31 Jul 2012 19:26:21 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753249Ab2GaR0O (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Tue, 31 Jul 2012 13:26:14 -0400
Original-Received: from oproxy6-pub.bluehost.com ([67.222.54.6]:55925 "HELO
	oproxy6-pub.bluehost.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with SMTP id S1752353Ab2GaR0N (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Tue, 31 Jul 2012 13:26:13 -0400
Original-Received: (qmail 12971 invoked by uid 0); 31 Jul 2012 17:26:12 -0000
Original-Received: from unknown (HELO box742.bluehost.com) (66.147.244.242)
  by cpoproxy3.bluehost.com with SMTP; 31 Jul 2012 17:26:12 -0000
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; d=xenotime.net; s=default;
	h=Content-Transfer-Encoding:Content-Type:In-Reply-To:References:Subject:CC:To:MIME-Version:From:Date:Message-ID; bh=K0yxjg1bGNJtC3nq+/xJMU0UrCocOvYVsdc1Ev9stEo=;
	b=cR9ZhLMaWxrvS3cTV5W0/rxnntUnKMi41ASA6pu8h4qj9d/Og1N0SHjftZuu9vLp5jRzbh/xGgUB+/cmwd/NjHpJFjFJmQsSgLFwjSavM5O0RI+r7D/WW5dFmtD9Rb/f;
Original-Received: from [50.53.38.135] (port=59105 helo=[192.168.1.2])
	by box742.bluehost.com with esmtpsa (TLSv1:CAMELLIA256-SHA:256)
	(Exim 4.76)
	(envelope-from <rdunlap@xenotime.net>)
	id 1SwGCy-000221-7u; Tue, 31 Jul 2012 11:26:12 -0600
User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.15) Gecko/20110323 Thunderbird/3.1.9
In-Reply-To: <1343715300-6315-1-git-send-email-penberg@kernel.org>
X-Identified-User: {1807:box742.bluehost.com:xenotime:xenotime.net} {sentby:smtp auth 50.53.38.135 authed with rdunlap@xenotime.net}
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1335899
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1335899>

On 07/30/2012 11:15 PM, Pekka Enberg wrote:

> This patch adds a comment on top of the schedule() function to explain
> to scheduler newbies how the main scheduler function is entered.
> 
> Explained-by: Ingo Molnar <mingo@kernel.org>
> Explained-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
> Signed-off-by: Pekka Enberg <penberg@kernel.org>
> ---
>  kernel/sched/core.c |   34 ++++++++++++++++++++++++++++++++++
>  1 files changed, 34 insertions(+), 0 deletions(-)
> 
> diff --git a/kernel/sched/core.c b/kernel/sched/core.c
> index 468bdd4..9f31bbd 100644
> --- a/kernel/sched/core.c
> +++ b/kernel/sched/core.c
> @@ -3361,6 +3361,40 @@ pick_next_task(struct rq *rq)
>  
>  /*
>   * __schedule() is the main scheduler function.
> + *
> + * The main means of driving the scheduler and thus entering this function are:
> + *
> + *   1. Explicit blocking: mutex, semaphore, waitqueue, etc.
> + *
> + *   2. TIF_NEED_RESCHED flag is checked on interrupt and userspace return
> + *      paths. For example, see arch/x86/entry_64.S.
> + *
> + *      To drive preemption between tasks, the scheduler sets the flag is set


eh?

> + *      in timer interrupt handler scheduler_tick().
> + *
> + *   3. Wakeups don't really cause entry into schedule(). They add a
> + *      task to the run-queue and that's it.
> + *
> + *      Now, if the new task added to the run-queue preempts the current
> + *      task, then the wakeup sets TIF_NEED_RESCHED and schedule() gets
> + *      called on the nearest possible occasion:
> + *
> + *       - If the kernel is preemptible (CONFIG_PREEMPT=y):
> + *
> + *         - in syscall or exception context, at the next outmost
> + *           preempt_enable(). (this might be as soon as the wake_up()'s
> + *           spin_unlock()!)
> + *
> + *         - in IRQ context, return from interrupt-handler to
> + *           preemptible context
> + *
> + *       - If the kernel is not preemptible (CONFIG_PREEMPT is not set)
> + *         then at the next:
> + *
> + *          - cond_resched() call
> + *          - explicit schedule() call
> + *          - return from syscall or exception to user-space
> + *          - return from interrupt-handler to user-space
>   */
>  static void __sched __schedule(void)
>  {



-- 
~Randy
