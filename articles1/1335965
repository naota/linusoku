Path: news.gmane.org!not-for-mail
From: Karl Beldan <karl.beldan@gmail.com>
Newsgroups: gmane.linux.kernel,gmane.linux.ports.arm.kernel
Subject: Re: About dma_sync_single_for_{cpu,device}
Date: Tue, 31 Jul 2012 21:31:13 +0200
Lines: 66
Approved: news@gmane.org
Message-ID: <CACYmx9MnEn_XOosBn2-YJ=ny9FiLPADMNa6okwG08xrSpCUSpA@mail.gmail.com>
References: <20120730202401.GA4947@gobelin>
	<20120731064557.GA4676@gobelin>
	<20120731090931.GP6802@n2100.arm.linux.org.uk>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Trace: dough.gmane.org 1343763088 26602 80.91.229.3 (31 Jul 2012 19:31:28 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Tue, 31 Jul 2012 19:31:28 +0000 (UTC)
Cc: linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org
To: Russell King - ARM Linux <linux@arm.linux.org.uk>
Original-X-From: linux-kernel-owner@vger.kernel.org Tue Jul 31 21:31:28 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1SwIAB-0006Uh-IJ
	for glk-linux-kernel-3@plane.gmane.org; Tue, 31 Jul 2012 21:31:27 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753996Ab2GaTbY (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Tue, 31 Jul 2012 15:31:24 -0400
Original-Received: from mail-ey0-f174.google.com ([209.85.215.174]:40266 "EHLO
	mail-ey0-f174.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1755031Ab2GaTbP (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Tue, 31 Jul 2012 15:31:15 -0400
Original-Received: by eaac11 with SMTP id c11so280902eaa.19
        for <linux-kernel@vger.kernel.org>; Tue, 31 Jul 2012 12:31:13 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        bh=lDNitgAgYN8yyvCTKTjt4hjE/Tu/V6NpMHZXV/QUbjc=;
        b=S+DuylXILmOnK/vPRlp7BbZbZXWQ6yf7ehhzI2p8J34XF0HQXq7B/99nB3/TwU7h8F
         aDP+05ZJdLeFbx+CgZcpQx6OacWC2MZq6PEmTpFRSX7O4NdLw+2BF1m7BiTecLVfv2Ro
         eSfW13XmWt4aRtYr7isXyYy+k7OlpOD2FhDKL+WIjh35zYwTlBIkTNZ7+DtNT41Or14U
         ogANGz0aNvRaDIm7CLmHSseRRaWuhKQTRSRQmquFU953C1SW2UnpvfORy4qXDTBeOxRU
         /XOdmU8w94VgVBccQgrKJFHtcX+M7MSkwx98UpuAkLRubmvCMJSbd2weM+5p8jlmyNli
         HFCg==
Original-Received: by 10.14.179.71 with SMTP id g47mr19308090eem.21.1343763073828; Tue,
 31 Jul 2012 12:31:13 -0700 (PDT)
Original-Received: by 10.14.173.71 with HTTP; Tue, 31 Jul 2012 12:31:13 -0700 (PDT)
In-Reply-To: <20120731090931.GP6802@n2100.arm.linux.org.uk>
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1335965 gmane.linux.ports.arm.kernel:179675
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1335965>

On 7/31/12, Russell King - ARM Linux <linux@arm.linux.org.uk> wrote:
> On Tue, Jul 31, 2012 at 08:45:57AM +0200, Karl Beldan wrote:
>> I was expecting the following to work:
>> 	addr = dma_map_single(dev, buffer, size, DMA_TO_DEVICE);
>> 	dma_sync_single_for_device(dev, buffer, pattern_size, DMA_FROM_DEVICE);
>> 	dev_send(buffer);
>> 	// wait for irq (don't peek in the buffer) ... got irq
>> 	dma_sync_single_for_cpu(dev, buffer, pattern_size, DMA_FROM_DEVICE);
>> 	if (!xfer_done(buffer)) // not RAM value
>> 		dma_sync_single_for_device(dev, buffer, pattern_size, DMA_FROM_DEVICE);
>> 	[...]
>

Hi Russell,


> First point is that you clearly do not understand the DMA API at all.  The
> DMA API has the idea of buffer ownership.  Only the owner may access the
> buffer:
>
Are you saying that this scenario does not work ?
We are taking some liberties with the DMA API, we're more using some
of its funcs rather than _using_ it ;).
The question was not whether this was a proper usage of the API, but
why that scenario would not lead to the expected results .. and now
I've found the culprit peek I am happy.


[...]
> So, there is absolutely no noeed what so ever to follow dma_map_single()
> with dma_sync_single_for_device().
>
Cleaning a wide address range while invalidating a small one ?

[...]
> Fourthly, remember that the CPU deals with cache lines, and dirty cache
> lines may be written back in their _entirety_ - which means that data
> DMA'd from a device in the same cache line that you've modified via the
> CPU will not work (either the data in the cache line has to be invalidated
> and therefore the CPU update discarded, or the cache line has to be flushed
> back to RAM and the DMA'd data is overwritten.)  Hence why the buffer
> ownership rules are extremely important.
>
Of course.

> The solution for this fourth point is to use coherent DMA memory for things
> like ring buffers and the like, which does not suffer from this.
>
I might use something different in a not so distant future, yet, for
the time being, this way of doing as its advantages.

[...]
> Even with that comment, the idea of buffer ownership must be preserved by
> drivers, and they must follow that rule.  The fact that some ARM CPU
> do not respect the ownership entirely is worked around inside the DMA API
> and is of no interest to drivers.  Feroceon is not one CPU which does this
> though.
>
It was kind of a last resort explanation for a cache line filled out
of the blue .. before I spotted the culprit peek this morning.

Thanks for your input,



Karl
