Path: news.gmane.org!not-for-mail
From: Cyrill Gorcunov <gorcunov@openvz.org>
Newsgroups: gmane.linux.kernel,gmane.linux.file-systems
Subject: [patch 2/7] procfs: Convert /proc/pid/fdinfo/ handling routines to seq-file
Date: Wed, 25 Jul 2012 13:47:20 +0400
Lines: 203
Approved: news@gmane.org
Message-ID: <20120725095024.760705388@openvz.org>
References: <20120725094718.089879534@openvz.org>
NNTP-Posting-Host: plane.gmane.org
X-Trace: dough.gmane.org 1343210269 25944 80.91.229.3 (25 Jul 2012 09:57:49 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Wed, 25 Jul 2012 09:57:49 +0000 (UTC)
Cc: Al Viro <viro@zeniv.linux.org.uk>,
	Alexey Dobriyan <adobriyan@gmail.com>,
	Andrew Morton <akpm@linux-foundation.org>,
	Pavel Emelyanov <xemul@parallels.com>,
	James Bottomley <jbottomley@parallels.com>,
	Matthew Helsley <matt.helsley@gmail.com>,
	Cyrill Gorcunov <gorcunov@openvz.org>,
	Al Viro <viro@ZenIV.linux.org.uk>
To: linux-kernel@vger.kernel.org, linux-fsdevel@vger.kernel.org
Original-X-From: linux-kernel-owner@vger.kernel.org Wed Jul 25 11:57:46 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1StyLe-0002G9-Re
	for glk-linux-kernel-3@plane.gmane.org; Wed, 25 Jul 2012 11:57:43 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755169Ab2GYJ5H (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Wed, 25 Jul 2012 05:57:07 -0400
Original-Received: from mail-lpp01m010-f46.google.com ([209.85.215.46]:55612 "EHLO
	mail-lpp01m010-f46.google.com" rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1753854Ab2GYJzl (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Wed, 25 Jul 2012 05:55:41 -0400
Original-Received: by lahd3 with SMTP id d3so397324lah.19
        for <multiple recipients>; Wed, 25 Jul 2012 02:55:39 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=sender:message-id:user-agent:date:from:to:cc:subject:references
         :content-disposition;
        bh=U5+BYJ+nFm2bFcjvUFCOhr4o5+HGdmD3f92AAGRUQ0k=;
        b=WFEOnYIizAbBPMUkdxb55/Myga6F2Ervhwg3COWG2eqCwruSYyO0jRJktNiu3LjlYf
         UalUVSCuJYcz04jwsPNEZQf71eVGv6ALlpapNRJWVLrbgCeOVzO0cvpJaiNRLPP16SBJ
         L8ehRCZY01Dtu9O9KH8zUsXTmIXla5C0xFgfWwwgccuRqy4QkwHuLgVYOkNEwVdIT1Iz
         hKfZdJQKEB+azE7zZSC6FmcO/AXN9BZ3N55A8z/O6nimAlPZ7ZRwZJnBWYBO1UKzcO7x
         360Gspf14okgtxWTx7xSZRlFzXxcX2MVvHwS2QmNmCHScu2Rv0q7mOCyPeAKTJ+OKAcc
         krOQ==
Original-Received: by 10.152.136.18 with SMTP id pw18mr25132919lab.17.1343210139837;
        Wed, 25 Jul 2012 02:55:39 -0700 (PDT)
Original-Received: from moon.localdomain ([188.134.33.181])
        by mx.google.com with ESMTPS id lv13sm19102358lab.8.2012.07.25.02.55.37
        (version=TLSv1/SSLv3 cipher=OTHER);
        Wed, 25 Jul 2012 02:55:38 -0700 (PDT)
Original-Received: by moon.localdomain (Postfix, from userid 1000)
	id 72203A008A; Wed, 25 Jul 2012 13:50:24 +0400 (MSK)
User-Agent: quilt/0.48-1
Content-Disposition: inline; filename=seq-fdinfo-seq-ops-4
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1332851 gmane.linux.file-systems:66196
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1332851>

This patch converts /proc/pid/fdinfo/ handling routines to seq-file which
is needed to extend seq operations and plug in auxiliary fdinfo provides
from subsystems like eventfd/eventpoll/fsnotify.

Note the proc_fd_link no longer call for proc_fd_info, simply because
proc_fd_info is converted to seq_fdinfo_open (which is seq-file open()
prototype), moreover in further patches I need to provide two seq_fdinfo_open
variants -- one with CONFIG_CHECKPOINT_RESTORE and one without this
symbol. All in one -- this will look more messy then.

Signed-off-by: Cyrill Gorcunov <gorcunov@openvz.org>
CC: Al Viro <viro@ZenIV.linux.org.uk>
CC: Alexey Dobriyan <adobriyan@gmail.com>
CC: Andrew Morton <akpm@linux-foundation.org>
CC: Pavel Emelyanov <xemul@parallels.com>
CC: James Bottomley <jbottomley@parallels.com>
---
 fs/proc/fd.c |  133 +++++++++++++++++++++++++++++++++++++----------------------
 1 file changed, 85 insertions(+), 48 deletions(-)

Index: linux-2.6.git/fs/proc/fd.c
===================================================================
--- linux-2.6.git.orig/fs/proc/fd.c
+++ linux-2.6.git/fs/proc/fd.c
@@ -6,61 +6,90 @@
 #include <linux/namei.h>
 #include <linux/pid.h>
 #include <linux/security.h>
+#include <linux/file.h>
+#include <linux/seq_file.h>
 
 #include <linux/proc_fs.h>
 
 #include "internal.h"
 #include "fd.h"
 
-#define PROC_FDINFO_MAX 64
+struct proc_fdinfo {
+	loff_t	f_pos;
+	int	f_flags;
+};
 
-static int proc_fd_info(struct inode *inode, struct path *path, char *info)
+static int seq_show(struct seq_file *m, void *v)
+{
+	struct proc_fdinfo *fdinfo = m->private;
+	seq_printf(m, "pos:\t%lli\nflags:\t0%o\n",
+		   (long long)fdinfo->f_pos,
+		   fdinfo->f_flags);
+	return 0;
+}
+
+static int seq_fdinfo_open(struct inode *inode, struct file *file)
 {
-	struct task_struct *task = get_proc_task(inode);
 	struct files_struct *files = NULL;
-	int fd = proc_fd(inode);
-	struct file *file;
+	struct proc_fdinfo *fdinfo = NULL;
+	struct task_struct *task;
+	int ret = -ENOENT;
+
+	fdinfo = kzalloc(sizeof(*fdinfo), GFP_KERNEL);
+	if (!fdinfo)
+		return -ENOMEM;
 
+	task = get_proc_task(inode);
 	if (task) {
 		files = get_files_struct(task);
 		put_task_struct(task);
 	}
+
 	if (files) {
-		/*
-		 * We are not taking a ref to the file structure, so we must
-		 * hold ->file_lock.
-		 */
+		int fd = proc_fd(inode);
+		struct file *fd_file;
+
 		spin_lock(&files->file_lock);
-		file = fcheck_files(files, fd);
-		if (file) {
-			unsigned int f_flags;
-			struct fdtable *fdt;
+		fd_file = fcheck_files(files, fd);
+		if (fd_file) {
+			struct fdtable *fdt = files_fdtable(files);
 
-			fdt = files_fdtable(files);
-			f_flags = file->f_flags & ~O_CLOEXEC;
+			fdinfo->f_flags = fd_file->f_flags & ~O_CLOEXEC;
 			if (close_on_exec(fd, fdt))
-				f_flags |= O_CLOEXEC;
-
-			if (path) {
-				*path = file->f_path;
-				path_get(&file->f_path);
-			}
-			if (info)
-				snprintf(info, PROC_FDINFO_MAX,
-					 "pos:\t%lli\n"
-					 "flags:\t0%o\n",
-					 (long long) file->f_pos,
-					 f_flags);
-			spin_unlock(&files->file_lock);
-			put_files_struct(files);
-			return 0;
+				fdinfo->f_flags |= O_CLOEXEC;
+			ret = 0;
 		}
 		spin_unlock(&files->file_lock);
 		put_files_struct(files);
 	}
-	return -ENOENT;
+
+	if (!ret) {
+		ret = single_open(file, seq_show, fdinfo);
+		if (!ret)
+			fdinfo = NULL;
+	}
+
+	kfree(fdinfo);
+	return ret;
+}
+
+static int seq_fdinfo_release(struct inode *inode, struct file *file)
+{
+	struct seq_file *m = file->private_data;
+	struct proc_fdinfo *fdinfo = m->private;
+
+	kfree(fdinfo);
+
+	return single_release(inode, file);
 }
 
+static const struct file_operations proc_fdinfo_file_operations = {
+	.open		= seq_fdinfo_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= seq_fdinfo_release,
+};
+
 static int tid_fd_revalidate(struct dentry *dentry, struct nameidata *nd)
 {
 	struct files_struct *files;
@@ -130,7 +159,31 @@ static const struct dentry_operations ti
 
 static int proc_fd_link(struct dentry *dentry, struct path *path)
 {
-	return proc_fd_info(dentry->d_inode, path, NULL);
+	struct inode *inode = dentry->d_inode;
+	struct task_struct *task = get_proc_task(inode);
+	struct files_struct *files = NULL;
+	int fd = proc_fd(inode);
+	struct file *file;
+	int err = -ENOENT;
+
+	if (task) {
+		files = get_files_struct(task);
+		put_task_struct(task);
+	}
+
+	if (files) {
+		spin_lock(&files->file_lock);
+		file = fcheck_files(files, fd);
+		if (file) {
+			*path = file->f_path;
+			path_get(&file->f_path);
+		}
+		spin_unlock(&files->file_lock);
+		put_files_struct(files);
+		err = 0;
+	}
+
+	return err;
 }
 
 static struct dentry *
@@ -245,22 +298,6 @@ out_no_task:
 	return retval;
 }
 
-static ssize_t proc_fdinfo_read(struct file *file, char __user *buf,
-				size_t len, loff_t *ppos)
-{
-	char tmp[PROC_FDINFO_MAX];
-	int err = proc_fd_info(file->f_path.dentry->d_inode, NULL, tmp);
-	if (!err)
-		err = simple_read_from_buffer(buf, len, ppos, tmp, strlen(tmp));
-	return err;
-}
-
-static const struct file_operations proc_fdinfo_file_operations = {
-	.open           = nonseekable_open,
-	.read		= proc_fdinfo_read,
-	.llseek		= no_llseek,
-};
-
 static int proc_readfd(struct file *filp, void *dirent, filldir_t filldir)
 {
 	return proc_readfd_common(filp, dirent, filldir, proc_fd_instantiate);

