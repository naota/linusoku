Path: news.gmane.org!not-for-mail
From: Tomas Racek <tracek@redhat.com>
Newsgroups: gmane.linux.kernel
Subject: Re: [PATCH 1/1] xfs: check for possible overflow in xfs_ioc_trim
Date: Tue, 31 Jul 2012 06:32:34 -0400 (EDT)
Lines: 24
Approved: news@gmane.org
Message-ID: <1945505398.1250534.1343730754291.JavaMail.root@redhat.com>
References: <20120730214946.GG2877@dastard>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1343730769 8308 80.91.229.3 (31 Jul 2012 10:32:49 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Tue, 31 Jul 2012 10:32:49 +0000 (UTC)
Cc: Alex Elder <elder@kernel.org>,
	open list <linux-kernel@vger.kernel.org>,
	"supporter:XFS FILESYSTEM" <xfs@oss.sgi.com>,
	linux-xfs@vger.kernel.org, Ben Myers <bpm@sgi.com>,
	lczerner@redhat.com
To: Dave Chinner <david@fromorbit.com>
Original-X-From: linux-kernel-owner@vger.kernel.org Tue Jul 31 12:32:48 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1Sw9ks-000096-RD
	for glk-linux-kernel-3@plane.gmane.org; Tue, 31 Jul 2012 12:32:47 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754893Ab2GaKcj (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Tue, 31 Jul 2012 06:32:39 -0400
Original-Received: from mx3-phx2.redhat.com ([209.132.183.24]:57699 "EHLO
	mx3-phx2.redhat.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753302Ab2GaKch (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Tue, 31 Jul 2012 06:32:37 -0400
Original-Received: from zmail19.collab.prod.int.phx2.redhat.com (zmail19.collab.prod.int.phx2.redhat.com [10.5.83.22])
	by mx3-phx2.redhat.com (8.13.8/8.13.8) with ESMTP id q6VAWYla023752;
	Tue, 31 Jul 2012 06:32:34 -0400
In-Reply-To: <20120730214946.GG2877@dastard>
X-Originating-IP: [10.34.27.4]
X-Mailer: Zimbra 7.2.0_GA_2669 (ZimbraWebClient - GC20 (Linux)/7.2.0_GA_2669)
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1335598
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1335598>

> > +
> > +	if (range.start > ULLONG_MAX - BBSIZE)
> > +		return -XFS_ERROR(EINVAL);
> > +
> 
> There's no point checking for overflow on the range start - what we
> need to check is whether it is larger than the size of the
> filesystem. We do that after the conversion of range.start to basic
> blocks, so that check needs to be promoted to before this. i.e.
> 
> 	if (range.start >= XFS_FSB_TO_B(mp, mp->m_sb.sb_dblocks))
> 		return -XFS_ERROR(EINVAL);
> 
> >  	start = BTOBB(range.start);
> >  	end = start + BTOBBT(range.len) - 1;
> >  	minlen = BTOBB(max_t(u64, granularity, range.minlen));
> 
> And that will prevent the overflow in BTOBB() just as effectively...

You're right, that's a far better way, I'll change it so.

Thanks!

Tomas
