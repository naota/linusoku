Path: news.gmane.org!not-for-mail
From: Vlad Yasevich <vyasevich@gmail.com>
Newsgroups: gmane.linux.network,gmane.linux.kernel
Subject: Re: [PATCH] sctp: Make "Invalid Stream Identifier" ERROR follows
 SACK when bundling
Date: Thu, 02 Aug 2012 17:17:18 -0400
Lines: 189
Approved: news@gmane.org
Message-ID: <501AEE5E.8090303@gmail.com>
References: <1342677450-21810-1-git-send-email-xufengzhang.main@gmail.com>	<500E1057.3020509@windriver.com>	<75bdd73e-1c47-4fd6-bc29-5b86ee6da69a@email.android.com>	<CA+=dFzg=Bpsv5bMzECoAXYVcbD95eYy6xDAzL6fwiHrunfq-tg@mail.gmail.com>	<e7f8a685-9635-4aa9-bd67-1044e0720b29@email.android.com>	<CA+=dFzifKwbiXmw=pu0+rWmz72+4jsbv6bXOBHyL0LmxaL9byg@mail.gmail.com>	<CA+=dFzgXq3Sx-Ny+6oDZ3BEdsMQCgswNEVPVnhmhedHFvazzWw@mail.gmail.com>	<50100A29.8010705@gmail.com>	<CA+=dFzj11c9K0TS0T7D1aBVz+ppdFK91ZzBbevLV23FrWJNzmw@mail.gmail.com>	<CA+=dFziK09TVcK29x1SLg+JanOj6o__bJKf8yohw6dTYCUCF5A@mail.gmail.com>	<8ea83e51-81d1-407a-be06-98d2c99c876d@email.android.com>	<CA+=dFzguqjjnnqHO53Mx859VB6NU=4MaPWAUzGQB2qtZGfdAUg@mail.gmail.com>	<5013069F.3080306@gmail.com>	<CA+=dFzh4dFatOy42FydbVvoXB8=5CvLu5AwPvUA16h+kymq
 0Lw@mail.gmail.com>	<CA+=dFzh1wQx2rBs_2RAwrXsz79WS3njnO8=2ntQZUbB5So69gg@mail.gmail.com> <CA+=dFzhXY9aJ6_Yu-4a3g+6RyN5_mxXY=U3HnzKdi8TH-rqWcA@mail.gmail.com> <50178061.4010709@windriver.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1343942261 31228 80.91.229.3 (2 Aug 2012 21:17:41 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Thu, 2 Aug 2012 21:17:41 +0000 (UTC)
Cc: Xufeng Zhang <xufengzhang.main@gmail.com>,
	Neil Horman <nhorman@tuxdriver.com>, sri@us.ibm.com,
	davem@davemloft.net, linux-sctp@vger.kernel.org,
	netdev@vger.kernel.org, linux-kernel@vger.kernel.org
To: xufeng zhang <xufeng.zhang@windriver.com>
Original-X-From: netdev-owner@vger.kernel.org Thu Aug 02 23:17:39 2012
Return-path: <netdev-owner@vger.kernel.org>
Envelope-to: linux-netdev-2@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <netdev-owner@vger.kernel.org>)
	id 1Sx2m1-00048m-Fz
	for linux-netdev-2@plane.gmane.org; Thu, 02 Aug 2012 23:17:37 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752549Ab2HBVRY (ORCPT <rfc822;linux-netdev-2@m.gmane.org>);
	Thu, 2 Aug 2012 17:17:24 -0400
Original-Received: from mail-ob0-f174.google.com ([209.85.214.174]:41938 "EHLO
	mail-ob0-f174.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752286Ab2HBVRW (ORCPT
	<rfc822;netdev@vger.kernel.org>); Thu, 2 Aug 2012 17:17:22 -0400
Original-Received: by obbuo13 with SMTP id uo13so14388166obb.19
        for <multiple recipients>; Thu, 02 Aug 2012 14:17:21 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=message-id:date:from:user-agent:mime-version:to:cc:subject
         :references:in-reply-to:content-type:content-transfer-encoding;
        bh=XT5CRIUhefQ0nmJnFs8ky+13JSfCA3WTsq5n93vP7wM=;
        b=Ssq3Vy40I5OJsYu5xGuAmtxnlv1FDmQC7c0ILxN9Wm+f3v5Sh8NcHuubZrvO7SaIp4
         tT19J+FoMWsYvFk2vNC41WxNdp1B2PkHM3B6FwoEYUwUgw+VjRgltZajnGw+kRFZQ52/
         pg4TF6HTLH+25u/Vy6dohrCtPHNC9ugx3Z0tskuMevnP7eExF4Qwft8QUyfQRWGai/kw
         vQZBInE+PauoIU3k2eSrh/p4AbSoEp4qKbz3EbI9TabY4TSMheCcX+QbWO2blAoduJFT
         7Nj+akcE+s+Z8oJ7dzW7zxSYIho/a2roNiTupKl39iNFIFkUdPgg4kZSp/INqnItpkM3
         WRJQ==
Original-Received: by 10.182.16.3 with SMTP id b3mr40064077obd.72.1343942241425;
        Thu, 02 Aug 2012 14:17:21 -0700 (PDT)
Original-Received: from [192.168.98.108] (pool-64-222-183-78.man.east.myfairpoint.net. [64.222.183.78])
        by mx.google.com with ESMTPS id 6sm5604954oef.6.2012.08.02.14.17.19
        (version=SSLv3 cipher=OTHER);
        Thu, 02 Aug 2012 14:17:20 -0700 (PDT)
User-Agent: Mozilla/5.0 (X11; Linux i686; rv:14.0) Gecko/20120717 Thunderbird/14.0
In-Reply-To: <50178061.4010709@windriver.com>
Original-Sender: netdev-owner@vger.kernel.org
Precedence: bulk
List-ID: <netdev.vger.kernel.org>
X-Mailing-List: netdev@vger.kernel.org
Xref: news.gmane.org gmane.linux.network:238996 gmane.linux.kernel:1336996
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1336996>

On 07/31/2012 02:51 AM, xufeng zhang wrote:
> Sorry, please ignore the above patch, there was an paste error.
> Please check the following patch.
> ============================================
> I'm wondering if the below solution is fine to you which is based on
> your changes.
> BTW, I have verified this patch and it works ok for all the situation,
> but only one problem persists:
> there is a potential that commands will exceeds SCTP_MAX_NUM_COMMANDS
> which happens during sending lots of small error DATA chunks.
>

I started thinking along the same vein, but was thinking that maybe it 
makes sense to make error list more generic. I need to check the spec on 
the ordering of ERROR chunks.  If they are always after other control 
chunks, then maybe make an error list and queue all errors there.  Then 
when sending control chunks, drain the control queue first, then the 
error queue, and finally the data queue.

BTW, the patch below doesn't include the code to queue the error chunk 
onto the new error queue.

-vlad

> Thanks,
> Xufeng Zhang
>
> ---
>   include/net/sctp/command.h |    1 +
>   include/net/sctp/structs.h |    3 +++
>   net/sctp/outqueue.c        |    7 +++++++
>   net/sctp/sm_sideeffect.c   |   16 ++++++++++++++++
>   net/sctp/sm_statefuns.c    |   17 ++++++++++++++---
>   5 files changed, 41 insertions(+), 3 deletions(-)
>
> diff --git a/include/net/sctp/command.h b/include/net/sctp/command.h
> index 712b3be..62c34f5 100644
> --- a/include/net/sctp/command.h
> +++ b/include/net/sctp/command.h
> @@ -110,6 +110,7 @@ typedef enum {
>          SCTP_CMD_SEND_NEXT_ASCONF, /* Send the next ASCONF after ACK */
>          SCTP_CMD_PURGE_ASCONF_QUEUE, /* Purge all asconf queues.*/
>          SCTP_CMD_SET_ASOC,       /* Restore association context */
> +       SCTP_CMD_GEN_BAD_STREAM, /* Invalid Stream errors happened
> command */
>          SCTP_CMD_LAST
>   } sctp_verb_t;
>
> diff --git a/include/net/sctp/structs.h b/include/net/sctp/structs.h
> index fc5e600..3d218e0 100644
> --- a/include/net/sctp/structs.h
> +++ b/include/net/sctp/structs.h
> @@ -1183,6 +1183,9 @@ struct sctp_outq {
>           */
>          struct list_head abandoned;
>
> +       /* Put Invalid Stream error chunks on this list */
> +       struct list_head bad_stream_err;
> +
>          /* How many unackd bytes do we have in-flight?  */
>          __u32 outstanding_bytes;
>
> diff --git a/net/sctp/outqueue.c b/net/sctp/outqueue.c
> index e7aa177..1e87b0b 100644
> --- a/net/sctp/outqueue.c
> +++ b/net/sctp/outqueue.c
> @@ -211,6 +211,7 @@ void sctp_outq_init(struct sctp_association *asoc,
> struct sctp_outq *q)
>          INIT_LIST_HEAD(&q->retransmit);
>          INIT_LIST_HEAD(&q->sacked);
>          INIT_LIST_HEAD(&q->abandoned);
> +       INIT_LIST_HEAD(&q->bad_stream_err);
>
>          q->fast_rtx = 0;
>          q->outstanding_bytes = 0;
> @@ -283,6 +284,12 @@ void sctp_outq_teardown(struct sctp_outq *q)
>                  list_del_init(&chunk->list);
>                  sctp_chunk_free(chunk);
>          }
> +
> +       /* Throw away any pending Invalid Stream error chunks */
> +       list_for_each_entry_safe(chunk, tmp,&q->bad_stream_err, list) {
> +               list_del_init(&chunk->list);
> +               sctp_chunk_free(chunk);
> +       }
>   }
>
>   /* Free the outqueue structure and any related pending chunks.  */
> diff --git a/net/sctp/sm_sideeffect.c b/net/sctp/sm_sideeffect.c
> index fe99628..4698593 100644
> --- a/net/sctp/sm_sideeffect.c
> +++ b/net/sctp/sm_sideeffect.c
> @@ -1060,6 +1060,18 @@ static void sctp_cmd_send_asconf(struct
> sctp_association *asoc)
>          }
>   }
>
> +static void sctp_cmd_make_inv_stream_err(sctp_cmd_seq_t *commands,
> +               struct sctp_association *asoc)
> +{
> +       struct sctp_chunk *err, *tmp;
> +       struct sctp_outq *q =&asoc->outqueue;
> +
> +       list_for_each_entry_safe(err, tmp,&q->bad_stream_err, list) {
> +               list_del_init(&err->list);
> +               sctp_add_cmd_sf(commands, SCTP_CMD_REPLY,
> +                               SCTP_CHUNK(err));
> +       }
> +}
>
>   /* These three macros allow us to pull the debugging code out of the
>    * main flow of sctp_do_sm() to keep attention focused on the real
> @@ -1724,6 +1736,10 @@ static int sctp_cmd_interpreter(sctp_event_t
> event_type,
>                          asoc = cmd->obj.asoc;
>                          break;
>
> +               case SCTP_CMD_GEN_BAD_STREAM:
> +                       sctp_cmd_make_inv_stream_err(commands, asoc);
> +                       break;
> +
>                  default:
>                          pr_warn("Impossible command: %u, %p\n",
>                                  cmd->verb, cmd->obj.ptr);
> diff --git a/net/sctp/sm_statefuns.c b/net/sctp/sm_statefuns.c
> index 9fca103..1c1bcd9 100644
> --- a/net/sctp/sm_statefuns.c
> +++ b/net/sctp/sm_statefuns.c
> @@ -2967,8 +2967,14 @@ discard_force:
>          return SCTP_DISPOSITION_DISCARD;
>
>   discard_noforce:
> -       if (chunk->end_of_packet)
> +       if (chunk->end_of_packet) {
> +               struct sctp_outq *q =&asoc->outqueue;
>                  sctp_add_cmd_sf(commands, SCTP_CMD_GEN_SACK, force);
> +               /* Queue the INVALID STREAM error after the SACK if one
> is needed. */
> +               if (!list_empty(&q->bad_stream_err))
> +                       sctp_add_cmd_sf(commands, SCTP_CMD_GEN_BAD_STREAM,
> +                                       SCTP_NULL());
> +       }
>
>          return SCTP_DISPOSITION_DISCARD;
>   consume:
> @@ -3037,11 +3043,16 @@ sctp_disposition_t
> sctp_sf_eat_data_fast_4_4(const struct sctp_endpoint *ep,
>           * with a SACK, a SHUTDOWN chunk, and restart the T2-shutdown
> timer
>           */
>          if (chunk->end_of_packet) {
> +               struct sctp_outq *q =&asoc->outqueue;
>                  /* We must delay the chunk creation since the cumulative
>                   * TSN has not been updated yet.
>                   */
>                  sctp_add_cmd_sf(commands, SCTP_CMD_GEN_SHUTDOWN,
> SCTP_NULL());
>                  sctp_add_cmd_sf(commands, SCTP_CMD_GEN_SACK,
> SCTP_FORCE());
> +               /* Queue the INVALID STREAM error after the SACK if one
> is needed. */
> +               if (!list_empty(&q->bad_stream_err))
> +                       sctp_add_cmd_sf(commands, SCTP_CMD_GEN_BAD_STREAM,
> +                                       SCTP_NULL());
>                  sctp_add_cmd_sf(commands, SCTP_CMD_TIMER_RESTART,
>                                  SCTP_TO(SCTP_EVENT_TIMEOUT_T2_SHUTDOWN));
>          }
> @@ -6136,6 +6147,7 @@ static int sctp_eat_data(const struct
> sctp_association *asoc,
>           */
>          sid = ntohs(data_hdr->stream);
>          if (sid>= asoc->c.sinit_max_instreams) {
> +               struct sctp_outq *q =&asoc->outqueue;
>                  /* Mark tsn as received even though we drop it */
>                  sctp_add_cmd_sf(commands, SCTP_CMD_REPORT_TSN,
> SCTP_U32(tsn));
>
> @@ -6144,8 +6156,7 @@ static int sctp_eat_data(const struct
> sctp_association *asoc,
>                                           sizeof(data_hdr->stream),
>                                           sizeof(u16));
>                  if (err)
> -                       sctp_add_cmd_sf(commands, SCTP_CMD_REPLY,
> -                                       SCTP_CHUNK(err));
> +                       list_add_tail(&err->list,&q->bad_stream_err);
>                  return SCTP_IERROR_BAD_STREAM;
>          }
>

