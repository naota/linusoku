Path: news.gmane.org!not-for-mail
From: Toshiaki Yamane <yamanetoshi@gmail.com>
Newsgroups: gmane.linux.drivers.driver-project.devel,gmane.linux.kernel
Subject: [PATCH] staging/vme: fix checkpatch warnings
Date: Sat, 21 Jul 2012 22:00:51 +0900
Lines: 289
Approved: news@gmane.org
Message-ID: <1342875651-16961-1-git-send-email-yamanetoshi@gmail.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1342875678 27680 80.91.229.3 (21 Jul 2012 13:01:18 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Sat, 21 Jul 2012 13:01:18 +0000 (UTC)
Cc: Toshiaki Yamane <yamanetoshi@gmail.com>
To: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
 Martyn Welch <martyn.welch@ge.com>,
 Manohar Vanga <manohar.vanga@gmail.com>, devel@driverdev.osuosl.org,
 linux-kernel@vger.kernel.org
Original-X-From: devel-bounces@linuxdriverproject.org Sat Jul 21 15:01:15 2012
Return-path: <devel-bounces@linuxdriverproject.org>
Envelope-to: glddd-devel@m.gmane.org
Original-Received: from hemlock.osuosl.org ([140.211.166.133])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <devel-bounces@linuxdriverproject.org>)
	id 1SsZIy-0001UE-Ur
	for glddd-devel@m.gmane.org; Sat, 21 Jul 2012 15:01:09 +0200
Original-Received: from localhost (localhost [127.0.0.1])
	by hemlock.osuosl.org (Postfix) with ESMTP id EB0F7A00A6;
	Sat, 21 Jul 2012 13:01:07 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Original-Received: from hemlock.osuosl.org ([127.0.0.1])
	by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id 55ldH2wzu8TL; Sat, 21 Jul 2012 13:01:07 +0000 (UTC)
Original-Received: from driverdev.linuxdriverproject.org (driverdev.linuxdriverproject.org [140.211.166.17])
	by hemlock.osuosl.org (Postfix) with ESMTP id BF79EA003E;
	Sat, 21 Jul 2012 13:01:07 +0000 (UTC)
Original-Received: from driverdev.linuxdriverproject.org (localhost [127.0.0.1])
	by driverdev.linuxdriverproject.org (Postfix) with ESMTP id C999C988D4;
	Sat, 21 Jul 2012 06:00:57 -0700 (PDT)
X-Original-To: devel@driverdev.osuosl.org
Delivered-To: devel@driverdev.osuosl.org
Original-Received: from mail-pb0-f48.google.com (mail-pb0-f48.google.com
 [209.85.160.48])
 by driverdev.linuxdriverproject.org (Postfix) with ESMTP id 4F4FA988D4
 for <devel@driverdev.osuosl.org>; Sat, 21 Jul 2012 06:00:55 -0700 (PDT)
Original-Received: by pbbrq8 with SMTP id rq8so8869507pbb.21
 for <devel@driverdev.osuosl.org>; Sat, 21 Jul 2012 06:00:54 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=from:to:cc:subject:date:message-id:x-mailer;
 bh=5DrAyzLZn9FUTuOXO+6SiRsEmSUs2MKc7/id/MQ+eJE=;
 b=nm5kFNZHC6fBv+eVc6/d7IGLGyJ/wewrJ4eNJwciQEsyx1K3DQ4x3oDHqtQdPhiQcc
 dQ1wWGNrCrDeDF4qNGzDnRieZDEPS1PbgF0yi0q/7MDinPhCCI0ozVo8ZFvHss1xDk67
 /RtNQOgmRC2J931fLlppLQxRwxxnSEUNW4uvjGBaorNH3VeOoplXBoYeFPZhpabfTJ78
 GSIKbCTZWzCJZ/0bgUsM6W+CT9PqRhCX+ekKZTXtaY+iNwa+8UnRXz+SKes6UQzz645Z
 GTfQYs9IVvPCv03n5k0JL+Uz5KeCLBCtegb9nYrur9SLbBr77O5ri6UqZ8DFlLulqS3c
 0Phw==
Original-Received: by 10.68.225.231 with SMTP id rn7mr21412357pbc.13.1342875654520;
 Sat, 21 Jul 2012 06:00:54 -0700 (PDT)
Original-Received: from localhost (softbank220057059032.bbtec.net. [220.57.59.32])
 by mx.google.com with ESMTPS id rs4sm6024539pbc.0.2012.07.21.06.00.51
 (version=TLSv1/SSLv3 cipher=OTHER);
 Sat, 21 Jul 2012 06:00:53 -0700 (PDT)
X-Mailer: git-send-email 1.7.5.4
X-BeenThere: devel@linuxdriverproject.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: Linux Driver Project Developer List <devel.linuxdriverproject.org>
List-Unsubscribe: <http://driverdev.linuxdriverproject.org/mailman/options/devel>, 
 <mailto:devel-request@linuxdriverproject.org?subject=unsubscribe>
List-Archive: <http://driverdev.linuxdriverproject.org/pipermail/devel>
List-Post: <mailto:devel@linuxdriverproject.org>
List-Help: <mailto:devel-request@linuxdriverproject.org?subject=help>
List-Subscribe: <http://driverdev.linuxdriverproject.org/mailman/listinfo/devel>, 
 <mailto:devel-request@linuxdriverproject.org?subject=subscribe>
Errors-To: devel-bounces@linuxdriverproject.org
Original-Sender: devel-bounces@linuxdriverproject.org
Xref: news.gmane.org gmane.linux.drivers.driver-project.devel:28884 gmane.linux.kernel:1331198
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1331198>

Now checkpatch clean.

$ find drivers/staging/vme -name "*.[ch]"|xargs ./scripts/checkpatch.pl \
-f --terse --nosummary|cut -f3- -d":"|sort |uniq -c|sort -n
      1  ERROR: trailing whitespace
      2  WARNING: Prefer pr_debug(... to printk(KERN_DEBUG, ...
      5  WARNING: Prefer pr_info(... to printk(KERN_INFO, ...
      7  WARNING: Prefer pr_err(... to printk(KERN_ERR, ...
      9  WARNING: quoted string split across lines
     13  WARNING: Prefer pr_warn(... to printk(KERN_WARNING, ...

Signed-off-by: Toshiaki Yamane <yamanetoshi@gmail.com>
---
 drivers/staging/vme/devices/vme_pio2_core.c |    9 ++--
 drivers/staging/vme/devices/vme_user.c      |   70 ++++++++++++---------------
 2 files changed, 35 insertions(+), 44 deletions(-)

diff --git a/drivers/staging/vme/devices/vme_pio2_core.c b/drivers/staging/vme/devices/vme_pio2_core.c
index 4bf8e05..b5f942a 100644
--- a/drivers/staging/vme/devices/vme_pio2_core.c
+++ b/drivers/staging/vme/devices/vme_pio2_core.c
@@ -163,15 +163,14 @@ static int __init pio2_init(void)
 	int retval = 0;
 
 	if (bus_num == 0) {
-		printk(KERN_ERR "%s: No cards, skipping registration\n",
-			driver_name);
+		pr_err("%s: No cards, skipping registration\n",
+		       driver_name);
 		goto err_nocard;
 	}
 
 	if (bus_num > PIO2_CARDS_MAX) {
-		printk(KERN_ERR
-			"%s: Driver only able to handle %d PIO2 Cards\n",
-			driver_name, PIO2_CARDS_MAX);
+		pr_err("%s: Driver only able to handle %d PIO2 Cards\n",
+		       driver_name, PIO2_CARDS_MAX);
 		bus_num = PIO2_CARDS_MAX;
 	}
 
diff --git a/drivers/staging/vme/devices/vme_user.c b/drivers/staging/vme/devices/vme_user.c
index e25645e..1c82938 100644
--- a/drivers/staging/vme/devices/vme_user.c
+++ b/drivers/staging/vme/devices/vme_user.c
@@ -170,7 +170,7 @@ static int vme_user_open(struct inode *inode, struct file *file)
 	mutex_lock(&image[minor].mutex);
 	/* Allow device to be opened if a resource is needed and allocated. */
 	if (minor < CONTROL_MINOR && image[minor].resource == NULL) {
-		printk(KERN_ERR "No resources allocated for device\n");
+		pr_err("No resources allocated for device\n");
 		err = -EINVAL;
 		goto err_res;
 	}
@@ -225,13 +225,13 @@ static ssize_t resource_to_user(int minor, char __user *buf, size_t count,
 			(unsigned long)copied);
 		if (retval != 0) {
 			copied = (copied - retval);
-			printk(KERN_INFO "User copy failed\n");
+			pr_info("User copy failed\n");
 			return -EINVAL;
 		}
 
 	} else {
 		/* XXX Need to write this */
-		printk(KERN_INFO "Currently don't support large transfers\n");
+		pr_info("Currently don't support large transfers\n");
 		/* Map in pages from userspace */
 
 		/* Call vme_master_read to do the transfer */
@@ -265,7 +265,7 @@ static ssize_t resource_from_user(unsigned int minor, const char __user *buf,
 			image[minor].kern_buf, copied, *ppos);
 	} else {
 		/* XXX Need to write this */
-		printk(KERN_INFO "Currently don't support large transfers\n");
+		pr_info("Currently don't support large transfers\n");
 		/* Map in pages from userspace */
 
 		/* Call vme_master_write to do the transfer */
@@ -286,7 +286,7 @@ static ssize_t buffer_to_user(unsigned int minor, char __user *buf,
 	retval = __copy_to_user(buf, image_ptr, (unsigned long)count);
 	if (retval != 0) {
 		retval = (count - retval);
-		printk(KERN_WARNING "Partial copy to userspace\n");
+		pr_warn("Partial copy to userspace\n");
 	} else
 		retval = count;
 
@@ -305,7 +305,7 @@ static ssize_t buffer_from_user(unsigned int minor, const char __user *buf,
 	retval = __copy_from_user(image_ptr, buf, (unsigned long)count);
 	if (retval != 0) {
 		retval = (count - retval);
-		printk(KERN_WARNING "Partial copy to userspace\n");
+		pr_warn("Partial copy to userspace\n");
 	} else
 		retval = count;
 
@@ -396,7 +396,7 @@ static ssize_t vme_user_write(struct file *file, const char __user *buf,
 	default:
 		retval = -EINVAL;
 	}
-	
+
 	mutex_unlock(&image[minor].mutex);
 
 	if (retval > 0)
@@ -476,7 +476,7 @@ static int vme_user_ioctl(struct inode *inode, struct file *file,
 			copied = copy_from_user(&irq_req, argp,
 						sizeof(struct vme_irq_id));
 			if (copied != 0) {
-				printk(KERN_WARNING "Partial copy from userspace\n");
+				pr_warn("Partial copy from userspace\n");
 				return -EFAULT;
 			}
 
@@ -503,8 +503,7 @@ static int vme_user_ioctl(struct inode *inode, struct file *file,
 			copied = copy_to_user(argp, &master,
 				sizeof(struct vme_master));
 			if (copied != 0) {
-				printk(KERN_WARNING "Partial copy to "
-					"userspace\n");
+				pr_warn("Partial copy to userspace\n");
 				return -EFAULT;
 			}
 
@@ -515,8 +514,7 @@ static int vme_user_ioctl(struct inode *inode, struct file *file,
 
 			copied = copy_from_user(&master, argp, sizeof(master));
 			if (copied != 0) {
-				printk(KERN_WARNING "Partial copy from "
-					"userspace\n");
+				pr_warn("Partial copy from userspace\n");
 				return -EFAULT;
 			}
 
@@ -546,8 +544,7 @@ static int vme_user_ioctl(struct inode *inode, struct file *file,
 			copied = copy_to_user(argp, &slave,
 				sizeof(struct vme_slave));
 			if (copied != 0) {
-				printk(KERN_WARNING "Partial copy to "
-					"userspace\n");
+				pr_warn("Partial copy to userspace\n");
 				return -EFAULT;
 			}
 
@@ -558,8 +555,7 @@ static int vme_user_ioctl(struct inode *inode, struct file *file,
 
 			copied = copy_from_user(&slave, argp, sizeof(slave));
 			if (copied != 0) {
-				printk(KERN_WARNING "Partial copy from "
-					"userspace\n");
+				pr_warn("Partial copy from userspace\n");
 				return -EFAULT;
 			}
 
@@ -599,8 +595,8 @@ static void buf_unalloc(int num)
 {
 	if (image[num].kern_buf) {
 #ifdef VME_DEBUG
-		printk(KERN_DEBUG "UniverseII:Releasing buffer at %p\n",
-			image[num].pci_buf);
+		pr_debug("UniverseII:Releasing buffer at %p\n",
+			 image[num].pci_buf);
 #endif
 
 		vme_free_consistent(image[num].resource, image[num].size_buf,
@@ -612,7 +608,7 @@ static void buf_unalloc(int num)
 
 #ifdef VME_DEBUG
 	} else {
-		printk(KERN_DEBUG "UniverseII: Buffer not allocated\n");
+		pr_debug("UniverseII: Buffer not allocated\n");
 #endif
 	}
 }
@@ -629,11 +625,11 @@ static int __init vme_user_init(void)
 {
 	int retval = 0;
 
-	printk(KERN_INFO "VME User Space Access Driver\n");
+	pr_info("VME User Space Access Driver\n");
 
 	if (bus_num == 0) {
-		printk(KERN_ERR "%s: No cards, skipping registration\n",
-			driver_name);
+		pr_err("%s: No cards, skipping registration\n",
+		       driver_name);
 		retval = -ENODEV;
 		goto err_nocard;
 	}
@@ -642,8 +638,8 @@ static int __init vme_user_init(void)
 	 * in future revisions if that ever becomes necessary.
 	 */
 	if (bus_num > VME_USER_BUS_MAX) {
-		printk(KERN_ERR "%s: Driver only able to handle %d buses\n",
-			driver_name, VME_USER_BUS_MAX);
+		pr_err("%s: Driver only able to handle %d buses\n",
+		       driver_name, VME_USER_BUS_MAX);
 		bus_num = VME_USER_BUS_MAX;
 	}
 
@@ -683,8 +679,8 @@ static int __devinit vme_user_probe(struct vme_dev *vdev)
 
 	/* Save pointer to the bridge device */
 	if (vme_user_bridge != NULL) {
-		printk(KERN_ERR "%s: Driver can only be loaded for 1 device\n",
-			driver_name);
+		pr_err("%s: Driver can only be loaded for 1 device\n",
+		       driver_name);
 		err = -EINVAL;
 		goto err_dev;
 	}
@@ -707,8 +703,8 @@ static int __devinit vme_user_probe(struct vme_dev *vdev)
 	err = register_chrdev_region(MKDEV(VME_MAJOR, 0), VME_DEVS,
 		driver_name);
 	if (err) {
-		printk(KERN_WARNING "%s: Error getting Major Number %d for "
-		"driver.\n", driver_name, VME_MAJOR);
+		pr_warn("%s: Error getting Major Number %d for driver.\n",
+			driver_name, VME_MAJOR);
 		goto err_region;
 	}
 
@@ -718,7 +714,7 @@ static int __devinit vme_user_probe(struct vme_dev *vdev)
 	vme_user_cdev->owner = THIS_MODULE;
 	err = cdev_add(vme_user_cdev, MKDEV(VME_MAJOR, 0), VME_DEVS);
 	if (err) {
-		printk(KERN_WARNING "%s: cdev_all failed\n", driver_name);
+		pr_warn("%s: cdev_all failed\n", driver_name);
 		goto err_char;
 	}
 
@@ -732,16 +728,14 @@ static int __devinit vme_user_probe(struct vme_dev *vdev)
 		image[i].resource = vme_slave_request(vme_user_bridge,
 			VME_A24, VME_SCT);
 		if (image[i].resource == NULL) {
-			printk(KERN_WARNING "Unable to allocate slave "
-				"resource\n");
+			pr_warn("Unable to allocate slave resource\n");
 			goto err_slave;
 		}
 		image[i].size_buf = PCI_BUF_SIZE;
 		image[i].kern_buf = vme_alloc_consistent(image[i].resource,
 			image[i].size_buf, &image[i].pci_buf);
 		if (image[i].kern_buf == NULL) {
-			printk(KERN_WARNING "Unable to allocate memory for "
-				"buffer\n");
+			pr_warn("Unable to allocate memory for buffer\n");
 			image[i].pci_buf = 0;
 			vme_slave_free(image[i].resource);
 			err = -ENOMEM;
@@ -758,15 +752,13 @@ static int __devinit vme_user_probe(struct vme_dev *vdev)
 		image[i].resource = vme_master_request(vme_user_bridge,
 			VME_A32, VME_SCT, VME_D32);
 		if (image[i].resource == NULL) {
-			printk(KERN_WARNING "Unable to allocate master "
-				"resource\n");
+			pr_warn("Unable to allocate master resource\n");
 			goto err_master;
 		}
 		image[i].size_buf = PCI_BUF_SIZE;
 		image[i].kern_buf = kmalloc(image[i].size_buf, GFP_KERNEL);
 		if (image[i].kern_buf == NULL) {
-			printk(KERN_WARNING "Unable to allocate memory for "
-				"master window buffers\n");
+			pr_warn("Unable to allocate memory for master window buffers\n");
 			err = -ENOMEM;
 			goto err_master_buf;
 		}
@@ -775,7 +767,7 @@ static int __devinit vme_user_probe(struct vme_dev *vdev)
 	/* Create sysfs entries - on udev systems this creates the dev files */
 	vme_user_sysfs_class = class_create(THIS_MODULE, driver_name);
 	if (IS_ERR(vme_user_sysfs_class)) {
-		printk(KERN_ERR "Error creating vme_user class.\n");
+		pr_err("Error creating vme_user class.\n");
 		err = PTR_ERR(vme_user_sysfs_class);
 		goto err_class;
 	}
@@ -803,7 +795,7 @@ static int __devinit vme_user_probe(struct vme_dev *vdev)
 		image[i].device = device_create(vme_user_sysfs_class, NULL,
 					MKDEV(VME_MAJOR, i), NULL, name, num);
 		if (IS_ERR(image[i].device)) {
-			printk(KERN_INFO "%s: Error creating sysfs device\n",
+			pr_info("%s: Error creating sysfs device\n",
 				driver_name);
 			err = PTR_ERR(image[i].device);
 			goto err_sysfs;
-- 
1.7.5.4
