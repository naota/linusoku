Path: news.gmane.org!not-for-mail
From: Linus Walleij <linus.walleij@linaro.org>
Newsgroups: gmane.linux.kernel,gmane.linux.ports.arm.kernel
Subject: Re: [RFC] ARM: sched_clock: update epoch_cyc on resume
Date: Mon, 23 Jul 2012 20:55:22 +0200
Lines: 30
Approved: news@gmane.org
Message-ID: <CACRpkdaHdCvx1HJNDsyJSZAN--sF+4-V1TbzXZL1v+7Asoe_oA@mail.gmail.com>
References: <1342567672-29071-1-git-send-email-ccross@android.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
X-Trace: dough.gmane.org 1343069734 20029 80.91.229.3 (23 Jul 2012 18:55:34 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Mon, 23 Jul 2012 18:55:34 +0000 (UTC)
Cc: linux-arm-kernel@lists.infradead.org,
	Russell King <linux@arm.linux.org.uk>,
	Krzysztof Halasa <khc@pm.waw.pl>,
	Nicolas Pitre <nico@linaro.org>,
	Marc Zyngier <marc.zyngier@arm.com>,
	linux-kernel@vger.kernel.org, Thomas Gleixner <tglx@linutronix.de>
To: Colin Cross <ccross@android.com>
Original-X-From: linux-kernel-owner@vger.kernel.org Mon Jul 23 20:55:32 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1StNn1-0005lQ-EQ
	for glk-linux-kernel-3@plane.gmane.org; Mon, 23 Jul 2012 20:55:31 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754695Ab2GWSzZ (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Mon, 23 Jul 2012 14:55:25 -0400
Original-Received: from mail-qc0-f174.google.com ([209.85.216.174]:53687 "EHLO
	mail-qc0-f174.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753828Ab2GWSzX (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Mon, 23 Jul 2012 14:55:23 -0400
Original-Received: by qcro28 with SMTP id o28so3435255qcr.19
        for <linux-kernel@vger.kernel.org>; Mon, 23 Jul 2012 11:55:22 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type:x-gm-message-state;
        bh=7VxV/5vAaF4gK4dTQ5QQgbOVNa7tLTi6t9+oVHZ3CLE=;
        b=il90W3I2qy8Gdl1J6+StsmutPnL14EYpXlitQqjxL1Y0QuOMXduDkrq1i6AtZydKtu
         2KDgUCqhzi4iRdCsuV6Xjddzw0FdE6qVZgHZg14yUijRAZ4adWZeFNvy+jiHwvUs7Z3F
         9ZYtlPyL4U91ghLdRqlAVD8oqY/wTsoxEsKpwcZmhB4iupyfgyDj0gsNEpyTvmZt7maj
         etV/gmAkH/VqMWq/sI/X5XY43CENKGm9x6xBRKosSphSpUFLpBXYhiAtRsHRZq8dNzfe
         YLwKfml5jHU1PsDJK3bKUUUUISR3SyVsBBCXvXX6PXtzCYf7EQeuPKcry+wC+tJmHuq9
         +6/A==
Original-Received: by 10.224.197.7 with SMTP id ei7mr26129212qab.90.1343069722301; Mon,
 23 Jul 2012 11:55:22 -0700 (PDT)
Original-Received: by 10.229.234.81 with HTTP; Mon, 23 Jul 2012 11:55:22 -0700 (PDT)
In-Reply-To: <1342567672-29071-1-git-send-email-ccross@android.com>
X-Gm-Message-State: ALoCoQml2T3SW9RgvTpueVWHeBin62urovOr87KVgFfwmLFDQbFEqUuIRhU2c5or8eDma6jP+Oyj
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1331927 gmane.linux.ports.arm.kernel:178455
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1331927>

On Wed, Jul 18, 2012 at 1:27 AM, Colin Cross <ccross@android.com> wrote:

> This will have a side effect of causing SoCs that have clocks that
> continue to count in suspend to appear to stop counting, reporting the
> same sched_clock() value before and after suspend.

So for our platform (ux500) that has a sched clock that *does*
continue to run during suspend,
drivers/clocksource/clksrc-dbx500-prcmu.c
how do we opt out of this behaviour?

Since sched_clock is used for the debug prints, if we have a
crash immediately after resume() it will appear to be at resume
time in the log which kinda sucks. :-(

Isn't the proper way to do this either:

- Assign suspend/resume hooks to the sched_clock code in the
  platform and let the code that reads the hardware clock deal with
  this

Or

- If it absolutely needs to be in the core code, also have a bool
  field indicating whether the clock is going to die during suspend
  and add new registration functions for setting that sched_clock
  type, e.g. setup_sched_clock_nonsuspendable()

Yours,
Linus Walleij
