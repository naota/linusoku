Path: news.gmane.org!not-for-mail
From: Kent Overstreet <koverstreet-hpIqsD4AKlfQT0dZR+AlfA@public.gmane.org>
Newsgroups: gmane.linux.kernel.bcache.devel,gmane.linux.kernel,gmane.linux.kernel.device-mapper.devel,gmane.linux.kernel.drbd.devel
Subject: Re: [PATCH v4 05/12] block: Kill bi_destructor
Date: Wed, 25 Jul 2012 16:15:15 -0700
Lines: 168
Approved: news@gmane.org
Message-ID: <20120725231515.GC8673@moria.home.lan>
References: <1343160689-12378-1-git-send-email-koverstreet@google.com>
 <1343160689-12378-6-git-send-email-koverstreet@google.com>
 <500FDB0D.4070605@panasas.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Trace: dough.gmane.org 1343258128 3925 80.91.229.3 (25 Jul 2012 23:15:28 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Wed, 25 Jul 2012 23:15:28 +0000 (UTC)
Cc: linux-bcache-u79uwXL29TY76Z2rM5mHXA@public.gmane.org, linux-kernel-u79uwXL29TY76Z2rM5mHXA@public.gmane.org,
	dm-devel-H+wXaHxf7aLQT0dZR+AlfA@public.gmane.org, tj-DgEjT+Ai2ygdnm+yROfE0A@public.gmane.org, axboe-tSWWG44O7X1aa/9Udqfwiw@public.gmane.org,
	agk-H+wXaHxf7aLQT0dZR+AlfA@public.gmane.org, neilb-l3A5Bk7waGM@public.gmane.org, drbd-dev-cunTk1MwBs8qoQakbn7OcQ@public.gmane.org,
	vgoyal-H+wXaHxf7aLQT0dZR+AlfA@public.gmane.org, mpatocka-H+wXaHxf7aLQT0dZR+AlfA@public.gmane.org, sage-BnTBU8nroG7k1uMJSBkQmQ@public.gmane.org,
	yehuda-L5o5AL9CYN0tUFlbccrkMA@public.gmane.org
To: Boaz Harrosh <bharrosh-C4P08NqkoRlBDgjK7y7TUQ@public.gmane.org>
Original-X-From: linux-bcache-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org Thu Jul 26 01:15:25 2012
Return-path: <linux-bcache-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>
Envelope-to: glbd-linux-bcache-wOFGN7rlS/M9smdsby/KFg@public.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-bcache-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>)
	id 1SuAnb-00048c-3k
	for glbd-linux-bcache-wOFGN7rlS/M9smdsby/KFg@public.gmane.org; Thu, 26 Jul 2012 01:15:23 +0200
Original-Received: (majordomo-u79uwXL29TY76Z2rM5mHXA@public.gmane.org) by vger.kernel.org via listexpand
	id S1751557Ab2GYXPV (ORCPT <rfc822;glbd-linux-bcache@m.gmane.org>);
	Wed, 25 Jul 2012 19:15:21 -0400
Original-Received: from mail-pb0-f46.google.com ([209.85.160.46]:55464 "EHLO
	mail-pb0-f46.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751507Ab2GYXPU (ORCPT
	<rfc822;linux-bcache-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>);
	Wed, 25 Jul 2012 19:15:20 -0400
Original-Received: by pbbrp8 with SMTP id rp8so2162685pbb.19
        for <linux-bcache-u79uwXL29TY76Z2rM5mHXA@public.gmane.org>; Wed, 25 Jul 2012 16:15:19 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-type:content-disposition:in-reply-to:user-agent;
        bh=X1FHeWe8z88P21GutDht7PIlwWG4JuR4PrQzH9kGHbM=;
        b=ZbDfJx9FbkSVE2BOEtxDuplRoBoy3cL4L6Vn+nGpv03zbZXrWioOhxN7hEP4VuzO7y
         Zs/jxWfpw8u90zmzwvs+aOJO+LF/4h4YXYICG0kcsec9Al4GYRr4YvDNZiyO+lH0KGor
         p6MHn+Ayw/s5eA8AivWqCjhLeoMl/c9GqMdJ8W+SNzrhxg+wMgGukkXFAQOJx09NS384
         Xf+PH8YpoVBYWh7fZrK8yfYkGxQU8n2jifE978Q2RwcPzJD85TK4JCNyZZ4zEVJzpdwy
         VCBllyGBf1YYvPwx5ta0ohUTyVXJoNndhAe5CoTFhg9jmpRD35enQ1FH/LWhGUzwOtVk
         GRXA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-type:content-disposition:in-reply-to:user-agent
         :x-gm-message-state;
        bh=X1FHeWe8z88P21GutDht7PIlwWG4JuR4PrQzH9kGHbM=;
        b=BEijClSlVpoEUpjjyCEPwnjNcZv+1lWtqQFvXc1nM6rgL9Dv7u0dOyY9RXeuCkbZUh
         D0BDPkFa7QQ0F0IFY9cfaObqLmXILCsiB2cyZb1xM6QbOcxCB3ku5GcnHE+Lux3QMELI
         8iot9tXkPdpihG0Q1iDpgbMudmIOj3app4KaJkStqTyxG0o1zrffeEvu4Z1cuYLQbgwt
         V6CNLR3BPOvnMHhnxXvQyO1wNEYf+xiFNXlz6kYV/c4m28fjBHHj4EbA6cdG3uctDcY8
         ZwKAwzJYL8TMgK/CvcPCf5wwGqnzqg4dsayhbwm87wpQL5QIaaEQL1091y9rYHpSXrsd
         W+Ow==
Original-Received: by 10.68.227.40 with SMTP id rx8mr186919pbc.6.1343258119632;
        Wed, 25 Jul 2012 16:15:19 -0700 (PDT)
Original-Received: by 10.68.227.40 with SMTP id rx8mr186878pbc.6.1343258119402;
        Wed, 25 Jul 2012 16:15:19 -0700 (PDT)
Original-Received: from moria.home.lan (c-67-188-232-164.hsd1.ca.comcast.net. [67.188.232.164])
        by mx.google.com with ESMTPS id pt2sm15220567pbb.58.2012.07.25.16.15.17
        (version=SSLv3 cipher=OTHER);
        Wed, 25 Jul 2012 16:15:18 -0700 (PDT)
Content-Disposition: inline
In-Reply-To: <500FDB0D.4070605-C4P08NqkoRlBDgjK7y7TUQ@public.gmane.org>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-Gm-Message-State: ALoCoQksuTFa5FMkN62fCX/UDUtddBKVdOWgWY2TEd6eLXkq0icC3swrPzVsOdedjCVxLONIGJoFa+/qEppqlVTosfg429cr6THYF1eNzuzFF3uvQe4IWe+ENlypP5Fco0tfK1VB961j3Fn+xZVxfiW2d6KFcwTciVlwLuQ+X+VhQZqga2rXGlP5L8EgqV1RffqMFuveStUS
Original-Sender: linux-bcache-owner-u79uwXL29TY76Z2rM5mHXA@public.gmane.org
Precedence: bulk
List-ID: <linux-bcache.vger.kernel.org>
X-Mailing-List: linux-bcache-u79uwXL29TY76Z2rM5mHXA@public.gmane.org
Xref: news.gmane.org gmane.linux.kernel.bcache.devel:643 gmane.linux.kernel:1333320 gmane.linux.kernel.device-mapper.devel:16428 gmane.linux.kernel.drbd.devel:2048
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1333320>

On Wed, Jul 25, 2012 at 02:39:57PM +0300, Boaz Harrosh wrote:
> On 07/24/2012 11:11 PM, Kent Overstreet wrote:
> 
> > Now that we've got generic code for freeing bios allocated from bio
> > pools, this isn't needed anymore.
> > 
> > This also changes the semantics of bio_free() a bit - it now also frees
> > bios allocated by bio_kmalloc(). It's also no longer exported, as
> > without bi_destructor there should be no need for it to be called
> > anywhere else.
> > 
> > Signed-off-by: Kent Overstreet <koverstreet-hpIqsD4AKlfQT0dZR+AlfA@public.gmane.org>
> 
> <snip>
> 
> > diff --git a/drivers/target/target_core_iblock.c b/drivers/target/target_core_iblock.c
> > index be65582..9338d0602 100644
> > --- a/drivers/target/target_core_iblock.c
> > +++ b/drivers/target/target_core_iblock.c
> > @@ -467,15 +467,7 @@ iblock_get_bio(struct se_cmd *cmd, sector_t lba, u32 sg_num)
> >  	}
> >  
> >  	bio->bi_bdev = ib_dev->ibd_bd;
> > -<<<<<<< HEAD
> >  	bio->bi_private = cmd;
> > -	bio->bi_destructor = iblock_bio_destructor;
> > -||||||| merged common ancestors
> > -	bio->bi_private = task;
> > -	bio->bi_destructor = iblock_bio_destructor;
> > -=======
> > -	bio->bi_private = task;
> > ->>>>>>> block: Generalized bio pool freeing
> >  	bio->bi_end_io = &iblock_bio_done;
> >  	bio->bi_sector = lba;
> >  	return bio;
> 
> 
> Merge conflict allmodconfig compilation please?
> 
> > diff --git a/fs/bio.c b/fs/bio.c
> > index 252e253..a301071 100644
> > --- a/fs/bio.c
> > +++ b/fs/bio.c
> > @@ -56,6 +56,9 @@ static struct biovec_slab bvec_slabs[BIOVEC_NR_POOLS] __read_mostly = {
> >   */
> >  struct bio_set *fs_bio_set;
> >  
> > +/* Only used as a sentinal value */
> > +static struct bio_set bio_kmalloc_pool;
> > +
> 
> 
> Id rather if you use a define like:
> #define BIO_KMALLOC_POOL ((void *)~0)
> 
> So any code access actually crashes in the bug case where
> this leaks out. (And there is no actual unused storage allocated)

I kind of prefer having a sentinal value that can't be used for anything
else, but it doesn't really matter if there's only ever going to be one
sentinal value.

> BTW I like this reuse of the bi_pool member as a flag as well.

Yeah me too, this way bi_pool always tells you how to free the bio.

diff --git a/fs/bio.c b/fs/bio.c
index c7f3442..ebc7309 100644
--- a/fs/bio.c
+++ b/fs/bio.c
@@ -56,6 +56,8 @@ static struct biovec_slab bvec_slabs[BIOVEC_NR_POOLS] __read_mostly = {
  */
 struct bio_set *fs_bio_set;
 
+#define BIO_KMALLOC_POOL ((void *) ~0)
+
 /*
  * Our slab pool management
  */
@@ -232,10 +234,21 @@ fallback:
 	return bvl;
 }
 
-void bio_free(struct bio *bio, struct bio_set *bs)
+void bio_free(struct bio *bio)
 {
+	struct bio_set *bs = bio->bi_pool;
 	void *p;
 
+	BUG_ON(!bs);
+
+	if (bs == BIO_KMALLOC_POOL) {
+		/* Bio was allocated by bio_kmalloc() */
+		if (bio_integrity(bio))
+			bio_integrity_free(bio, fs_bio_set);
+		kfree(bio);
+		return;
+	}
+
 	if (bio_has_allocated_vec(bio))
 		bvec_free_bs(bs, bio->bi_io_vec, BIO_POOL_IDX(bio));
 
@@ -346,13 +359,6 @@ struct bio *bio_alloc(gfp_t gfp_mask, unsigned int nr_iovecs)
 }
 EXPORT_SYMBOL(bio_alloc);
 
-static void bio_kmalloc_destructor(struct bio *bio)
-{
-	if (bio_integrity(bio))
-		bio_integrity_free(bio, fs_bio_set);
-	kfree(bio);
-}
-
 /**
  * bio_kmalloc - allocate a bio for I/O using kmalloc()
  * @gfp_mask:   the GFP_ mask given to the slab allocator
@@ -379,7 +385,7 @@ struct bio *bio_kmalloc(gfp_t gfp_mask, unsigned int nr_iovecs)
 	bio->bi_flags |= BIO_POOL_NONE << BIO_POOL_OFFSET;
 	bio->bi_max_vecs = nr_iovecs;
 	bio->bi_io_vec = bio->bi_inline_vecs;
-	bio->bi_destructor = bio_kmalloc_destructor;
+	bio->bi_pool = BIO_KMALLOC_POOL;
 
 	return bio;
 }
@@ -417,12 +423,7 @@ void bio_put(struct bio *bio)
 	 */
 	if (atomic_dec_and_test(&bio->bi_cnt)) {
 		bio_disassociate_task(bio);
-		bio->bi_next = NULL;
-
-		if (bio->bi_pool)
-			bio_free(bio, bio->bi_pool);
-		else
-			bio->bi_destructor(bio);
+		bio_free(bio);
 	}
 }
 EXPORT_SYMBOL(bio_put);
diff --git a/include/linux/bio.h b/include/linux/bio.h
index ba60319..393c87e 100644
--- a/include/linux/bio.h
+++ b/include/linux/bio.h
@@ -216,7 +216,7 @@ extern struct bio *bio_alloc(gfp_t, unsigned int);
 extern struct bio *bio_kmalloc(gfp_t, unsigned int);
 extern struct bio *bio_alloc_bioset(gfp_t, int, struct bio_set *);
 extern void bio_put(struct bio *);
-extern void bio_free(struct bio *, struct bio_set *);
+extern void bio_free(struct bio *);
 
 extern void bio_endio(struct bio *, int);
 struct request_queue;
diff --git a/include/linux/blk_types.h b/include/linux/blk_types.h
index 769799f..4bd8685 100644
--- a/include/linux/blk_types.h
+++ b/include/linux/blk_types.h
@@ -84,11 +84,8 @@ struct bio {
 	struct bio_integrity_payload *bi_integrity;  /* data integrity */
 #endif
 
-	/* If bi_pool is non NULL, bi_destructor is not called */
 	struct bio_set		*bi_pool;
 
-	bio_destructor_t	*bi_destructor;	/* destructor */
-
 	/*
 	 * We can inline a number of vecs at the end of the bio, to avoid
 	 * double allocations for a small number of bio_vecs. This member
