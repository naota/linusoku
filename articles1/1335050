Path: news.gmane.org!not-for-mail
From: "S, Venkatraman" <svenkatr@ti.com>
Newsgroups: gmane.linux.kernel.mmc,gmane.linux.kernel
Subject: Re: [PATCH RESEND v2] mmc: core: Remove bounce buffer in mmc_send_cxd_data()
Date: Mon, 30 Jul 2012 18:46:31 +0530
Lines: 142
Approved: news@gmane.org
Message-ID: <CANfBPZ-pa++A=OSmhaEfVs-TDVtTbsBi4FacaPxuvfNJRe-Jxw@mail.gmail.com>
References: <1343613881-6803-1-git-send-email-kyungsik.lee@lge.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
X-Trace: dough.gmane.org 1343654218 10912 80.91.229.3 (30 Jul 2012 13:16:58 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Mon, 30 Jul 2012 13:16:58 +0000 (UTC)
Cc: Chris Ball <cjb@laptop.org>,
	Jaehoon Chung <jh80.chung@samsung.com>,
	raphael.andy.lee@gmail.com, linux-mmc@vger.kernel.org,
	linux-kernel@vger.kernel.org
To: Kyungsik Lee <kyungsik.lee@lge.com>
Original-X-From: linux-mmc-owner@vger.kernel.org Mon Jul 30 15:16:55 2012
Return-path: <linux-mmc-owner@vger.kernel.org>
Envelope-to: glkm-linux-mmc@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-mmc-owner@vger.kernel.org>)
	id 1SvpqB-0005cG-4E
	for glkm-linux-mmc@plane.gmane.org; Mon, 30 Jul 2012 15:16:55 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754102Ab2G3NQx (ORCPT <rfc822;glkm-linux-mmc@m.gmane.org>);
	Mon, 30 Jul 2012 09:16:53 -0400
Original-Received: from na3sys009aog131.obsmtp.com ([74.125.149.247]:46921 "EHLO
	na3sys009aog131.obsmtp.com" rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1754096Ab2G3NQx (ORCPT
	<rfc822;linux-mmc@vger.kernel.org>); Mon, 30 Jul 2012 09:16:53 -0400
Original-Received: from mail-qa0-f51.google.com ([209.85.216.51]) (using TLSv1) by na3sys009aob131.postini.com ([74.125.148.12]) with SMTP
	ID DSNKUBaJROmfH0buuN5JLK9fNqu1OYQ0g+5c@postini.com; Mon, 30 Jul 2012 06:16:52 PDT
Original-Received: by qaea16 with SMTP id a16so858444qae.10
        for <linux-mmc@vger.kernel.org>; Mon, 30 Jul 2012 06:16:51 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:content-type:x-gm-message-state;
        bh=v8+8eTfoVO9+f7KDndAXw+6P+f0+iX1eRkHwRJMcf20=;
        b=NqM+exWrImkNlM8H09Bgy4usihAfauDVLsm59/xZnveoOlvH/PwKGio+gK1ES7KRv1
         Nx56LdkCn+KRP2Xypi1RjRy8dmMM06Cq9EzMFtpzE4iYEZD0pzovlmqsST1ykEQOW5gA
         YkPS9YWvlGjS5aGcMT9l3vwgcILysV/AITaViTqAe6IdaEhd6mi35NIjCQh4HQQsIPht
         Q3j6dDdpIVnFsgtOCT0vHiLK8urNZPDieU3liASidkcCOnZKqkXbhpseAfoI4O1sbE/U
         mLiut3Rx2lz/2fUFkMlzO7+q7yc+nq03Tn4DoUKzo8eenwA268xGOdvpevlcc7gcvM8S
         u7KQ==
Original-Received: by 10.60.172.143 with SMTP id bc15mr17239595oec.73.1343654211505;
 Mon, 30 Jul 2012 06:16:51 -0700 (PDT)
Original-Received: by 10.182.67.197 with HTTP; Mon, 30 Jul 2012 06:16:31 -0700 (PDT)
In-Reply-To: <1343613881-6803-1-git-send-email-kyungsik.lee@lge.com>
X-Gm-Message-State: ALoCoQkAEIp+3LBLg9BtLPwRSfbVkbj2GLiACkrVWihNqUZe+f215qzdMGiVWfLw9Q3aq9OiTexA
Original-Sender: linux-mmc-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-mmc.vger.kernel.org>
X-Mailing-List: linux-mmc@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel.mmc:15794 gmane.linux.kernel:1335050
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1335050>

On Mon, Jul 30, 2012 at 7:34 AM, Kyungsik Lee <kyungsik.lee@lge.com> wrote:
> It is expected that Extended CSD register(the size of this register
> is larger than CID/CSD) will be referenced more frequently as more
> fields have been added to Extended CSD and it seems that it is not
> a good option to double the memory used.
>
> This patch is intended to avoid the use of bounce buffer for reading
> Extended CSD register in mmc_send_cxd_data().
Maybe I am reading this wrong, but mmc_send_cid and mmc_send_csd are always
called with card->raw_cid and card->raw_csd, which are allocated from the heap,
(from mmc_alloc_card).
So the second half of your changes are not required, or a WARN_ON
might suffice ?

>
> Signed-off-by: Kyungsik Lee <kyungsik.lee@lge.com>
> ---
> Changes in v2:
> - Handling on-stack buffer if it's used in caller.
> ---
>  drivers/mmc/core/mmc_ops.c |   56 ++++++++++++++++++++++++++++++++++---------
>  1 files changed, 44 insertions(+), 12 deletions(-)
>
> diff --git a/drivers/mmc/core/mmc_ops.c b/drivers/mmc/core/mmc_ops.c
> index 0ed2cc5..dae5492 100644
> --- a/drivers/mmc/core/mmc_ops.c
> +++ b/drivers/mmc/core/mmc_ops.c
> @@ -239,13 +239,19 @@ mmc_send_cxd_data(struct mmc_card *card, struct mmc_host *host,
>         struct mmc_data data = {0};
>         struct scatterlist sg;
>         void *data_buf;
> +       int is_on_stack;
>
> -       /* dma onto stack is unsafe/nonportable, but callers to this
> -        * routine normally provide temporary on-stack buffers ...
> -        */
> -       data_buf = kmalloc(len, GFP_KERNEL);
> -       if (data_buf == NULL)
> -               return -ENOMEM;
> +       is_on_stack = object_is_on_stack(buf);
> +       if (is_on_stack) {
> +
> +               /* dma onto stack is unsafe/nonportable, but callers to this
> +                * routine normally provide temporary on-stack buffers ...
> +                */
> +               data_buf = kmalloc(len, GFP_KERNEL);
> +               if (data_buf == NULL)
> +                       return -ENOMEM;
> +       } else
> +               data_buf = buf;
>
>         mrq.cmd = &cmd;
>         mrq.data = &data;
> @@ -280,8 +286,10 @@ mmc_send_cxd_data(struct mmc_card *card, struct mmc_host *host,
>
>         mmc_wait_for_req(host, &mrq);
>
> -       memcpy(buf, data_buf, len);
> -       kfree(data_buf);
> +       if (is_on_stack) {
> +               memcpy(buf, data_buf, len);
> +               kfree(data_buf);
> +       }
>
>         if (cmd.error)
>                 return cmd.error;
> @@ -294,24 +302,37 @@ mmc_send_cxd_data(struct mmc_card *card, struct mmc_host *host,
>  int mmc_send_csd(struct mmc_card *card, u32 *csd)
>  {
>         int ret, i;
> +       u32 *csd_tmp;
>
>         if (!mmc_host_is_spi(card->host))
>                 return mmc_send_cxd_native(card->host, card->rca << 16,
>                                 csd, MMC_SEND_CSD);
>
> -       ret = mmc_send_cxd_data(card, card->host, MMC_SEND_CSD, csd, 16);
> +       csd_tmp = kmalloc(16, GFP_KERNEL);
> +       if (!csd_tmp)
> +               return -ENOMEM;
> +
> +       ret = mmc_send_cxd_data(card, card->host, MMC_SEND_CSD, csd_tmp, 16);
>         if (ret)
> -               return ret;
> +               goto err;
> +
> +       memcpy(csd, csd_tmp, 16);
>
>         for (i = 0;i < 4;i++)
>                 csd[i] = be32_to_cpu(csd[i]);
>
> +       kfree(csd_tmp);
>         return 0;
> +
> +err:
> +       kfree(csd_tmp);
> +       return ret;
>  }
>
>  int mmc_send_cid(struct mmc_host *host, u32 *cid)
>  {
>         int ret, i;
> +       u32 *cid_tmp;
>
>         if (!mmc_host_is_spi(host)) {
>                 if (!host->card)
> @@ -320,14 +341,25 @@ int mmc_send_cid(struct mmc_host *host, u32 *cid)
>                                 cid, MMC_SEND_CID);
>         }
>
> -       ret = mmc_send_cxd_data(NULL, host, MMC_SEND_CID, cid, 16);
> +       cid_tmp = kmalloc(16, GFP_KERNEL);
> +       if (!cid_tmp)
> +               return -ENOMEM;
> +
> +       ret = mmc_send_cxd_data(NULL, host, MMC_SEND_CID, cid_tmp, 16);
>         if (ret)
> -               return ret;
> +               goto err;
> +
> +       memcpy(cid, cid_tmp, 16);
>
>         for (i = 0;i < 4;i++)
>                 cid[i] = be32_to_cpu(cid[i]);
>
> +       kfree(cid_tmp);
>         return 0;
> +
> +err:
> +       kfree(cid_tmp);
> +       return ret;
>  }
>
>  int mmc_send_ext_csd(struct mmc_card *card, u8 *ext_csd)
> --
> 1.7.0.4
>
--
To unsubscribe from this list: send the line "unsubscribe linux-mmc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

