Path: news.gmane.org!not-for-mail
From: Kent Overstreet <koverstreet@google.com>
Newsgroups: gmane.linux.kernel.device-mapper.devel,gmane.linux.kernel.bcache.devel,gmane.linux.kernel,gmane.linux.kernel.drbd.devel
Subject: [PATCH v4 04/12] pktcdvd: Switch to bio_kmalloc()
Date: Tue, 24 Jul 2012 13:11:21 -0700
Lines: 191
Approved: news@gmane.org
Message-ID: <1343160689-12378-5-git-send-email-koverstreet@google.com>
References: <1343160689-12378-1-git-send-email-koverstreet@google.com>
Reply-To: device-mapper development <dm-devel@redhat.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1343160860 7858 80.91.229.3 (24 Jul 2012 20:14:20 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Tue, 24 Jul 2012 20:14:20 +0000 (UTC)
Cc: axboe@kernel.dk, yehuda@hq.newdream.net,
        Kent Overstreet <koverstreet@google.com>, mpatocka@redhat.com,
        vgoyal@redhat.com, bharrosh@panasas.com, tj@kernel.org,
        sage@newdream.net, agk@redhat.com, drbd-dev@lists.linbit.com
To: linux-bcache@vger.kernel.org, linux-kernel@vger.kernel.org,
        dm-devel@redhat.com
Original-X-From: dm-devel-bounces@redhat.com Tue Jul 24 22:14:17 2012
Return-path: <dm-devel-bounces@redhat.com>
Envelope-to: glkdd-dm-devel@gmane.org
Original-Received: from mx4-phx2.redhat.com ([209.132.183.25])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <dm-devel-bounces@redhat.com>)
	id 1StlUk-0004Kg-Ay
	for glkdd-dm-devel@gmane.org; Tue, 24 Jul 2012 22:14:14 +0200
Original-Received: from lists01.pubmisc.prod.ext.phx2.redhat.com (lists01.pubmisc.prod.ext.phx2.redhat.com [10.5.19.33])
	by mx4-phx2.redhat.com (8.13.8/8.13.8) with ESMTP id q6OKCxoi004382;
	Tue, 24 Jul 2012 16:12:59 -0400
Original-Received: from int-mx09.intmail.prod.int.phx2.redhat.com
	(int-mx09.intmail.prod.int.phx2.redhat.com [10.5.11.22])
	by lists01.pubmisc.prod.ext.phx2.redhat.com (8.13.8/8.13.8) with ESMTP
	id q6OKC5mK028239 for <dm-devel@listman.util.phx.redhat.com>;
	Tue, 24 Jul 2012 16:12:05 -0400
Original-Received: from mx1.redhat.com (ext-mx13.extmail.prod.ext.phx2.redhat.com
	[10.5.110.18])
	by int-mx09.intmail.prod.int.phx2.redhat.com (8.14.4/8.14.4) with ESMTP
	id q6OKC03C012954
	for <dm-devel@redhat.com>; Tue, 24 Jul 2012 16:12:00 -0400
Original-Received: from mail-gg0-f174.google.com (mail-gg0-f174.google.com
	[209.85.161.174])
	by mx1.redhat.com (8.14.4/8.14.4) with ESMTP id q6OKBpKE014193
	for <dm-devel@redhat.com>; Tue, 24 Jul 2012 16:11:58 -0400
Original-Received: by mail-gg0-f174.google.com with SMTP id u4so7886636ggl.33
	for <dm-devel@redhat.com>; Tue, 24 Jul 2012 13:11:58 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=20120113;
	h=from:to:cc:subject:date:message-id:x-mailer:in-reply-to:references;
	bh=WBsEzbEjrhhW4O0jiLa0GYGTmmw+ufAn9CffobdwE2w=;
	b=KUMktgFpxA/QD8XMu+JfU9HC2ctWDrXOtkWWWD/tiZDhmTwBl19bZuxVUHLFE3qCGw
	D17ljo0qsdQzMpYl0qQqd3SRVj2iGhN8YyrB1RAgLcBJrKK0dMbfvvj58O/mRfHdL3oM
	CjqzfcPtddNZ6XlNZXtj8Ty0dd+4T3uTdRJSGsZ4y1d4ElOFNlIMC79yEsZcDCuprlco
	43YqcYTk8rPocwS/FaBAgNBcM+b/7RR09YJxS7B06vCBN8Q6zTFk+CdNWTDzBopAalnw
	Qlz6PgrOWGFjweJKdHbsDurAatjuGPFE/UD1iT/TxXOjkoHNqQZGxK82RqDkdC2N5oMy
	L2+w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=google.com; s=20120113;
	h=from:to:cc:subject:date:message-id:x-mailer:in-reply-to:references
	:x-gm-message-state;
	bh=WBsEzbEjrhhW4O0jiLa0GYGTmmw+ufAn9CffobdwE2w=;
	b=NQzFyPY2jeHH8L5mWET6sHR2gL9+gfauXxXhA5jRH1KhyDoKbYlN6m+2SmtyRvpQ+Y
	OrXMsAZSsERfaavmrUjXasuifQ26f0uhA0rFkAGB/fmZz1UecQQJRaG5J0IcvnXcSGKz
	ajusjED4602IklEhd+5HFznbpjlVDC9KjhHiy9uYWIzLHv3NU8pAXiEEcBcPwzz+z5CK
	UUIynA0+YcPLkjc07LgXt3pDB0Y7nRPVZZMwhn6b9wyCYRdV7uUVipB3GdzG56KVgpi9
	m1fLKgzcXHPifw0GUg3V/EisnVvx6LENZG5yoFTRNzoIYm8RRZLC+KNG9pzgYluMcAp7
	faDw==
Original-Received: by 10.66.75.229 with SMTP id f5mr7156103paw.47.1343160717516;
	Tue, 24 Jul 2012 13:11:57 -0700 (PDT)
Original-Received: by 10.66.75.229 with SMTP id f5mr7156062paw.47.1343160717340;
	Tue, 24 Jul 2012 13:11:57 -0700 (PDT)
Original-Received: from formenos.mtv.corp.google.com (formenos.mtv.corp.google.com
	[172.18.110.66])
	by mx.google.com with ESMTPS id jv6sm12774301pbc.40.2012.07.24.13.11.55
	(version=TLSv1/SSLv3 cipher=OTHER);
	Tue, 24 Jul 2012 13:11:56 -0700 (PDT)
In-Reply-To: <1343160689-12378-1-git-send-email-koverstreet@google.com>
X-Gm-Message-State: ALoCoQldzKLJyy85KZZxf1f8scbkJ3E/fNh2Z8YykZQeezetsXf9xEfnjg7IbOQ44lrCL7/jBgxfF8mdpyt3kS+FDUoC7EspD3k1yXhF0RlqK0rOcnHyAwQwVo9Q7IU6I64GIX+SBNPl9Va54vpQ/+pNihjv+so7VWtsw11X0B2Th3nzK+fh4msAZxc5wRmS2Stcc40UtGsW
X-RedHat-Spam-Score: -2.711  (BAYES_00, DKIM_SIGNED, DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_LOW, SPF_PASS, T_RP_MATCHES_RCVD)
X-Scanned-By: MIMEDefang 2.68 on 10.5.11.22
X-Scanned-By: MIMEDefang 2.68 on 10.5.110.18
X-loop: dm-devel@redhat.com
X-BeenThere: dm-devel@redhat.com
X-Mailman-Version: 2.1.12
Precedence: junk
List-Id: device-mapper development <dm-devel.redhat.com>
List-Unsubscribe: <https://www.redhat.com/mailman/options/dm-devel>,
	<mailto:dm-devel-request@redhat.com?subject=unsubscribe>
List-Archive: <https://www.redhat.com/archives/dm-devel>
List-Post: <mailto:dm-devel@redhat.com>
List-Help: <mailto:dm-devel-request@redhat.com?subject=help>
List-Subscribe: <https://www.redhat.com/mailman/listinfo/dm-devel>,
	<mailto:dm-devel-request@redhat.com?subject=subscribe>
Original-Sender: dm-devel-bounces@redhat.com
Errors-To: dm-devel-bounces@redhat.com
Xref: news.gmane.org gmane.linux.kernel.device-mapper.devel:16411 gmane.linux.kernel.bcache.devel:630 gmane.linux.kernel:1332561 gmane.linux.kernel.drbd.devel:2035
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1332561>

This is prep work for killing bi_destructor - previously, pktcdvd had
its own pkt_bio_alloc which was basically duplication bio_kmalloc(),
necessitating its own bi_destructor implementation.

Signed-off-by: Kent Overstreet <koverstreet@google.com>
---
 drivers/block/pktcdvd.c |  115 ++++++++++++++++-------------------------------
 1 files changed, 39 insertions(+), 76 deletions(-)

diff --git a/drivers/block/pktcdvd.c b/drivers/block/pktcdvd.c
index ba66e44..6fe693a 100644
--- a/drivers/block/pktcdvd.c
+++ b/drivers/block/pktcdvd.c
@@ -522,36 +522,38 @@ static void pkt_bio_finished(struct pktcdvd_device *pd)
 	}
 }
 
-static void pkt_bio_destructor(struct bio *bio)
+static void pkt_end_io_read(struct bio *bio, int err)
 {
-	kfree(bio->bi_io_vec);
-	kfree(bio);
-}
+	struct packet_data *pkt = bio->bi_private;
+	struct pktcdvd_device *pd = pkt->pd;
+	BUG_ON(!pd);
 
-static struct bio *pkt_bio_alloc(int nr_iovecs)
-{
-	struct bio_vec *bvl = NULL;
-	struct bio *bio;
+	VPRINTK("pkt_end_io_read: bio=%p sec0=%llx sec=%llx err=%d\n", bio,
+		(unsigned long long)pkt->sector, (unsigned long long)bio->bi_sector, err);
 
-	bio = kmalloc(sizeof(struct bio), GFP_KERNEL);
-	if (!bio)
-		goto no_bio;
-	bio_init(bio);
+	if (err)
+		atomic_inc(&pkt->io_errors);
+	if (atomic_dec_and_test(&pkt->io_wait)) {
+		atomic_inc(&pkt->run_sm);
+		wake_up(&pd->wqueue);
+	}
+	pkt_bio_finished(pd);
+}
 
-	bvl = kcalloc(nr_iovecs, sizeof(struct bio_vec), GFP_KERNEL);
-	if (!bvl)
-		goto no_bvl;
+static void pkt_end_io_packet_write(struct bio *bio, int err)
+{
+	struct packet_data *pkt = bio->bi_private;
+	struct pktcdvd_device *pd = pkt->pd;
+	BUG_ON(!pd);
 
-	bio->bi_max_vecs = nr_iovecs;
-	bio->bi_io_vec = bvl;
-	bio->bi_destructor = pkt_bio_destructor;
+	VPRINTK("pkt_end_io_packet_write: id=%d, err=%d\n", pkt->id, err);
 
-	return bio;
+	pd->stats.pkt_ended++;
 
- no_bvl:
-	kfree(bio);
- no_bio:
-	return NULL;
+	pkt_bio_finished(pd);
+	atomic_dec(&pkt->io_wait);
+	atomic_inc(&pkt->run_sm);
+	wake_up(&pd->wqueue);
 }
 
 /*
@@ -567,10 +569,13 @@ static struct packet_data *pkt_alloc_packet_data(int frames)
 		goto no_pkt;
 
 	pkt->frames = frames;
-	pkt->w_bio = pkt_bio_alloc(frames);
+	pkt->w_bio = bio_kmalloc(GFP_KERNEL, frames);
 	if (!pkt->w_bio)
 		goto no_bio;
 
+	pkt->w_bio->bi_end_io = pkt_end_io_packet_write;
+	pkt->w_bio->bi_private = pkt;
+
 	for (i = 0; i < frames / FRAMES_PER_PAGE; i++) {
 		pkt->pages[i] = alloc_page(GFP_KERNEL|__GFP_ZERO);
 		if (!pkt->pages[i])
@@ -581,9 +586,12 @@ static struct packet_data *pkt_alloc_packet_data(int frames)
 	bio_list_init(&pkt->orig_bios);
 
 	for (i = 0; i < frames; i++) {
-		struct bio *bio = pkt_bio_alloc(1);
+		struct bio *bio = bio_kmalloc(GFP_KERNEL, 1);
 		if (!bio)
 			goto no_rd_bio;
+
+		bio->bi_end_io = pkt_end_io_read;
+		bio->bi_private = pkt;
 		pkt->r_bios[i] = bio;
 	}
 
@@ -1036,40 +1044,6 @@ static void pkt_make_local_copy(struct packet_data *pkt, struct bio_vec *bvec)
 	}
 }
 
-static void pkt_end_io_read(struct bio *bio, int err)
-{
-	struct packet_data *pkt = bio->bi_private;
-	struct pktcdvd_device *pd = pkt->pd;
-	BUG_ON(!pd);
-
-	VPRINTK("pkt_end_io_read: bio=%p sec0=%llx sec=%llx err=%d\n", bio,
-		(unsigned long long)pkt->sector, (unsigned long long)bio->bi_sector, err);
-
-	if (err)
-		atomic_inc(&pkt->io_errors);
-	if (atomic_dec_and_test(&pkt->io_wait)) {
-		atomic_inc(&pkt->run_sm);
-		wake_up(&pd->wqueue);
-	}
-	pkt_bio_finished(pd);
-}
-
-static void pkt_end_io_packet_write(struct bio *bio, int err)
-{
-	struct packet_data *pkt = bio->bi_private;
-	struct pktcdvd_device *pd = pkt->pd;
-	BUG_ON(!pd);
-
-	VPRINTK("pkt_end_io_packet_write: id=%d, err=%d\n", pkt->id, err);
-
-	pd->stats.pkt_ended++;
-
-	pkt_bio_finished(pd);
-	atomic_dec(&pkt->io_wait);
-	atomic_inc(&pkt->run_sm);
-	wake_up(&pd->wqueue);
-}
-
 /*
  * Schedule reads for the holes in a packet
  */
@@ -1111,21 +1085,15 @@ static void pkt_gather_data(struct pktcdvd_device *pd, struct packet_data *pkt)
 	 * Schedule reads for missing parts of the packet.
 	 */
 	for (f = 0; f < pkt->frames; f++) {
-		struct bio_vec *vec;
-
 		int p, offset;
+
 		if (written[f])
 			continue;
+
 		bio = pkt->r_bios[f];
-		vec = bio->bi_io_vec;
-		bio_init(bio);
-		bio->bi_max_vecs = 1;
-		bio->bi_sector = pkt->sector + f * (CD_FRAMESIZE >> 9);
-		bio->bi_bdev = pd->bdev;
-		bio->bi_end_io = pkt_end_io_read;
-		bio->bi_private = pkt;
-		bio->bi_io_vec = vec;
-		bio->bi_destructor = pkt_bio_destructor;
+		bio_reset(bio);
+		bio->bi_sector	= pkt->sector + f * (CD_FRAMESIZE >> 9);
+		bio->bi_bdev	= pd->bdev;
 
 		p = (f * CD_FRAMESIZE) / PAGE_SIZE;
 		offset = (f * CD_FRAMESIZE) % PAGE_SIZE;
@@ -1418,14 +1386,9 @@ static void pkt_start_write(struct pktcdvd_device *pd, struct packet_data *pkt)
 	}
 
 	/* Start the write request */
-	bio_init(pkt->w_bio);
-	pkt->w_bio->bi_max_vecs = PACKET_MAX_SIZE;
+	bio_reset(pkt->w_bio);
 	pkt->w_bio->bi_sector = pkt->sector;
 	pkt->w_bio->bi_bdev = pd->bdev;
-	pkt->w_bio->bi_end_io = pkt_end_io_packet_write;
-	pkt->w_bio->bi_private = pkt;
-	pkt->w_bio->bi_io_vec = bvec;
-	pkt->w_bio->bi_destructor = pkt_bio_destructor;
 	for (f = 0; f < pkt->frames; f++)
 		if (!bio_add_page(pkt->w_bio, bvec[f].bv_page, CD_FRAMESIZE, bvec[f].bv_offset))
 			BUG();
-- 
1.7.7.3

