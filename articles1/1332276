Path: news.gmane.org!not-for-mail
From: Alexander Graf <agraf@suse.de>
Newsgroups: gmane.linux.kernel,gmane.linux.documentation,gmane.comp.emulators.kvm.devel
Subject: Re: [PATCH] Documentation/kvm : Add documentation on Hypercalls
Date: Tue, 24 Jul 2012 14:13:21 +0200
Lines: 136
Approved: news@gmane.org
Message-ID: <500E9161.209@suse.de>
References: <20120724085359.11344.91022.sendpatchset@codeblue.in.ibm.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Trace: dough.gmane.org 1343132023 19214 80.91.229.3 (24 Jul 2012 12:13:43 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Tue, 24 Jul 2012 12:13:43 +0000 (UTC)
Cc: Rob Landley <rob@landley.net>, linux-kernel@vger.kernel.org,
	linux-doc@vger.kernel.org, Randy Dunlap <rdunlap@xenotime.net>,
	KVM <kvm@vger.kernel.org>, "H. Peter Anvin" <hpa@zytor.com>,
	Marcelo Tosatti <mtosatti@redhat.com>,
	Gleb Natapov <gleb@redhat.com>, Ingo Molnar <mingo@redhat.com>,
	Avi Kivity <avi@redhat.com>,
	Jan Kiszka <jan.kiszka@siemens.com>
To: Raghavendra K T <raghavendra.kt@linux.vnet.ibm.com>
Original-X-From: linux-kernel-owner@vger.kernel.org Tue Jul 24 14:13:41 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1Stdzf-0003ZB-Oh
	for glk-linux-kernel-3@plane.gmane.org; Tue, 24 Jul 2012 14:13:40 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753782Ab2GXMNc (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Tue, 24 Jul 2012 08:13:32 -0400
Original-Received: from cantor2.suse.de ([195.135.220.15]:36905 "EHLO mx2.suse.de"
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753747Ab2GXMNb (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
	Tue, 24 Jul 2012 08:13:31 -0400
Original-Received: from relay1.suse.de (unknown [195.135.220.254])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx2.suse.de (Postfix) with ESMTP id 132E7A4479;
	Tue, 24 Jul 2012 14:13:26 +0200 (CEST)
User-Agent: Mozilla/5.0 (X11; Linux i686 on x86_64; rv:14.0) Gecko/20120713 Thunderbird/14.0
In-Reply-To: <20120724085359.11344.91022.sendpatchset@codeblue.in.ibm.com>
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1332276 gmane.linux.documentation:5862 gmane.comp.emulators.kvm.devel:94953
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1332276>

On 07/24/2012 10:53 AM, Raghavendra K T wrote:
> From: Raghavendra K T <raghavendra.kt@linux.vnet.ibm.com>
>
> Thanks Alex for KVM_HC_FEATURES inputs and Jan for VAPIC_POLL_IRQ,
> and Peter (HPA) for suggesting hypercall ABI addition.
>
> Signed-off-by: Raghavendra K T <raghavendra.kt@linux.vnet.ibm.com>
> ---
> Please have a closer look at Hypercall ABI newly added
>
> Changes since last post:
>   - Added hypercall ABI (Peter)
>   - made KVM_HC_VAPIC_POLL_IRQ active explicitly (Randy)
>
> TODO: We need to add history details of each hypercall as suggested by HPA,
> which I could not trace easily. Hope it is easy for hypercall authors
>
>   Documentation/virtual/hypercalls.txt |   71 ++++++++++++++++++++++++++++++++++
>   1 files changed, 71 insertions(+), 0 deletions(-)
>   create mode 100644 Documentation/virtual/hypercalls.txt
>
> diff --git a/Documentation/virtual/hypercalls.txt b/Documentation/virtual/hypercalls.txt
> new file mode 100644
> index 0000000..caffc08
> --- /dev/null
> +++ b/Documentation/virtual/hypercalls.txt
> @@ -0,0 +1,71 @@
> +Hypercall ABI:
> +=============
> +A brief look at calling conventions of X86, S390 and PPC
> +X86:
> + KVM Hypercalls have a three-byte sequence of either the vmrun or the vmmrun
> + instruction. The hypervisor can replace it with instructions that are
> + guaranteed to be supported.
> +
> + Up to four arguments may be passed in rbx, rcx, rdx, and rsi respectively.
> + The hypercall number should be placed in rax and the return value will be
> + placed in rax.  No other registers will be clobbered unless explicitly stated
> + by the particular hypercall.
> +
> +S390:
> +  R2-R7 are used for parameters 1-6. In addition, R1 is used for hypercall
> +  number. The return value is written to R2.
> +
> +  S390 uses diagnose instruction as hypercall (0x500) along with hypercall
> +  number in R1.
> +
> + PoewerPC:

PowerPC

> +  It uses R3-R10 and hypercall number in R11. R4-R11 are used as output registers.
> +  Return value is placed in R3.
> +
> +  KVM hypercalls uses 4 byte opcode, that are patched with 'hypercall-instructions'
> +  property inside the device tree's /hypervisor node.
> +  For more information refer to Documentation/virtual/kvm/ppc-pv.txt

What exactly is this document supposed to cover? We have 3 different 
hypercall ABIs in KVM on PowerPC:

   1) KVM hypercalls (ePAPR)

The ePAPR compliant hypercall implementation. This one is used for KVM 
specific hypercalls. All hypercalls get a KVM vendor prefix (42) and 
then the hypercall id. We also implement generic hypercalls here, like 
the ePAPR idle hcall. The instruction sequence for these is listed in 
the device tree, as you noted above. It's available on all targets.

   2) PAPR hypercalls

To run server PowerPC PAPR guests (-M pseries in QEMU), we need to 
handle PAPR hypercalls. These are the same hypercalls that pHyp, the 
POWER hypervisor implements. Some of them are handled in the kernel, 
some are handled in user space. This is only available on book3s_64.

   3) OSI hypercalls

In parallel to QEMU, there is another user of KVM on PowerPC: 
Mac-on-Linux. That project had its own hypercalls long before we came 
along with KVM, so to maintain compatibility we also support their 
hypercalls. All of these get forwarded to user space. This is only 
useful on book3s_32, but can be used with book3s_64 as well.

> +
> +KVM Hypercalls Documentation
> +===========================
> +The template for each hypercall is:
> +1. Hypercall name, value.
> +2. Architecture(s)
> +3. Status (deprecated, obsolete, active)
> +4. Purpose
> +
> +1. KVM_HC_VAPIC_POLL_IRQ
> +------------------------
> +Value: 1

What are the value fields supposed to mean?


Alex

> +Architecture: x86
> +Status: active
> +Purpose: Trigger guest exit so that the host can check for pending
> +interrupts on reentry.
> +
> +2. KVM_HC_MMU_OP
> +------------------------
> +Value: 2
> +Architecture: x86
> +Status: deprecated.
> +Purpose: Support MMU operations such as writing to PTE,
> +flushing TLB, release PT.
> +
> +3. KVM_HC_FEATURES
> +------------------------
> +Value: 3
> +Architecture: PPC
> +Status: active
> +Purpose: Expose hypercall availability to the guest. On x86 platforms, cpuid
> +used to enumerate which hypercalls are available. On PPC, either device tree
> +based lookup ( which is also what EPAPR dictates) OR KVM specific enumeration
> +mechanism (which is this hypercall) can be used.
> +
> +4. KVM_HC_PPC_MAP_MAGIC_PAGE
> +------------------------
> +Value: 4
> +Architecture: PPC
> +Status: active
> +Purpose: To enable communication between the hypervisor and guest there is a
> +shared page that contains parts of supervisor visible register state.
> +The guest can map this shared page to access its supervisor register through
> +memory using this hypercall.
>

