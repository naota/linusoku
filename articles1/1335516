Path: news.gmane.org!not-for-mail
From: Karl Beldan <karl.beldan@gmail.com>
Newsgroups: gmane.linux.kernel,gmane.linux.ports.arm.kernel
Subject: Re: About dma_sync_single_for_{cpu,device}
Date: Tue, 31 Jul 2012 08:45:57 +0200
Lines: 76
Approved: news@gmane.org
Message-ID: <20120731064557.GA4676@gobelin>
References: <20120730202401.GA4947@gobelin>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=utf-8
X-Trace: dough.gmane.org 1343717022 1045 80.91.229.3 (31 Jul 2012 06:43:42 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Tue, 31 Jul 2012 06:43:42 +0000 (UTC)
Cc: linux-kernel@vger.kernel.org
To: linux-arm-kernel@lists.infradead.org
Original-X-From: linux-kernel-owner@vger.kernel.org Tue Jul 31 08:43:43 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1Sw6BC-0003qM-Eb
	for glk-linux-kernel-3@plane.gmane.org; Tue, 31 Jul 2012 08:43:42 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754849Ab2GaGng (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Tue, 31 Jul 2012 02:43:36 -0400
Original-Received: from mail-wg0-f44.google.com ([74.125.82.44]:56303 "EHLO
	mail-wg0-f44.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754437Ab2GaGne (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Tue, 31 Jul 2012 02:43:34 -0400
Original-Received: by wgbdr13 with SMTP id dr13so5552144wgb.1
        for <linux-kernel@vger.kernel.org>; Mon, 30 Jul 2012 23:43:33 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-type:content-disposition:in-reply-to:x-location:user-agent;
        bh=hy4PqkWycj+niQxjfAEY29PM3GAoCefRbJiCYwU2gUs=;
        b=VvIMFxMGpgMebK+qKDA7E3y88ygODwBAdZF8YkL/R4GKI1kZDUzftPveayqETkjlKT
         qY6ubgh3Ppci/li5VyqHsFLfp4dTNHORZV+LCi2gwYYLQgX87qsUt+wEo2UiRYbGntYk
         1D6J5JVTT9DlNfAG6QmHw1jKhdFtNKW+sj2Xfj8L+DRTL9Fp9t7R5yVi+0ts2BLRICN4
         EjuBICzlmgWMMka1Kz3oS4ezJXDv/IhH/hovGzysOJazO+vXFkZSJcw4Oosc2Y4wYVgT
         RzPZ3LCC55n3G8yblw1nWrOCn+qBKxrrkmy1j114LvqGjJXhgYQ7lKNPkFwQaC9cSIdL
         u4ZA==
Original-Received: by 10.180.94.164 with SMTP id dd4mr51850wib.1.1343717013295;
        Mon, 30 Jul 2012 23:43:33 -0700 (PDT)
Original-Received: from gobelin ([80.214.1.9])
        by mx.google.com with ESMTPS id el6sm20648487wib.8.2012.07.30.23.43.32
        (version=TLSv1/SSLv3 cipher=OTHER);
        Mon, 30 Jul 2012 23:43:32 -0700 (PDT)
Content-Disposition: inline
In-Reply-To: <20120730202401.GA4947@gobelin>
X-Location: France
User-Agent: Mutt (Linux 3.5.0-07078-gf7da9cd-dirty x86_64 GNU/Linux)
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1335516 gmane.linux.ports.arm.kernel:179513
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1335516>

Hi,


(This is an email originally addressed to the linux-kernel
mailing-list.)


On our board we've got an MV78200 and a network device between which we
xfer memory chunks via the ddram with an external dma controller.
To handle these xfers we're using the dma API.

To tx a chunk of data from the SoC => network device, we :
- prepare a buffer with a leading header embedding a pattern, 
- trigger the xfer and wait for an irq
// The device updates the pattern and then triggers an irq
- upon irq we check the pattern for the xfer completion


I was expecting the following to work:
	addr = dma_map_single(dev, buffer, size, DMA_TO_DEVICE);
	dma_sync_single_for_device(dev, buffer, pattern_size, DMA_FROM_DEVICE);
	dev_send(buffer);
	// wait for irq (don't peek in the buffer) ... got irq
	dma_sync_single_for_cpu(dev, buffer, pattern_size, DMA_FROM_DEVICE);
	if (!xfer_done(buffer)) // not RAM value
		dma_sync_single_for_device(dev, buffer, pattern_size, DMA_FROM_DEVICE);
	[...]

But this does not work (the buffer pattern does not reflect the ddram
value).
On the other hand, the following works:
	[...]
	// wait for irq (don't peek in the buffer) ... got irq
	dma_sync_single_for_device(dev, buffer, pattern_size, DMA_FROM_DEVICE);
	if (!xfer_done(buffer)) // RAM value
	[...]


Looking at 
	dma-mapping.c:__dma_page_cpu_to_{dev,cpu}() and
	proc-feroceon.S: feroceon_dma_{,un}map_area
this behavior is not surprising.
The sync_for_cpu calls the unmap which just invalidates the outer cache
while the sync_for_device invalidates both inner and outer.

It seems that:
- we need to invalidate after the RAM has been updated
- we need to invalidate with sync_single_for_device rather than
  sync_single_for_cpu to check the value

Is it correct ?






Maybe the following comment in dma-mapping.c explains the situation :
/*
 * The DMA API is built upon the notion of "buffer ownership".  A buffer
 * is either exclusively owned by the CPU (and therefore may be accessed
 * by it) or exclusively owned by the DMA device.  These helper functions
 * represent the transitions between these two ownership states.
 *
 * Note, however, that on later ARMs, this notion does not work due to
 * speculative prefetches.  We model our approach on the assumption that
 * the CPU does do speculative prefetches, which means we clean caches
 * before transfers and delay cache invalidation until transfer completion.
 *
 */

Thanks for your input,
 
Regards,
 
Karl
