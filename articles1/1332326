Path: news.gmane.org!not-for-mail
From: Vlad Yasevich <vyasevich@gmail.com>
Newsgroups: gmane.linux.kernel,gmane.linux.network
Subject: Re: [PATCH] sctp: Make "Invalid Stream Identifier" ERROR follows SACK when bundling
Date: Tue, 24 Jul 2012 10:05:36 -0400
Lines: 153
Approved: news@gmane.org
Message-ID: <75bdd73e-1c47-4fd6-bc29-5b86ee6da69a@email.android.com>
References: <1342677450-21810-1-git-send-email-xufengzhang.main@gmail.com> <500CDE35.6000009@windriver.com> <42fcd21f-68bd-4dc7-8460-0cb968eb512e@email.android.com> <500E1057.3020509@windriver.com>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain;
 charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Trace: dough.gmane.org 1343138755 11153 80.91.229.3 (24 Jul 2012 14:05:55 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Tue, 24 Jul 2012 14:05:55 +0000 (UTC)
Cc: sri@us.ibm.com, davem@davemloft.net, xufengzhang.main@gmail.com,
	linux-sctp@vger.kernel.org, netdev@vger.kernel.org,
	linux-kernel@vger.kernel.org
To: xufeng zhang <xufeng.zhang@windriver.com>
Original-X-From: linux-kernel-owner@vger.kernel.org Tue Jul 24 16:05:54 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1StfkG-0007Yr-RX
	for glk-linux-kernel-3@plane.gmane.org; Tue, 24 Jul 2012 16:05:53 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754723Ab2GXOFo (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Tue, 24 Jul 2012 10:05:44 -0400
Original-Received: from mail-gg0-f174.google.com ([209.85.161.174]:61853 "EHLO
	mail-gg0-f174.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754265Ab2GXOFm (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Tue, 24 Jul 2012 10:05:42 -0400
Original-Received: by gglu4 with SMTP id u4so6673742ggl.19
        for <multiple recipients>; Tue, 24 Jul 2012 07:05:41 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlemail.com; s=20120113;
        h=references:user-agent:in-reply-to:mime-version:content-type
         :content-transfer-encoding:subject:from:date:to:cc:message-id;
        bh=glHZwLpOZaNK8okzNh8C1PtRJYjWceNqBs4rLejloV0=;
        b=WE/xRBpPzqWmCTj4/h3WHAZ4RCznV/t4POI2btJoOhb57HlcPvjHPDrlk+hJZ/9/NW
         xjFsGgmcAQAgf/g8GgThX/ECbQV5DVXGze0u3AixuM1zBqawe50RirL9M57HZ/43aOa/
         4UwKC230kKhwG+QFNsx+6JA0kpuF5ylGcyYo+sYLnh66hk1GcfPJr3gmNWptyyRKnfNg
         ddT/IGuOFCqCsgarnrrE/1OyxdFwPEsHJqnsUmYtrkCmBx5/ZBeow01ud9dwHTmCv+24
         I4YLnQ/rAZe4ORq0ZpDzmWYbQ1H4tAaNX5wXD/6qevOuJ9VNLBXVuPGifIiiUKEa/LAs
         LwAA==
Original-Received: by 10.236.186.101 with SMTP id v65mr19231657yhm.23.1343138741713;
        Tue, 24 Jul 2012 07:05:41 -0700 (PDT)
Original-Received: from [192.168.1.5] (70.44.196.86.res-cmts.brd2.ptd.net. [70.44.196.86])
        by mx.google.com with ESMTPS id z19sm15387791anh.22.2012.07.24.07.05.40
        (version=SSLv3 cipher=OTHER);
        Tue, 24 Jul 2012 07:05:41 -0700 (PDT)
User-Agent: SkitMail for Android
In-Reply-To: <500E1057.3020509@windriver.com>
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1332326 gmane.linux.network:238273
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1332326>

xufeng zhang <xufeng.zhang@windriver.com> wrote:

>On 07/24/2012 10:27 AM, Vlad Yasevich wrote:
>> xufeng zhang<xufeng.zhang@windriver.com>  wrote:
>>
>>    
>>> On 07/19/2012 01:57 PM, xufengzhang.main@gmail.com wrote:
>>>      
>>>> When "Invalid Stream Identifier" ERROR happens after process the
>>>> received DATA chunks, this ERROR chunk is enqueued into outqueue
>>>> before SACK chunk, so when bundling ERROR chunk with SACK chunk,
>>>> the ERROR chunk is always placed first in the packet because of
>>>> the chunk's position in the outqueue.
>>>> This violates sctp specification:
>>>>       RFC 4960 6.5. Stream Identifier and Stream Sequence Number
>>>>       ...The endpoint may bundle the ERROR chunk in the same
>>>>       packet as the SACK as long as the ERROR follows the SACK.
>>>> So we must place SACK first when bundling "Invalid Stream
>Identifier"
>>>> ERROR and SACK in one packet.
>>>> Although we can do that by enqueue SACK chunk into outqueue before
>>>> ERROR chunk, it will violate the side-effect interpreter
>processing.
>>>> It's easy to do this job when dequeue chunks from the outqueue,
>>>> by this way, we introduce a flag 'has_isi_err' which indicate
>>>> whether or not the "Invalid Stream Identifier" ERROR happens.
>>>>
>>>> Signed-off-by: Xufeng Zhang<xufeng.zhang@windriver.com>
>>>> ---
>>>>    include/net/sctp/structs.h |    2 ++
>>>>    net/sctp/output.c          |   26 ++++++++++++++++++++++++++
>>>>    2 files changed, 28 insertions(+), 0 deletions(-)
>>>>
>>>> diff --git a/include/net/sctp/structs.h
>b/include/net/sctp/structs.h
>>>> index 88949a9..5adf4de 100644
>>>> --- a/include/net/sctp/structs.h
>>>> +++ b/include/net/sctp/structs.h
>>>> @@ -842,6 +842,8 @@ struct sctp_packet {
>>>>    	    has_sack:1,		/* This packet contains a SACK chunk. */
>>>>    	    has_auth:1,		/* This packet contains an AUTH chunk */
>>>>    	    has_data:1,		/* This packet contains at least 1 DATA chunk
>*/
>>>> +	    has_isi_err:1,	/* This packet contains a "Invalid Stream
>>>> +				 * Identifier" ERROR chunk */
>>>>    	    ipfragok:1,		/* So let ip fragment this packet */
>>>>    	    malloced:1;		/* Is it malloced? */
>>>>    };
>>>> diff --git a/net/sctp/output.c b/net/sctp/output.c
>>>> index 817174e..77fb1ae 100644
>>>> --- a/net/sctp/output.c
>>>> +++ b/net/sctp/output.c
>>>> @@ -79,6 +79,7 @@ static void sctp_packet_reset(struct sctp_packet
>>>>        
>>> *packet)
>>>      
>>>>    	packet->has_sack = 0;
>>>>    	packet->has_data = 0;
>>>>    	packet->has_auth = 0;
>>>> +	packet->has_isi_err = 0;
>>>>    	packet->ipfragok = 0;
>>>>    	packet->auth = NULL;
>>>>    }
>>>> @@ -267,6 +268,7 @@ static sctp_xmit_t
>sctp_packet_bundle_sack(struct
>>>>        
>>> sctp_packet *pkt,
>>>      
>>>>    sctp_xmit_t sctp_packet_append_chunk(struct sctp_packet *packet,
>>>>    				     struct sctp_chunk *chunk)
>>>>    {
>>>> +	struct sctp_chunk *lchunk;
>>>>    	sctp_xmit_t retval = SCTP_XMIT_OK;
>>>>    	__u16 chunk_len = WORD_ROUND(ntohs(chunk->chunk_hdr->length));
>>>>
>>>> @@ -316,7 +318,31 @@ sctp_xmit_t sctp_packet_append_chunk(struct
>>>>        
>>> sctp_packet *packet,
>>>      
>>>>    		packet->has_cookie_echo = 1;
>>>>    		break;
>>>>
>>>> +	    case SCTP_CID_ERROR:
>>>> +		if (chunk->subh.err_hdr->cause&   SCTP_ERROR_INV_STRM)
>>>> +			packet->has_isi_err = 1;
>>>> +		break;
>>>> +
>>>>    	    case SCTP_CID_SACK:
>>>> +		/* RFC 4960
>>>> +		 * 6.5 Stream Identifier and Stream Sequence Number
>>>> +		 * The endpoint may bundle the ERROR chunk in the same
>>>> +		 * packet as the SACK as long as the ERROR follows the SACK.
>>>> +		 */
>>>> +		if (packet->has_isi_err) {
>>>> +			if (list_is_singular(&packet->chunk_list))
>>>> +				list_add(&chunk->list,&packet->chunk_list);
>>>> +			else {
>>>> +				lchunk = list_first_entry(&packet->chunk_list,
>>>> +						struct sctp_chunk, list);
>>>> +				list_add(&chunk->list,&lchunk->list);
>>>> +			}
>>>>
>>>>        
>>> And I should clarify the above judgment code.
>>> AFAIK, there should be two cases for the bundling when invalid
>stream
>>> identifier error happens:
>>> 1). COOKIE_ACK ERROR SACK
>>> 2). ERROR SACK
>>> So I need to deal with the two cases differently.
>>>
>>>      
>> Sorry but I just don't buy that the above are the only 2 cases.  What
>if there are addip chunks as well?  What if there are some other
>extensions also.  This code has to be generic enough to handle any
>condition.
>>    
>Aha, you are right, this may happens.
>So I think the general solution is to fix this problem in the enqueue
>side.
>What do you think? any better suggestion!
>

Don't have code in front of me but what if we carry the error condition to where we queue the Sack and add the error side effect then?

-vlad

>
>Thanks,
>Xufeng Zhang
>> - vlad
>>
>>    
>>> Thanks,
>>> Xufeng Zhang
>>>      
>>>> +			packet->size += chunk_len;
>>>> +			chunk->transport = packet->transport;
>>>> +			packet->has_sack = 1;
>>>> +			goto finish;
>>>> +		}
>>>> +
>>>>    		packet->has_sack = 1;
>>>>    		break;
>>>>
>>>>
>>>>        
>>
>>    


-- 
Sent from my Android phone with SkitMail. Please excuse my brevity.
