Path: news.gmane.org!not-for-mail
From: Tejun Heo <tj@kernel.org>
Newsgroups: gmane.linux.kernel,gmane.comp.emulators.kvm.devel,gmane.linux.drivers.video-input-infrastructure,gmane.linux.kernel.spi.devel
Subject: Re: [PATCH 2/2] kthread_worker: reimplement flush_kthread_work()
 to allow freeing the work item being executed
Date: Mon, 23 Jul 2012 10:12:15 -0700
Lines: 24
Approved: news@gmane.org
Message-ID: <20120723171215.GA5776@google.com>
References: <20120719211510.GA32763@google.com>
 <20120719211629.GC32763@google.com>
 <1342894814.2504.31.camel@palomino.walls.org>
 <20120722164953.GC5144@dhcp-172-17-108-109.mtv.corp.google.com>
 <1342990015.2487.19.camel@palomino.walls.org>
NNTP-Posting-Host: plane.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Trace: dough.gmane.org 1343063553 2474 80.91.229.3 (23 Jul 2012 17:12:33 GMT)
X-Complaints-To: usenet@dough.gmane.org
NNTP-Posting-Date: Mon, 23 Jul 2012 17:12:33 +0000 (UTC)
Cc: linux-kernel@vger.kernel.org,
	Andrew Morton <akpm@linux-foundation.org>,
	Avi Kivity <avi@redhat.com>, kvm@vger.kernel.org,
	ivtv-devel@ivtvdriver.org, linux-media@vger.kernel.org,
	Grant Likely <grant.likely@secretlab.ca>,
	spi-devel-general@lists.sourceforge.net,
	Linus Torvalds <torvalds@linux-foundation.org>
To: Andy Walls <awalls@md.metrocast.net>
Original-X-From: linux-kernel-owner@vger.kernel.org Mon Jul 23 19:12:31 2012
Return-path: <linux-kernel-owner@vger.kernel.org>
Envelope-to: glk-linux-kernel-3@plane.gmane.org
Original-Received: from vger.kernel.org ([209.132.180.67])
	by plane.gmane.org with esmtp (Exim 4.69)
	(envelope-from <linux-kernel-owner@vger.kernel.org>)
	id 1StMBK-00016n-Iy
	for glk-linux-kernel-3@plane.gmane.org; Mon, 23 Jul 2012 19:12:30 +0200
Original-Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754141Ab2GWRMW (ORCPT <rfc822;glk-linux-kernel-3@m.gmane.org>);
	Mon, 23 Jul 2012 13:12:22 -0400
Original-Received: from mail-pb0-f46.google.com ([209.85.160.46]:40993 "EHLO
	mail-pb0-f46.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753784Ab2GWRMU (ORCPT
	<rfc822;linux-kernel@vger.kernel.org>);
	Mon, 23 Jul 2012 13:12:20 -0400
Original-Received: by pbbrp8 with SMTP id rp8so11163055pbb.19
        for <multiple recipients>; Mon, 23 Jul 2012 10:12:20 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=sender:date:from:to:cc:subject:message-id:references:mime-version
         :content-type:content-disposition:in-reply-to:user-agent;
        bh=hA/wGw0kE9tTuA3M1dARxaf5kFpmo5xo0DfOXD1HQoU=;
        b=neKkLjQPsXgftn5WoJwed2SFWACNMdoHvKmGFFx/0zIPlWTW48DImyJzjIbVtBU1XP
         jL5VV7N384TF3l8ynKky6IDW+HFID5X2HxxUksQkWw7sQwMgGWpP3ggZ/5hcNbKuIIzV
         JR0fSobPGB3hYr9uIDKNvCyQcDDlxA5+CTL36G2txS5Zar+MyIrrDqE3pEEGZwwxpoNd
         /xoicgeLwFIDcYbCeTbqUker/sdy6lczq4cS8t1A9T9oVlaCPAEoFsoFJTwLIQzLn7s2
         /ydbitHGNNmIv48IY4pWKfxcEXrD7oHwWXenSDEbW0qyRYfqA2KfeEk89yiU29LkTXdo
         mPsA==
Original-Received: by 10.68.131.41 with SMTP id oj9mr36396656pbb.130.1343063539956;
        Mon, 23 Jul 2012 10:12:19 -0700 (PDT)
Original-Received: from google.com (wtj.mtv.corp.google.com [172.18.110.84])
        by mx.google.com with ESMTPS id tv6sm10317840pbc.24.2012.07.23.10.12.17
        (version=SSLv3 cipher=OTHER);
        Mon, 23 Jul 2012 10:12:18 -0700 (PDT)
Content-Disposition: inline
In-Reply-To: <1342990015.2487.19.camel@palomino.walls.org>
User-Agent: Mutt/1.5.20 (2009-06-14)
Original-Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
Xref: news.gmane.org gmane.linux.kernel:1331864 gmane.comp.emulators.kvm.devel:94921 gmane.linux.drivers.video-input-infrastructure:51246 gmane.linux.kernel.spi.devel:10773
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/1331864>

Hello,

On Sun, Jul 22, 2012 at 04:46:54PM -0400, Andy Walls wrote:
> Hmmm, I didn't know about the constraint about 'known to be alive' in
> the other email I just sent.
> 
> That might make calling flush_kthread_work() hard for a user to use, if
> the user lets the work get freed by another thread executing the work.

Umm... flushing a freed work item doesn't make any sense at all.  The
pointer itself loses the ability to identify anything.  What if it
gets recycled to another work item which happens to depend on the
flusher to make forward progress?  You now have a circular dependency
through a recycled memory area.  Good luck hunting that down.

For pretty much any API, allowing dangling pointers as argument is
insane.  If you want to flush self-freeing work items, flush the
kthread_worker.  That's how it is with workqueue and how it should be
with kthread_worker too.

Thanks.

-- 
tejun
